{"prompt": "refactor(scheduler): move scheduler to new crate to support workflows in multiple crates (#1681)", "response": "Files to modify:\n\n\n**ext_traits.rs**\n  Add:\n    - function: private::check_value_present\n    - function: private::get_required_value\n    - function: private::parse_enum\n    - function: private::parse_value\n    - function: private::update_value\n    - trait: pub::OptionExt\n    - impl: impl OptionExt<T> for Option<T>\n\n**lib.rs**\n  Add:\n    - mod: pub::macros\n\n**macros.rs**\n  Modify existing code\n\n**logger.rs**\n  Modify existing code\n\n**email.rs**\n  Modify existing code\n\n**scheduler.rs**\n  Add:\n    - function: private::trigger_workflow\n    - function: private::test_enum_to_string\n    - struct: pub::WorkflowRunner\n    - enum: pub::PTRunner\n    - impl: impl ProcessTrackerWorkflows<routes::AppState> for WorkflowRunner\n    - mod: private::workflow_tests\n\n**defaults.rs**\n  Remove:\n    - function: private::default\n    - function: private::default\n    - function: private::default\n    - impl: impl Default for super::settings::SchedulerSettings\n    - impl: impl Default for super::settings::ProducerSettings\n    - impl: impl Default for super::settings::ConsumerSettings\n\n**settings.rs**\n  Remove:\n    - struct: pub::SchedulerSettings\n    - struct: pub::ProducerSettings\n    - struct: pub::ConsumerSettings\n\n**validations.rs**\n  Remove:\n    - function: pub::validate\n    - function: pub::validate\n    - impl: impl super::settings::SchedulerSettings\n    - impl: impl super::settings::ProducerSettings\n\n**connection.rs**\n  Modify existing code\n\n**utils.rs**\n  Remove:\n    - function: private::get_line2\n  Add:\n    - function: private::get_line2\n\n**errors.rs**\n  Remove:\n    - function: private::switch\n    - function: private::into\n    - function: private::from\n    - function: private::from\n    - function: pub::is_db_not_found\n    - function: pub::is_db_unique_violation\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: private::error_response\n    - function: private::status_code\n    - function: private::error_response\n    - function: pub::is_upstream_timeout\n    - function: pub::is_connection_closed\n    - enum: pub::StorageError\n    - enum: pub::ApplicationError\n    - enum: pub::ApiClientError\n    - enum: pub::ProcessTrackerError\n    - impl: impl ErrorSwitch<DataStorageError> for StorageError\n    - impl: impl Into<DataStorageError> for &StorageError\n    - impl: impl From<error_stack::Report<RedisError>> for StorageError\n    - impl: impl From<error_stack::Report<storage_errors::DatabaseError>> for StorageError\n    - impl: impl StorageError\n    - impl: impl From<MetricsError> for ApplicationError\n    - impl: impl From<std::io::Error> for ApplicationError\n    - impl: impl From<ConfigError> for ApplicationError\n    - impl: impl ResponseError for ApplicationError\n    - impl: impl ApiClientError\n\n**api_error_response.rs**\n  Add:\n    - function: private::to_pt_error\n    - impl: impl PTError for ApiErrorResponse\n\n**cards.rs**\n  Modify existing code\n\n**vault.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**helpers.rs**\n  Modify existing code\n\n**refunds.rs**\n  Modify existing code\n\n**db.rs**\n  Remove:\n    - function: private::get_redis_conn\n    - struct: pub::MockDb\n    - impl: impl StorageInterface for MockDb\n    - impl: impl RedisConnInterface for MockDb\n    - mod: pub::payment_intent\n    - mod: pub::process_tracker\n    - mod: pub::queue\n  Add:\n    - function: private::get_scheduler_db\n    - impl: impl StorageInterface for MockDb\n\n**api_keys.rs**\n  Modify existing code\n\n**dispute.rs**\n  Modify existing code\n\n**events.rs**\n  Modify existing code\n\n**locker_mock_up.rs**\n  Modify existing code\n\n**merchant_connector_account.rs**\n  Modify existing code\n\n**merchant_key_store.rs**\n  Modify existing code\n\n**lib.rs**\n  Add:\n    - mod: pub::macros\n\n**app.rs**\n  Add:\n    - function: private::get_db\n    - impl: impl scheduler::SchedulerAppState for AppState\n\n**metrics.rs**\n  Modify existing code\n\n**scheduler.rs**\n  Add:\n    - function: private::trigger_workflow\n    - function: private::test_enum_to_string\n    - struct: pub::WorkflowRunner\n    - enum: pub::PTRunner\n    - impl: impl ProcessTrackerWorkflows<routes::AppState> for WorkflowRunner\n    - mod: private::workflow_tests\n\n**types.rs**\n  Remove:\n    - mod: pub::batch\n    - mod: pub::config\n    - mod: pub::flow\n    - mod: pub::process_data\n    - mod: pub::state\n\n**config.rs**\n  Remove:\n    - function: pub::new\n    - struct: pub::SchedulerConfig\n    - impl: impl SchedulerConfig\n\n**state.rs**\n  Remove:\n    - struct: pub::DummyWorkflowState\n    - enum: pub::WorkflowState\n    - impl: impl DummyWorkflowState\n\n**workflows.rs**\n  Remove:\n    - function: private::execute_workflow\n    - function: private::success_handler\n    - function: private::error_handler\n    - function: private::test_enum_to_string\n    - trait: pub::ProcessTrackerWorkflow\n    - mod: pub::api_key_expiry\n    - mod: pub::payment_sync\n    - mod: pub::refund_router\n    - mod: pub::tokenized_data\n    - mod: private::workflow_tests\n\n**services.rs**\n  Modify existing code\n\n**storage.rs**\n  Remove:\n    - mod: pub::process_tracker\n    - mod: pub::reverse_lookup\n  Add:\n    - mod: pub::reverse_lookup\n\n**process_tracker.rs**\n  Remove:\n    - function: private::is_valid_business_status\n    - function: private::make_process_tracker_new\n    - function: private::reset\n    - function: private::retry\n    - function: private::finish_with_status\n    - trait: pub::ProcessTrackerExt\n    - impl: impl ProcessTrackerExt for ProcessTracker\n\n**utils.rs**\n  Remove:\n    - function: private::get_line2\n  Add:\n    - function: private::get_line2\n\n**workflows.rs**\n  Remove:\n    - function: private::execute_workflow\n    - function: private::success_handler\n    - function: private::error_handler\n    - function: private::test_enum_to_string\n    - trait: pub::ProcessTrackerWorkflow\n    - mod: pub::api_key_expiry\n    - mod: pub::payment_sync\n    - mod: pub::refund_router\n    - mod: pub::tokenized_data\n    - mod: private::workflow_tests\n\n**api_key_expiry.rs**\n  Modify existing code\n\n**payment_sync.rs**\n  Add:\n    - struct: pub::PaymentsSyncWorkflow\n\n**refund_router.rs**\n  Remove:\n    - impl: impl ProcessTrackerWorkflow for RefundWorkflowRouter\n  Add:\n    - struct: pub::RefundWorkflowRouter\n    - impl: impl ProcessTrackerWorkflow<AppState> for RefundWorkflowRouter\n\n**tokenized_data.rs**\n  Remove:\n    - impl: impl ProcessTrackerWorkflow for DeleteTokenizeDataWorkflow\n  Add:\n    - struct: pub::DeleteTokenizeDataWorkflow\n    - impl: impl ProcessTrackerWorkflow<AppState> for DeleteTokenizeDataWorkflow\n\n**configs.rs**\n  Add:\n    - mod: pub::defaults\n    - mod: pub::settings\n    - mod: pub::validations\n\n**defaults.rs**\n  Remove:\n    - function: private::default\n    - function: private::default\n    - function: private::default\n    - impl: impl Default for super::settings::SchedulerSettings\n    - impl: impl Default for super::settings::ProducerSettings\n    - impl: impl Default for super::settings::ConsumerSettings\n\n**settings.rs**\n  Remove:\n    - struct: pub::SchedulerSettings\n    - struct: pub::ProducerSettings\n    - struct: pub::ConsumerSettings\n\n**validations.rs**\n  Remove:\n    - function: pub::validate\n    - function: pub::validate\n    - impl: impl super::settings::SchedulerSettings\n    - impl: impl super::settings::ProducerSettings\n\n**consumer.rs**\n  Add:\n    - mod: pub::types\n    - mod: pub::workflows\n\n**types.rs**\n  Remove:\n    - mod: pub::batch\n    - mod: pub::config\n    - mod: pub::flow\n    - mod: pub::process_data\n    - mod: pub::state\n\n**batch.rs**\n  Modify existing code\n\n**process_data.rs**\n  Remove:\n    - struct: pub::ProcessData\n\n**workflows.rs**\n  Remove:\n    - function: private::execute_workflow\n    - function: private::success_handler\n    - function: private::error_handler\n    - function: private::test_enum_to_string\n    - trait: pub::ProcessTrackerWorkflow\n    - mod: pub::api_key_expiry\n    - mod: pub::payment_sync\n    - mod: pub::refund_router\n    - mod: pub::tokenized_data\n    - mod: private::workflow_tests\n\n**mod.rs**\n  Add:\n    - mod: pub::process_tracker\n    - mod: pub::queue\n\n**process_tracker.rs**\n  Remove:\n    - function: private::is_valid_business_status\n    - function: private::make_process_tracker_new\n    - function: private::reset\n    - function: private::retry\n    - function: private::finish_with_status\n    - trait: pub::ProcessTrackerExt\n    - impl: impl ProcessTrackerExt for ProcessTracker\n\n**queue.rs**\n  Modify existing code\n\n**env.rs**\n  Modify existing code\n\n**errors.rs**\n  Remove:\n    - function: private::switch\n    - function: private::into\n    - function: private::from\n    - function: private::from\n    - function: pub::is_db_not_found\n    - function: pub::is_db_unique_violation\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: private::error_response\n    - function: private::status_code\n    - function: private::error_response\n    - function: pub::is_upstream_timeout\n    - function: pub::is_connection_closed\n    - enum: pub::StorageError\n    - enum: pub::ApplicationError\n    - enum: pub::ApiClientError\n    - enum: pub::ProcessTrackerError\n    - impl: impl ErrorSwitch<DataStorageError> for StorageError\n    - impl: impl Into<DataStorageError> for &StorageError\n    - impl: impl From<error_stack::Report<RedisError>> for StorageError\n    - impl: impl From<error_stack::Report<storage_errors::DatabaseError>> for StorageError\n    - impl: impl StorageError\n    - impl: impl From<MetricsError> for ApplicationError\n    - impl: impl From<std::io::Error> for ApplicationError\n    - impl: impl From<ConfigError> for ApplicationError\n    - impl: impl ResponseError for ApplicationError\n    - impl: impl ApiClientError\n\n**flow.rs**\n  Modify existing code\n\n**lib.rs**\n  Add:\n    - mod: pub::macros\n\n**metrics.rs**\n  Modify existing code\n\n**producer.rs**\n  Modify existing code\n\n**scheduler.rs**\n  Add:\n    - function: private::trigger_workflow\n    - function: private::test_enum_to_string\n    - struct: pub::WorkflowRunner\n    - enum: pub::PTRunner\n    - impl: impl ProcessTrackerWorkflows<routes::AppState> for WorkflowRunner\n    - mod: private::workflow_tests\n\n**settings.rs**\n  Remove:\n    - struct: pub::SchedulerSettings\n    - struct: pub::ProducerSettings\n    - struct: pub::ConsumerSettings\n\n**utils.rs**\n  Remove:\n    - function: private::get_line2\n  Add:\n    - function: private::get_line2\n\n**connection.rs**\n  Modify existing code\n\n**errors.rs**\n  Remove:\n    - function: private::switch\n    - function: private::into\n    - function: private::from\n    - function: private::from\n    - function: pub::is_db_not_found\n    - function: pub::is_db_unique_violation\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: private::error_response\n    - function: private::status_code\n    - function: private::error_response\n    - function: pub::is_upstream_timeout\n    - function: pub::is_connection_closed\n    - enum: pub::StorageError\n    - enum: pub::ApplicationError\n    - enum: pub::ApiClientError\n    - enum: pub::ProcessTrackerError\n    - impl: impl ErrorSwitch<DataStorageError> for StorageError\n    - impl: impl Into<DataStorageError> for &StorageError\n    - impl: impl From<error_stack::Report<RedisError>> for StorageError\n    - impl: impl From<error_stack::Report<storage_errors::DatabaseError>> for StorageError\n    - impl: impl StorageError\n    - impl: impl From<MetricsError> for ApplicationError\n    - impl: impl From<std::io::Error> for ApplicationError\n    - impl: impl From<ConfigError> for ApplicationError\n    - impl: impl ResponseError for ApplicationError\n    - impl: impl ApiClientError\n\n**lib.rs**\n  Add:\n    - mod: pub::macros\n\n**payment_intent.rs**\n  Add:\n    - function: private::filter_payment_intent_by_constraints\n    - function: private::filter_payment_intents_by_time_range_constraints\n    - function: private::get_filtered_active_attempt_ids_for_total_count\n    - function: private::get_filtered_payment_intents_attempt\n    - function: private::insert_payment_intent\n    - function: private::update_payment_intent\n    - function: private::find_payment_intent_by_payment_id_merchant_id\n    - impl: impl PaymentIntentInterface for MockDb"}
