{"prompt": "feat(core): add a procedural macro for validating schema attributes for a struct (#8006)\n\nCo-authored-by: hyperswitch-bot[bot] <148525504+hyperswitch-bot[bot]@users.noreply.github.com>", "response": "Files to modify:\n\n\n**payments.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**macros.rs**\n  Add:\n    - function: private::test_validate_schema\n    - struct: private::Payment\n    - mod: private::validate_schema_test\n\n**lib.rs**\n  Add:\n    - function: pub::validate_schema\n\n**macros.rs**\n  Add:\n    - function: private::test_validate_schema\n    - struct: private::Payment\n    - mod: private::validate_schema_test\n\n**schema.rs**\n  Add:\n    - function: pub::validate_schema_derive\n    - mod: private::helpers\n\n**helpers.rs**\n  Add:\n    - function: private::parse\n    - function: private::to_tokens\n    - function: private::get_schema_metadata\n    - function: private::get_schema_parameters\n    - function: private::from\n    - struct: pub::SchemaParameters\n    - enum: pub::SchemaParameterVariant\n    - enum: pub::IsSchemaFieldApplicableForValidation\n    - trait: pub::FieldExt\n    - trait: pub::HasSchemaParameters\n    - impl: impl Parse for SchemaParameterVariant\n    - impl: impl ToTokens for SchemaParameterVariant\n    - impl: impl FieldExt for Field\n    - impl: impl HasSchemaParameters for Field\n    - impl: impl From<&syn::Type> for IsSchemaFieldApplicableForValidation\n    - mod: private::keyword"}
