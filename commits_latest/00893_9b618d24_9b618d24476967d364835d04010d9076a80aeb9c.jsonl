{"prompt": "feat(router): Add Smart Routing to route payments efficiently (#2665)\n\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: shashank_attarde <shashank.attarde@juspay.in>\nCo-authored-by: Aprabhat19 <amishaprabhat@gmail.com>\nCo-authored-by: Amisha Prabhat <55580080+Aprabhat19@users.noreply.github.com>", "response": "Files to modify:\n\n\n**admin.rs**\n  Remove:\n    - function: private::from\n    - function: private::from\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutableConnectorChoice\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**routing.rs**\n  Add:\n    - function: pub::get_connector_list\n    - function: private::get_dir_value_for_analysis\n    - function: private::to_string\n    - function: private::eq\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_connector_label\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_kind\n    - function: pub::update_algorithm_id\n    - function: pub::update_conditional_config_id\n    - function: pub::update_surcharge_config_id\n    - struct: pub::RoutingConfigRequest\n    - struct: pub::RoutingRetrieveQuery\n    - struct: pub::RoutingRetrieveLinkQuery\n    - struct: pub::RoutingRetrieveResponse\n    - struct: pub::MerchantRoutingAlgorithm\n    - struct: pub::ConnectorVolumeSplit\n    - struct: pub::RoutableConnectorChoice\n    - struct: pub::DetailedConnectorChoice\n    - struct: pub::RoutingAlgorithmRef\n    - struct: pub::RoutingDictionaryRecord\n    - struct: pub::RoutingDictionary\n    - enum: pub::ConnectorSelection\n    - enum: pub::LinkedRoutingConfigRetrieveResponse\n    - enum: pub::RoutableChoiceKind\n    - enum: pub::RoutableChoiceSerde\n    - enum: pub::RoutingAlgorithmKind\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutingAlgorithmSerde\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - enum: pub::RoutingKind\n    - impl: impl ConnectorSelection\n    - impl: impl EuclidDirFilter for ConnectorSelection\n    - impl: impl EuclidAnalysable for ConnectorSelection\n    - impl: impl ToString for RoutableConnectorChoice\n    - impl: impl PartialEq for RoutableConnectorChoice\n    - impl: impl Eq for RoutableConnectorChoice\n    - impl: impl From<RoutableChoiceSerde> for RoutableConnectorChoice\n    - impl: impl From<RoutableConnectorChoice> for RoutableChoiceSerde\n    - impl: impl From<RoutableConnectorChoice> for ast::ConnectorChoice\n    - impl: impl DetailedConnectorChoice\n    - impl: impl TryFrom<RoutingAlgorithmSerde> for RoutingAlgorithm\n    - impl: impl TryFrom<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithm> for RoutingAlgorithm\n    - impl: impl RoutingAlgorithm\n    - impl: impl RoutingAlgorithmRef\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**static_cache.rs**\n  Add:\n    - function: pub::new\n    - function: pub::present\n    - function: pub::expired\n    - function: pub::retrieve\n    - function: pub::save\n    - function: pub::clear\n    - struct: pub::CacheEntry\n    - struct: pub::StaticCache\n    - enum: pub::CacheError\n    - impl: impl StaticCache<T>\n\n**enums.rs**\n  Add:\n    - enum: pub::RoutingAlgorithmKind\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**query.rs**\n  Add:\n    - mod: pub::routing_algorithm\n\n**routing_algorithm.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_algorithm_id_merchant_id\n    - function: pub::find_by_algorithm_id_profile_id\n    - function: pub::find_metadata_by_algorithm_id_profile_id\n    - function: pub::list_metadata_by_profile_id\n    - function: pub::list_metadata_by_merchant_id\n    - impl: impl RoutingAlgorithm\n\n**routing_algorithm.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_algorithm_id_merchant_id\n    - function: pub::find_by_algorithm_id_profile_id\n    - function: pub::find_metadata_by_algorithm_id_profile_id\n    - function: pub::list_metadata_by_profile_id\n    - function: pub::list_metadata_by_merchant_id\n    - impl: impl RoutingAlgorithm\n\n**schema.rs**\n  Modify existing code\n\n**backends.rs**\n  Add:\n    - function: private::get_program_data\n    - function: private::interpreter_vs_jit_vs_vir_interpreter\n\n**backend.rs**\n  Add:\n    - struct: pub::BackendOutput\n    - trait: pub::EuclidBackend\n    - mod: pub::inputs\n    - mod: pub::interpreter\n    - mod: pub::vir_interpreter\n\n**inputs.rs**\n  Add:\n    - struct: pub::MandateData\n    - struct: pub::PaymentMethodInput\n    - struct: pub::PaymentInput\n    - struct: pub::BackendInput\n\n**interpreter.rs**\n  Add:\n    - function: private::eval_number_comparison_array\n    - function: private::eval_comparison\n    - function: private::eval_if_condition\n    - function: private::eval_if_statement\n    - function: private::eval_rule_statements\n    - function: private::eval_rule\n    - function: private::eval_program\n    - function: private::with_program\n    - function: private::execute\n    - struct: pub::InterpreterBackend\n    - impl: impl InterpreterBackend<O>\n    - impl: impl EuclidBackend<O> for InterpreterBackend<O>\n    - mod: pub::types\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**vir_interpreter.rs**\n  Add:\n    - function: private::eval_comparison\n    - function: private::eval_condition\n    - function: private::eval_statement\n    - function: private::eval_rule\n    - function: private::eval_program\n    - function: private::with_program\n    - function: private::execute\n    - function: private::test_execution\n    - function: private::test_payment_type\n    - function: private::test_mandate_type\n    - function: private::test_mandate_acceptance_type\n    - function: private::test_card_bin\n    - function: private::test_payment_amount\n    - function: private::test_payment_method\n    - function: private::test_future_usage\n    - function: private::test_metadata_execution\n    - function: private::test_less_than_operator\n    - function: private::test_greater_than_operator\n    - struct: pub::VirInterpreterBackend\n    - impl: impl VirInterpreterBackend<O>\n    - impl: impl EuclidBackend<O> for VirInterpreterBackend<O>\n    - mod: pub::types\n    - mod: private::test\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**dssa.rs**\n  Add:\n    - mod: pub::analyzer\n    - mod: pub::graph\n    - mod: pub::state_machine\n    - mod: pub::truth\n    - mod: pub::types\n    - mod: pub::utils\n\n**analyzer.rs**\n  Add:\n    - function: pub::analyze_conflicting_assertions\n    - function: pub::analyze_exhaustive_negations\n    - function: private::analyze_negated_assertions\n    - function: private::perform_condition_analyses\n    - function: private::perform_context_analyses\n    - function: pub::analyze\n    - function: private::test_conflicting_assertion_detection\n    - function: private::test_exhaustive_negation_detection\n    - function: private::test_negated_assertions_detection\n    - function: private::test_negation_graph_analysis\n    - mod: private::tests\n\n**graph.rs**\n  Add:\n    - function: private::from\n    - function: private::get_id\n    - function: private::with_id\n    - function: pub::new\n    - function: private::get_id\n    - function: private::with_id\n    - function: private::get_id\n    - function: private::with_id\n    - function: pub::new\n    - function: private::default\n    - function: private::deref\n    - function: private::deref_mut\n    - function: private::new\n    - function: private::default\n    - function: private::from\n    - function: private::from\n    - function: private::assertion_from_graph_error\n    - function: private::negation_from_graph_error\n    - function: private::get_analysis_trace\n    - function: private::eq\n    - function: pub::from_dir_values\n    - function: private::check_presence\n    - function: pub::insert\n    - function: pub::remove\n    - function: pub::new\n    - function: pub::build\n    - function: pub::make_domain\n    - function: pub::make_value_node\n    - function: pub::make_edge\n    - function: pub::make_all_aggregator\n    - function: pub::make_any_aggregator\n    - function: pub::make_in_aggregator\n    - function: private::ensure_node_exists\n    - function: private::check_node\n    - function: private::key_analysis\n    - function: private::value_analysis\n    - function: pub::check_value_validity\n    - function: pub::key_value_analysis\n    - function: private::assertion_analysis\n    - function: private::negation_analysis\n    - function: pub::perform_context_analysis\n    - function: pub::combine\n    - function: private::test_strong_positive_relation_success\n    - function: private::test_strong_positive_relation_failure\n    - function: private::test_strong_negative_relation_success\n    - function: private::test_strong_negative_relation_failure\n    - function: private::test_normal_one_of_failure\n    - function: private::test_all_aggregator_success\n    - function: private::test_all_aggregator_failure\n    - function: private::test_all_aggregator_mandatory_failure\n    - function: private::test_in_aggregator_success\n    - function: private::test_in_aggregator_failure\n    - function: private::test_not_in_aggregator_success\n    - function: private::test_not_in_aggregator_failure\n    - function: private::test_in_aggregator_failure_trace\n    - function: private::_test_memoization_in_kgraph\n    - struct: pub::NodeId\n    - struct: pub::DomainInfo\n    - struct: pub::DomainIdentifier\n    - struct: pub::DomainId\n    - struct: pub::EdgeId\n    - struct: pub::Memoization\n    - struct: pub::Edge\n    - struct: pub::Node\n    - struct: pub::KnowledgeGraph\n    - struct: pub::KnowledgeGraphBuilder\n    - struct: pub::AnalysisContext\n    - enum: pub::Strength\n    - enum: pub::Relation\n    - enum: pub::NodeType\n    - enum: pub::NodeValue\n    - enum: pub::ValueTracePredecessor\n    - enum: pub::AnalysisTrace\n    - enum: pub::AnalysisError\n    - enum: pub::GraphError\n    - trait: pub::KgraphMetadata\n    - impl: impl From<Relation> for bool\n    - impl: impl utils::EntityId for NodeId\n    - impl: impl DomainIdentifier<'a>\n    - impl: impl utils::EntityId for DomainId\n    - impl: impl utils::EntityId for EdgeId\n    - impl: impl Memoization\n    - impl: impl Default for Memoization\n    - impl: impl Deref for Memoization\n    - impl: impl DerefMut for Memoization\n    - impl: impl Node\n    - impl: impl KgraphMetadata for M\n    - impl: impl Default for KnowledgeGraphBuilder<'a>\n    - impl: impl From<dir::DirValue> for NodeValue\n    - impl: impl From<dir::DirKey> for NodeValue\n    - impl: impl AnalysisError\n    - impl: impl GraphError\n    - impl: impl PartialEq<dir::DirValue> for NodeValue\n    - impl: impl AnalysisContext\n    - impl: impl KnowledgeGraphBuilder<'a>\n    - impl: impl KnowledgeGraph<'a>\n    - mod: private::test\n\n**state_machine.rs**\n  Add:\n    - function: private::is_finished\n    - function: private::advance\n    - function: private::reset\n    - function: private::put\n    - function: private::push\n    - function: private::new\n    - function: private::init\n    - function: private::destroy\n    - function: private::is_finished\n    - function: private::get_next_ctx_idx\n    - function: private::advance\n    - function: private::new\n    - function: private::init\n    - function: private::is_finished\n    - function: private::is_condition_machine_finished\n    - function: private::destroy\n    - function: private::advance_condition_machine\n    - function: private::advance\n    - function: private::new\n    - function: private::is_finished\n    - function: private::init_next\n    - function: private::advance\n    - function: pub::new\n    - function: pub::advance\n    - function: pub::advance_mut\n    - function: pub::new\n    - function: pub::is_finished\n    - function: pub::init\n    - function: pub::advance\n    - function: pub::new\n    - function: pub::advance\n    - function: pub::make_connector_selection_data\n    - function: private::test_correct_contexts\n    - struct: private::ComparisonStateMachine\n    - struct: private::ConditionStateMachine\n    - struct: private::IfStmtStateMachine\n    - struct: private::RuleStateMachine\n    - struct: pub::RuleContextManager\n    - struct: pub::ProgramStateMachine\n    - struct: pub::AnalysisContextManager\n    - enum: pub::StateMachineError\n    - impl: impl ComparisonStateMachine<'a>\n    - impl: impl ConditionStateMachine<'a>\n    - impl: impl IfStmtStateMachine<'a>\n    - impl: impl RuleStateMachine<'a>\n    - impl: impl RuleContextManager<'a>\n    - impl: impl ProgramStateMachine<'a>\n    - impl: impl AnalysisContextManager<'a>\n    - mod: private::tests\n\n**truth.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**utils.rs**\n  Add:\n    - struct: pub::Unpacker\n\n**enums.rs**\n  Add:\n    - enum: pub::RoutingAlgorithmKind\n\n**frontend.rs**\n  Add:\n    - mod: pub::ast\n    - mod: pub::dir\n    - mod: pub::vir\n\n**ast.rs**\n  Add:\n    - function: pub::get_type\n    - struct: pub::ConnectorChoice\n    - struct: pub::MetadataValue\n    - struct: pub::NumberComparison\n    - struct: pub::Comparison\n    - struct: pub::IfStatement\n    - struct: pub::Rule\n    - struct: pub::Program\n    - enum: pub::ValueType\n    - enum: pub::ComparisonType\n    - impl: impl ValueType\n    - mod: pub::lowering\n    - mod: pub::parser\n\n**lowering.rs**\n  Add:\n    - function: private::lower_comparison_inner\n    - function: private::lower_comparison\n    - function: private::lower_if_statement\n    - function: pub::lower_rule\n    - function: pub::lower_program\n\n**parser.rs**\n  Add:\n    - function: private::parse_output\n    - function: pub::skip_ws\n    - function: pub::num_i64\n    - function: pub::string_str\n    - function: pub::identifier\n    - function: pub::percentage\n    - function: pub::number_value\n    - function: pub::str_value\n    - function: pub::enum_value_string\n    - function: pub::enum_variant_value\n    - function: pub::number_array_value\n    - function: pub::enum_variant_array_value\n    - function: pub::number_comparison\n    - function: pub::number_comparison_array_value\n    - function: pub::value_type\n    - function: pub::comparison_type\n    - function: pub::comparison\n    - function: pub::arbitrary_comparison\n    - function: pub::comparison_array\n    - function: pub::if_statement\n    - function: pub::rule_conditions_array\n    - function: pub::rule\n    - function: pub::output\n    - function: pub::default_output\n    - function: pub::program\n    - enum: pub::EuclidError\n    - trait: pub::EuclidParsable\n    - impl: impl EuclidParsable for DummyOutput\n\n**dir.rs**\n  Add:\n    - function: pub::new\n    - function: private::get_allowed_keys\n    - function: private::is_key_allowed\n    - function: pub::get_type\n    - function: pub::get_value_set\n    - function: pub::get_key\n    - function: pub::get_metadata_val\n    - function: pub::get_str_val\n    - function: pub::get_num_value\n    - function: pub::check_equality\n    - function: private::test_consistent_dir_key_naming\n    - function: private::test_allowed_dir_keys\n    - function: private::test_not_allowed_dir_keys\n    - struct: pub::DirKey\n    - struct: pub::DirComparison\n    - struct: pub::DirIfStatement\n    - struct: pub::DirRule\n    - struct: pub::DirProgram\n    - enum: pub::DirKeyKind\n    - enum: pub::DirValue\n    - enum: pub::DirComparisonLogic\n    - trait: pub::EuclidDirFilter\n    - impl: impl DirKey\n    - impl: impl DirKeyKind\n    - impl: impl DirValue\n    - mod: pub::enums\n    - mod: pub::lowering\n    - mod: pub::transformers\n    - mod: private::test\n\n**enums.rs**\n  Add:\n    - enum: pub::RoutingAlgorithmKind\n\n**lowering.rs**\n  Add:\n    - function: private::lower_comparison_inner\n    - function: private::lower_comparison\n    - function: private::lower_if_statement\n    - function: pub::lower_rule\n    - function: pub::lower_program\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**vir.rs**\n  Add:\n    - struct: pub::ValuedComparison\n    - struct: pub::ValuedIfStatement\n    - struct: pub::ValuedRule\n    - struct: pub::ValuedProgram\n    - enum: pub::ValuedComparisonLogic\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**utils.rs**\n  Add:\n    - struct: pub::Unpacker\n\n**dense_map.rs**\n  Add:\n    - function: pub::new\n    - function: private::default\n    - function: pub::push\n    - function: pub::get\n    - function: pub::get_mut\n    - function: pub::contains_key\n    - function: pub::keys\n    - function: pub::into_keys\n    - function: pub::values\n    - function: pub::values_mut\n    - function: pub::into_values\n    - function: pub::iter\n    - function: pub::iter_mut\n    - function: private::fmt\n    - function: private::new\n    - function: private::next\n    - function: private::new\n    - function: private::next\n    - function: private::new\n    - function: private::next\n    - function: private::new\n    - function: private::next\n    - function: private::into_iter\n    - function: private::from_iter\n    - struct: pub::DenseMap\n    - struct: pub::Keys\n    - struct: pub::Iter\n    - struct: pub::IterMut\n    - struct: pub::IntoIter\n    - trait: pub::EntityId\n    - impl: impl DenseMap<K, V>\n    - impl: impl Default for DenseMap<K, V>\n    - impl: impl DenseMap<K, V>\n    - impl: impl fmt::Debug for DenseMap<K, V>\n    - impl: impl Keys<K>\n    - impl: impl Iterator for Keys<K>\n    - impl: impl Iter<'a, K, V>\n    - impl: impl Iterator for Iter<'a, K, V>\n    - impl: impl IterMut<'a, K, V>\n    - impl: impl Iterator for IterMut<'a, K, V>\n    - impl: impl IntoIter<K, V>\n    - impl: impl Iterator for IntoIter<K, V>\n    - impl: impl IntoIterator for DenseMap<K, V>\n    - impl: impl FromIterator<V> for DenseMap<K, V>\n\n**inner.rs**\n  Add:\n    - mod: private::enum_nums\n    - mod: private::knowledge\n\n**enum_nums.rs**\n  Add:\n    - function: private::error\n    - function: pub::enum_nums_inner\n\n**knowledge.rs**\n  Add:\n    - function: private::to_string\n    - function: private::parse\n    - function: private::to_string\n    - function: private::parse\n    - function: private::to_string\n    - function: private::parse\n    - function: private::parse\n    - function: private::parse_atom_type_inner\n    - function: private::parse\n    - function: private::parse_rhs_atom\n    - function: private::parse\n    - function: private::parse\n    - function: private::to_string\n    - function: private::parse\n    - function: private::new\n    - function: private::register_node\n    - function: private::register_edge\n    - function: private::register_rule\n    - function: private::cycle_dfs\n    - function: private::detect_graph_cycles\n    - function: private::next_node_ident\n    - function: private::compile_atom\n    - function: private::compile_atom_type\n    - function: private::compile_rule\n    - function: private::compile\n    - function: pub::knowledge_inner\n    - struct: private::Atom\n    - struct: private::Rule\n    - struct: private::Program\n    - struct: private::GenContext\n    - enum: private::Comparison\n    - enum: private::ValueType\n    - enum: private::Strength\n    - enum: private::Relation\n    - enum: private::AtomType\n    - enum: private::Scope\n    - impl: impl ToString for Comparison\n    - impl: impl Parse for Comparison\n    - impl: impl ValueType\n    - impl: impl Parse for ValueType\n    - impl: impl ToString for Atom\n    - impl: impl Parse for Atom\n    - impl: impl Parse for Strength\n    - impl: impl Parse for AtomType\n    - impl: impl Parse for Rule\n    - impl: impl Parse for Scope\n    - impl: impl ToString for Scope\n    - impl: impl Parse for Program\n    - impl: impl GenContext\n    - mod: private::strength\n    - mod: private::kw\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**utils.rs**\n  Add:\n    - struct: pub::Unpacker\n\n**evaluation.rs**\n  Add:\n    - function: private::build_test_data\n    - function: private::evaluation\n\n**error.rs**\n  Add:\n    - enum: pub::KgraphError\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**mca.rs**\n  Add:\n    - function: private::compile_request_pm_types\n    - function: private::compile_payment_method_enabled\n    - function: private::compile_merchant_connector_graph\n    - function: pub::make_mca_graph\n    - function: private::build_test_data\n    - function: private::test_credit_card_success_case\n    - function: private::test_debit_card_success_case\n    - function: private::test_single_mismatch_failure_case\n    - function: private::test_amount_mismatch_failure_case\n    - function: private::test_incomplete_data_failure_case\n    - function: private::test_incomplete_data_failure_case2\n    - function: private::test_sandbox_applepay_bug_usecase\n    - mod: private::tests\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**payment_intents.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**setup_intents.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context\n\n**consts.rs**\n  Modify existing code\n\n**core.rs**\n  Add:\n    - mod: pub::routing\n\n**admin.rs**\n  Remove:\n    - function: private::from\n    - function: private::from\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutableConnectorChoice\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n\n**errors.rs**\n  Add:\n    - enum: pub::RoutingError\n\n**cards.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - function: pub::get_connector_data\n    - function: pub::connector_selection\n    - function: pub::should_add_task_to_process_tracker\n    - mod: pub::routing\n\n**routing.rs**\n  Add:\n    - function: pub::get_connector_list\n    - function: private::get_dir_value_for_analysis\n    - function: private::to_string\n    - function: private::eq\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_connector_label\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_kind\n    - function: pub::update_algorithm_id\n    - function: pub::update_conditional_config_id\n    - function: pub::update_surcharge_config_id\n    - struct: pub::RoutingConfigRequest\n    - struct: pub::RoutingRetrieveQuery\n    - struct: pub::RoutingRetrieveLinkQuery\n    - struct: pub::RoutingRetrieveResponse\n    - struct: pub::MerchantRoutingAlgorithm\n    - struct: pub::ConnectorVolumeSplit\n    - struct: pub::RoutableConnectorChoice\n    - struct: pub::DetailedConnectorChoice\n    - struct: pub::RoutingAlgorithmRef\n    - struct: pub::RoutingDictionaryRecord\n    - struct: pub::RoutingDictionary\n    - enum: pub::ConnectorSelection\n    - enum: pub::LinkedRoutingConfigRetrieveResponse\n    - enum: pub::RoutableChoiceKind\n    - enum: pub::RoutableChoiceSerde\n    - enum: pub::RoutingAlgorithmKind\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutingAlgorithmSerde\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - enum: pub::RoutingKind\n    - impl: impl ConnectorSelection\n    - impl: impl EuclidDirFilter for ConnectorSelection\n    - impl: impl EuclidAnalysable for ConnectorSelection\n    - impl: impl ToString for RoutableConnectorChoice\n    - impl: impl PartialEq for RoutableConnectorChoice\n    - impl: impl Eq for RoutableConnectorChoice\n    - impl: impl From<RoutableChoiceSerde> for RoutableConnectorChoice\n    - impl: impl From<RoutableConnectorChoice> for RoutableChoiceSerde\n    - impl: impl From<RoutableConnectorChoice> for ast::ConnectorChoice\n    - impl: impl DetailedConnectorChoice\n    - impl: impl TryFrom<RoutingAlgorithmSerde> for RoutingAlgorithm\n    - impl: impl TryFrom<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithm> for RoutingAlgorithm\n    - impl: impl RoutingAlgorithm\n    - impl: impl RoutingAlgorithmRef\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**routing.rs**\n  Add:\n    - function: pub::get_connector_list\n    - function: private::get_dir_value_for_analysis\n    - function: private::to_string\n    - function: private::eq\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_connector_label\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_kind\n    - function: pub::update_algorithm_id\n    - function: pub::update_conditional_config_id\n    - function: pub::update_surcharge_config_id\n    - struct: pub::RoutingConfigRequest\n    - struct: pub::RoutingRetrieveQuery\n    - struct: pub::RoutingRetrieveLinkQuery\n    - struct: pub::RoutingRetrieveResponse\n    - struct: pub::MerchantRoutingAlgorithm\n    - struct: pub::ConnectorVolumeSplit\n    - struct: pub::RoutableConnectorChoice\n    - struct: pub::DetailedConnectorChoice\n    - struct: pub::RoutingAlgorithmRef\n    - struct: pub::RoutingDictionaryRecord\n    - struct: pub::RoutingDictionary\n    - enum: pub::ConnectorSelection\n    - enum: pub::LinkedRoutingConfigRetrieveResponse\n    - enum: pub::RoutableChoiceKind\n    - enum: pub::RoutableChoiceSerde\n    - enum: pub::RoutingAlgorithmKind\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutingAlgorithmSerde\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - enum: pub::RoutingKind\n    - impl: impl ConnectorSelection\n    - impl: impl EuclidDirFilter for ConnectorSelection\n    - impl: impl EuclidAnalysable for ConnectorSelection\n    - impl: impl ToString for RoutableConnectorChoice\n    - impl: impl PartialEq for RoutableConnectorChoice\n    - impl: impl Eq for RoutableConnectorChoice\n    - impl: impl From<RoutableChoiceSerde> for RoutableConnectorChoice\n    - impl: impl From<RoutableConnectorChoice> for RoutableChoiceSerde\n    - impl: impl From<RoutableConnectorChoice> for ast::ConnectorChoice\n    - impl: impl DetailedConnectorChoice\n    - impl: impl TryFrom<RoutingAlgorithmSerde> for RoutingAlgorithm\n    - impl: impl TryFrom<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithm> for RoutingAlgorithm\n    - impl: impl RoutingAlgorithm\n    - impl: impl RoutingAlgorithmRef\n\n**helpers.rs**\n  Add:\n    - function: pub::get_merchant_routing_dictionary\n    - function: pub::get_merchant_default_config\n    - function: pub::update_merchant_default_config\n    - function: pub::update_merchant_routing_dictionary\n    - function: pub::update_routing_algorithm\n    - function: pub::update_merchant_active_algorithm_ref\n    - function: pub::update_business_profile_active_algorithm_ref\n    - function: pub::get_merchant_connector_agnostic_mandate_config\n    - function: pub::update_merchant_connector_agnostic_mandate_config\n    - function: pub::validate_connectors_in_routing_config\n    - function: pub::get_routing_dictionary_key\n    - function: pub::get_pg_agnostic_mandate_config_key\n    - function: pub::get_default_config_key\n    - function: pub::get_payment_config_routing_id\n    - function: pub::get_payment_method_surcharge_routing_id\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**webhooks.rs**\n  Modify existing code\n\n**db.rs**\n  Add:\n    - mod: pub::routing_algorithm\n\n**routing_algorithm.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_algorithm_id_merchant_id\n    - function: pub::find_by_algorithm_id_profile_id\n    - function: pub::find_metadata_by_algorithm_id_profile_id\n    - function: pub::list_metadata_by_profile_id\n    - function: pub::list_metadata_by_merchant_id\n    - impl: impl RoutingAlgorithm\n\n**lib.rs**\n  Add:\n    - mod: pub::routing\n\n**routes.rs**\n  Add:\n    - mod: pub::routing\n\n**app.rs**\n  Add:\n    - function: pub::server\n    - struct: pub::Routing\n    - impl: impl Routing\n\n**lock_utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - function: pub::get_connector_data\n    - function: pub::connector_selection\n    - function: pub::should_add_task_to_process_tracker\n    - mod: pub::routing\n\n**routing.rs**\n  Add:\n    - function: pub::get_connector_list\n    - function: private::get_dir_value_for_analysis\n    - function: private::to_string\n    - function: private::eq\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_connector_label\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_kind\n    - function: pub::update_algorithm_id\n    - function: pub::update_conditional_config_id\n    - function: pub::update_surcharge_config_id\n    - struct: pub::RoutingConfigRequest\n    - struct: pub::RoutingRetrieveQuery\n    - struct: pub::RoutingRetrieveLinkQuery\n    - struct: pub::RoutingRetrieveResponse\n    - struct: pub::MerchantRoutingAlgorithm\n    - struct: pub::ConnectorVolumeSplit\n    - struct: pub::RoutableConnectorChoice\n    - struct: pub::DetailedConnectorChoice\n    - struct: pub::RoutingAlgorithmRef\n    - struct: pub::RoutingDictionaryRecord\n    - struct: pub::RoutingDictionary\n    - enum: pub::ConnectorSelection\n    - enum: pub::LinkedRoutingConfigRetrieveResponse\n    - enum: pub::RoutableChoiceKind\n    - enum: pub::RoutableChoiceSerde\n    - enum: pub::RoutingAlgorithmKind\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutingAlgorithmSerde\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - enum: pub::RoutingKind\n    - impl: impl ConnectorSelection\n    - impl: impl EuclidDirFilter for ConnectorSelection\n    - impl: impl EuclidAnalysable for ConnectorSelection\n    - impl: impl ToString for RoutableConnectorChoice\n    - impl: impl PartialEq for RoutableConnectorChoice\n    - impl: impl Eq for RoutableConnectorChoice\n    - impl: impl From<RoutableChoiceSerde> for RoutableConnectorChoice\n    - impl: impl From<RoutableConnectorChoice> for RoutableChoiceSerde\n    - impl: impl From<RoutableConnectorChoice> for ast::ConnectorChoice\n    - impl: impl DetailedConnectorChoice\n    - impl: impl TryFrom<RoutingAlgorithmSerde> for RoutingAlgorithm\n    - impl: impl TryFrom<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithm> for RoutingAlgorithm\n    - impl: impl RoutingAlgorithm\n    - impl: impl RoutingAlgorithmRef\n\n**api.rs**\n  Remove:\n    - function: pub::is_single\n    - enum: pub::ConnectorCallType\n    - impl: impl ConnectorCallType\n  Add:\n    - enum: pub::ConnectorCallType\n    - mod: pub::routing\n\n**admin.rs**\n  Remove:\n    - function: private::from\n    - function: private::from\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutableConnectorChoice\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n\n**routing.rs**\n  Add:\n    - function: pub::get_connector_list\n    - function: private::get_dir_value_for_analysis\n    - function: private::to_string\n    - function: private::eq\n    - function: private::from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_connector_label\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::get_kind\n    - function: pub::update_algorithm_id\n    - function: pub::update_conditional_config_id\n    - function: pub::update_surcharge_config_id\n    - struct: pub::RoutingConfigRequest\n    - struct: pub::RoutingRetrieveQuery\n    - struct: pub::RoutingRetrieveLinkQuery\n    - struct: pub::RoutingRetrieveResponse\n    - struct: pub::MerchantRoutingAlgorithm\n    - struct: pub::ConnectorVolumeSplit\n    - struct: pub::RoutableConnectorChoice\n    - struct: pub::DetailedConnectorChoice\n    - struct: pub::RoutingAlgorithmRef\n    - struct: pub::RoutingDictionaryRecord\n    - struct: pub::RoutingDictionary\n    - enum: pub::ConnectorSelection\n    - enum: pub::LinkedRoutingConfigRetrieveResponse\n    - enum: pub::RoutableChoiceKind\n    - enum: pub::RoutableChoiceSerde\n    - enum: pub::RoutingAlgorithmKind\n    - enum: pub::RoutingAlgorithm\n    - enum: pub::RoutingAlgorithmSerde\n    - enum: pub::StraightThroughAlgorithm\n    - enum: pub::StraightThroughAlgorithmInner\n    - enum: pub::StraightThroughAlgorithmSerde\n    - enum: pub::RoutingKind\n    - impl: impl ConnectorSelection\n    - impl: impl EuclidDirFilter for ConnectorSelection\n    - impl: impl EuclidAnalysable for ConnectorSelection\n    - impl: impl ToString for RoutableConnectorChoice\n    - impl: impl PartialEq for RoutableConnectorChoice\n    - impl: impl Eq for RoutableConnectorChoice\n    - impl: impl From<RoutableChoiceSerde> for RoutableConnectorChoice\n    - impl: impl From<RoutableConnectorChoice> for RoutableChoiceSerde\n    - impl: impl From<RoutableConnectorChoice> for ast::ConnectorChoice\n    - impl: impl DetailedConnectorChoice\n    - impl: impl TryFrom<RoutingAlgorithmSerde> for RoutingAlgorithm\n    - impl: impl TryFrom<StraightThroughAlgorithmSerde> for StraightThroughAlgorithm\n    - impl: impl From<StraightThroughAlgorithm> for StraightThroughAlgorithmSerde\n    - impl: impl From<StraightThroughAlgorithm> for RoutingAlgorithm\n    - impl: impl RoutingAlgorithm\n    - impl: impl RoutingAlgorithmRef\n\n**storage.rs**\n  Add:\n    - function: private::from\n    - function: private::from\n    - struct: pub::PaymentRoutingInfo\n    - struct: pub::PaymentRoutingInfoInner\n    - enum: pub::PaymentRoutingInfoSerde\n    - impl: impl From<PaymentRoutingInfoSerde> for PaymentRoutingInfo\n    - impl: impl From<PaymentRoutingInfo> for PaymentRoutingInfoSerde\n    - mod: pub::routing_algorithm\n\n**routing_algorithm.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_algorithm_id_merchant_id\n    - function: pub::find_by_algorithm_id_profile_id\n    - function: pub::find_metadata_by_algorithm_id_profile_id\n    - function: pub::list_metadata_by_profile_id\n    - function: pub::list_metadata_by_merchant_id\n    - impl: impl RoutingAlgorithm\n\n**transformers.rs**\n  Add:\n    - function: private::into_dir_value\n    - trait: pub::IntoDirValue\n    - impl: impl IntoDirValue for (global_enums::PaymentMethodType, global_enums::PaymentMethod)\n\n**payment_sync.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - function: pub::get_connector_data\n    - function: pub::connector_selection\n    - function: pub::should_add_task_to_process_tracker\n    - mod: pub::routing\n\n**payments2.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: private::fmt\n    - function: private::deref\n    - function: private::from\n    - struct: pub::InterpreterError\n    - struct: pub::Context\n    - enum: pub::InterpreterErrorType\n    - impl: impl fmt::Display for InterpreterError\n    - impl: impl Deref for Context\n    - impl: impl From<inputs::BackendInput> for Context"}
