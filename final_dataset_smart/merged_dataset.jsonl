{"prompt": "<!-- Describe your changes in detail -->\r\n- Payout is done via Decrypted Token data of Apple pay.\r\n- The decrypted data is directly collected in the request to initiate payout.\r\n- Integration is done via Worldpay for the following flow\r\n\r\nNote: this is a hotfix raised against https://github.com/juspay/hyperswitch/pull/9857", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n   - `crates/api_models/src/payouts.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/vault.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 10 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/transformers.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/payout_method_utils.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/openapi/src/openapi.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (13 changes)\n- Implement new functions (27 changes)\n- Extend existing types with new fields (107 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9875, "pr_title": "feat(payouts): apple pay decrypt payout", "merged_at": "2025-10-16T08:47:47Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs", "crates/api_models/src/payouts.rs"], "core_business": ["crates/router/src/core/payment_methods/vault.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs", "crates/hyperswitch_connectors/src/connectors/paypal/transformers.rs", "crates/hyperswitch_connectors/src/connectors/worldpay.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_requests.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_response.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs"], "types": ["crates/router/src/types/transformers.rs"], "utils": ["crates/common_utils/src/payout_method_utils.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"structs_added": 13, "functions_added": 27, "enums_added": 3, "fields_added": 107, "imports_added": 17, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Payout is done via Decrypted Token data of Apple pay.\r\n- The decrypted data is directly collected in the request to initiate payout.\r\n- Integration is done via Worldpay for the following flow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n   - `crates/api_models/src/payouts.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/vault.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 10 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/transformers.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/payout_method_utils.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/openapi/src/openapi.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (13 changes)\n- Implement new functions (27 changes)\n- Extend existing types with new fields (107 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e7dee751:\nFiles to modify:\n\n\n**enums.rs**\n  Modify existing code\n\n**payouts.rs**\n  Add:\n    - struct: pub::ApplePayDecrypt\n\n**connector_enums.rs**\n  Modify existing code\n\n**payout_method_utils.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**worldpay.rs**\n  Add:\n    - function: private::get_url\n    - function: private::get_headers\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_5xx_error_response\n    - impl: impl api::Payouts for Worldpay\n    - impl: impl api::PayoutFulfill for Worldpay\n    - impl: impl ConnectorIntegration<PoFulfill, PayoutsData, PayoutsResponseData> for Worldpay\n    - mod: private::payout_requests\n    - mod: private::payout_response\n    - mod: pub::payout_transformers\n\n**payout_requests.rs**\n  Add:\n    - struct: pub::WorldpayPayoutRequest\n    - struct: pub::PayoutInstruction\n    - struct: pub::PayoutValue\n    - struct: pub::Merchant\n    - struct: pub::InstructionNarrative\n    - struct: pub::ApplePayDecrypt\n    - struct: pub::PayoutExpiryDate\n    - enum: pub::PayoutInstrument\n    - enum: pub::PayoutType\n\n**payout_response.rs**\n  Add:\n    - struct: pub::WorldpayPayoutResponse\n    - enum: pub::PayoutOutcome\n\n**payout_transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - struct: pub::WorldpayPayoutRouterData\n    - struct: pub::WorldpayPayoutAuthType\n    - struct: pub::WorldpayPayoutConnectorMetadataObject\n    - impl: impl TryFrom<(&api::CurrencyUnit, enums::Currency, MinorUnit, T)> for WorldpayPayoutRouterData<T>\n    - impl: impl TryFrom<&ConnectorAuthType> for WorldpayPayoutAuthType\n    - impl: impl TryFrom<Option<&pii::SecretSerdeValue>> for WorldpayPayoutConnectorMetadataObject\n    - impl: impl TryFrom<(\n&WorldpayPayoutRouterData<&types::PayoutsRouterData<F>>,\n&Secret<String>,\n)> for WorldpayPayoutRequest\n    - impl: impl TryFrom<api_models::payouts::PayoutMethodData> for PayoutInstrument\n    - impl: impl From<PayoutOutcome> for enums::PayoutStatus\n    - impl: impl TryFrom<PayoutsResponseRouterData<PoFulfill, WorldpayPayoutResponse>> for types::PayoutsRouterData<PoFulfill>\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_card_expiry_year_2_digit\n    - function: private::get_card_expiry_month_2_digit\n    - function: private::get_card_issuer\n    - function: private::get_card_expiry_month_year_2_digit_with_delimiter\n    - function: private::get_expiry_date_as_yyyymm\n    - function: private::get_expiry_date_as_mmyyyy\n    - function: private::get_expiry_year_4_digit\n    - function: private::get_expiry_date_as_yymm\n    - function: private::get_expiry_date_as_mmyy\n    - function: private::get_expiry_month_as_i8\n    - function: private::get_expiry_year_as_i32\n    - function: private::get_expiry_year_as_4_digit_i32\n    - function: private::get_cardholder_name\n    - impl: impl CardData for api_models::payouts::ApplePayDecrypt\n\n**openapi.rs**\n  Modify existing code\n\n**openapi_v2.rs**\n  Modify existing code\n\n**vault.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9857, "pr_title": "feat(payouts): apple pay decrypt payout", "merged_at": "2025-10-16T08:06:22Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs", "crates/api_models/src/payouts.rs"], "core_business": ["crates/router/src/core/payment_methods/vault.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs", "crates/hyperswitch_connectors/src/connectors/paypal/transformers.rs", "crates/hyperswitch_connectors/src/connectors/worldpay.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_requests.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_response.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/payout_transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs"], "types": ["crates/router/src/types/transformers.rs"], "utils": ["crates/common_utils/src/payout_method_utils.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"structs_added": 13, "functions_added": 27, "enums_added": 3, "fields_added": 107, "imports_added": 17, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR involves adding WASM changes for Google Pay for Finix Connector.\r\n\r\nPreviously `Merchant Identity ID` was being retrieved from the metadata in MCA call. This field is now moved to Authentication field `MultiAuthKey`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e641ea29:\nFiles to modify:\n\n\n**transformers.rs**\n  Remove:\n    - function: private::try_from\n    - impl: impl TryFrom<&Option<common_utils::pii::SecretSerdeValue>> for FinixMeta\n\n**request.rs**\n  Remove:\n    - struct: pub::FinixMeta\n\n**connector_validation.rs**\n  Modify existing code", "metadata": {"pr_number": 9845, "pr_title": "fix(connector): Add WASM Changes for Finix Google Pay", "merged_at": "2025-10-15T16:19:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/finix/transformers.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers/request.rs", "crates/router/tests/connectors/sample_auth.toml"]}, "change_types": {"fields_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nMoving db interfaces in router crate to hyperswitch_domain_models and its implementation is added in storage_impl\r\n\r\n**Refactored Interfaces**\r\n1. MerchantAccount\r\n2. MerchantConnectorAccount\r\n3. MerchantKeyStore\r\n4. BusinessProfile\r\n5. Configs\r\n\r\n\r\nAlso, moving the execute_connector_processing step and call_connector_api methods to a common place so that any module outside the router can use them.\r\nApiClient interfaces related to the above methods are also moved to the common place.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n   - `crates/hyperswitch_domain_models/src/configs.rs`\n   - `crates/hyperswitch_domain_models/src/customer.rs`\n   - ... and 4 more files\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/customers.rs`\n   - `crates/router/src/core/payments/flows/psync_flow.rs`\n   - `crates/router/src/core/payments/helpers.rs`\n   - ... and 2 more files\n\n**3. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n   - `crates/hyperswitch_interfaces/src/unified_connector_service.rs`\n   - `crates/hyperswitch_interfaces/src/unified_connector_service/transformers.rs`\n   - ... and 2 more files\n\n**4. Type Definitions**\n   - `crates/common_utils/src/types.rs`\n\n**5. Utils**\n   - `crates/hyperswitch_interfaces/src/helpers.rs`\n   - `crates/storage_impl/src/utils.rs`\n\n**6. Configuration Files**\n   - `crates/hyperswitch_interfaces/Cargo.toml`\n   - `crates/hyperswitch_interfaces/src/configs.rs`\n   - `crates/router/Cargo.toml`\n   - ... and 6 more files\n\n**7. Other**\n   - `Cargo.lock`\n   - `crates/analytics/src/lib.rs`\n   - `crates/hyperswitch_interfaces/src/api_client.rs`\n   - ... and 23 more files\n\n**Code Patterns Applied:**\n- Define new data structures (6 changes)\n- Implement new functions (254 changes)\n- Extend existing types with new fields (693 changes)\n- Add conditional logic for feature flags or filtering (9 changes)\n- Modify database queries (18 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 59628332:\nFiles to modify:\n\n\n**lib.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - trait: pub::TenantConfig\n\n**unified_connector_service.rs**\n  Remove:\n    - enum: pub::UnifiedConnectorServiceError\n\n**business_profile.rs**\n  Add:\n    - trait: pub::ProfileInterface\n\n**configs.rs**\n  Add:\n    - trait: pub::ConfigInterface\n\n**customer.rs**\n  Add:\n    - function: pub::update_connector_customer_in_customers\n    - function: pub::update_connector_customer_in_customers\n\n**lib.rs**\n  Modify existing code\n\n**merchant_account.rs**\n  Add:\n    - trait: pub::MerchantAccountInterface\n\n**merchant_connector_account.rs**\n  Add:\n    - trait: pub::MerchantConnectorAccountInterface\n\n**merchant_key_store.rs**\n  Add:\n    - trait: pub::MerchantKeyStoreInterface\n\n**api_client.rs**\n  Add:\n    - function: pub::execute_connector_processing_step\n    - function: pub::handle_ucs_response\n    - function: pub::call_connector_api\n    - function: pub::handle_response\n    - function: pub::store_raw_connector_response_if_required\n    - function: pub::get_flow_name\n    - trait: pub::ConnectorConverter\n    - trait: pub::RequestBuilder\n    - trait: pub::ApiClient\n    - trait: pub::ApiClientWrapper\n\n**configs.rs**\n  Add:\n    - trait: pub::ConfigInterface\n\n**consts.rs**\n  Modify existing code\n\n**events.rs**\n  Add:\n    - trait: pub::EventHandlerInterface\n\n**helpers.rs**\n  Add:\n    - trait: pub::ForeignTryFrom\n\n**lib.rs**\n  Modify existing code\n\n**metrics.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Remove:\n    - enum: pub::UnifiedConnectorServiceError\n\n**transformers.rs**\n  Add:\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: pub::convert_connector_service_status_code\n    - struct: pub::WebhookTransformData\n    - enum: pub::UnifiedConnectorServiceError\n    - impl: impl ForeignTryFrom<payments_grpc::PaymentServiceGetResponse> for Result<(PaymentsResponseData, AttemptStatus), ErrorResponse>\n    - impl: impl ForeignTryFrom<payments_grpc::PaymentStatus> for AttemptStatus\n\n**defaults.rs**\n  Remove:\n    - function: private::default\n    - impl: impl Default for super::settings::GlobalTenant\n\n**settings.rs**\n  Remove:\n    - function: private::get_tenant_id\n    - function: private::get_accounts_schema\n    - function: private::get_schema\n    - function: private::get_redis_key_prefix\n    - function: private::get_clickhouse_database\n    - function: private::get_tenant_id\n    - function: private::get_accounts_schema\n    - function: private::get_schema\n    - function: private::get_redis_key_prefix\n    - function: private::get_clickhouse_database\n    - struct: pub::Tenant\n    - struct: pub::TenantUserConfig\n    - struct: pub::GlobalTenant\n    - struct: pub::InternalMerchantIdProfileIdAuthSettings\n    - struct: pub::InternalServicesConfig\n    - impl: impl storage_impl::config::TenantConfig for Tenant\n    - impl: impl storage_impl::config::TenantConfig for GlobalTenant\n\n**customers.rs**\n  Remove:\n    - function: pub::update_connector_customer_in_customers\n    - function: pub::update_connector_customer_in_customers\n\n**psync_flow.rs**\n  Modify existing code\n\n**helpers.rs**\n  Add:\n    - trait: pub::ForeignTryFrom\n\n**unified_connector_service.rs**\n  Remove:\n    - enum: pub::UnifiedConnectorServiceError\n\n**transformers.rs**\n  Add:\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: pub::convert_connector_service_status_code\n    - struct: pub::WebhookTransformData\n    - enum: pub::UnifiedConnectorServiceError\n    - impl: impl ForeignTryFrom<payments_grpc::PaymentServiceGetResponse> for Result<(PaymentsResponseData, AttemptStatus), ErrorResponse>\n    - impl: impl ForeignTryFrom<payments_grpc::PaymentStatus> for AttemptStatus\n\n**db.rs**\n  Modify existing code\n\n**business_profile.rs**\n  Add:\n    - trait: pub::ProfileInterface\n\n**configs.rs**\n  Add:\n    - trait: pub::ConfigInterface\n\n**events.rs**\n  Add:\n    - trait: pub::EventHandlerInterface\n\n**kafka_store.rs**\n  Modify existing code\n\n**merchant_account.rs**\n  Add:\n    - trait: pub::MerchantAccountInterface\n\n**merchant_connector_account.rs**\n  Add:\n    - trait: pub::MerchantConnectorAccountInterface\n\n**merchant_key_store.rs**\n  Add:\n    - trait: pub::MerchantKeyStoreInterface\n\n**events.rs**\n  Add:\n    - trait: pub::EventHandlerInterface\n\n**app.rs**\n  Add:\n    - function: private::get_api_client\n    - function: private::get_proxy\n    - function: private::get_request_id\n    - function: private::get_request_id_str\n    - function: private::get_tenant\n    - function: private::get_connectors\n    - function: private::event_handler\n    - impl: impl hyperswitch_interfaces::api_client::ApiClientWrapper for SessionState\n\n**services.rs**\n  Modify existing code\n\n**api.rs**\n  Remove:\n    - function: private::handle_ucs_response\n    - function: private::store_raw_connector_response_if_required\n    - function: pub::execute_connector_processing_step\n    - function: pub::call_connector_api\n    - function: private::handle_response\n\n**client.rs**\n  Remove:\n    - trait: pub::RequestBuilder\n    - trait: pub::ApiClient\n  Add:\n    - function: private::get_request_id\n\n**kafka.rs**\n  Modify existing code\n\n**business_profile.rs**\n  Add:\n    - trait: pub::ProfileInterface\n\n**config.rs**\n  Remove:\n    - trait: pub::TenantConfig\n\n**configs.rs**\n  Add:\n    - trait: pub::ConfigInterface\n\n**store.rs**\n  Modify existing code\n\n**kv_router_store.rs**\n  Modify existing code\n\n**lib.rs**\n  Modify existing code\n\n**merchant_account.rs**\n  Add:\n    - trait: pub::MerchantAccountInterface\n\n**merchant_connector_account.rs**\n  Add:\n    - trait: pub::MerchantConnectorAccountInterface\n\n**merchant_key_store.rs**\n  Add:\n    - trait: pub::MerchantKeyStoreInterface\n\n**mock_db.rs**\n  Add:\n    - function: pub::get_master_key\n\n**utils.rs**\n  Add:\n    - function: pub::pg_accounts_connection_read\n    - function: pub::pg_accounts_connection_write", "metadata": {"pr_number": 9830, "pr_title": "refactor(db_interfaces): move db interfaces in router to domain_models", "merged_at": "2025-10-15T07:33:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/business_profile.rs", "crates/hyperswitch_domain_models/src/configs.rs", "crates/hyperswitch_domain_models/src/customer.rs", "crates/hyperswitch_domain_models/src/lib.rs", "crates/hyperswitch_domain_models/src/merchant_account.rs", "crates/hyperswitch_domain_models/src/merchant_connector_account.rs", "crates/hyperswitch_domain_models/src/merchant_key_store.rs"], "core_business": ["crates/router/src/core/payments/customers.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/helpers.rs", "crates/router/src/core/unified_connector_service.rs", "crates/router/src/core/unified_connector_service/transformers.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs", "crates/hyperswitch_interfaces/src/unified_connector_service.rs", "crates/hyperswitch_interfaces/src/unified_connector_service/transformers.rs", "crates/router/src/db/merchant_connector_account.rs", "crates/storage_impl/src/merchant_connector_account.rs"], "types": ["crates/common_utils/src/types.rs"], "utils": ["crates/hyperswitch_interfaces/src/helpers.rs", "crates/storage_impl/src/utils.rs"], "config": ["crates/hyperswitch_interfaces/Cargo.toml", "crates/hyperswitch_interfaces/src/configs.rs", "crates/router/Cargo.toml", "crates/router/src/configs/defaults.rs", "crates/router/src/configs/settings.rs", "crates/router/src/db/configs.rs", "crates/storage_impl/Cargo.toml", "crates/storage_impl/src/config.rs", "crates/storage_impl/src/configs.rs"], "other": ["Cargo.lock", "crates/analytics/src/lib.rs", "crates/hyperswitch_interfaces/src/api_client.rs", "crates/hyperswitch_interfaces/src/consts.rs", "crates/hyperswitch_interfaces/src/events.rs", "crates/hyperswitch_interfaces/src/lib.rs", "crates/hyperswitch_interfaces/src/metrics.rs", "crates/router/src/db.rs", "crates/router/src/db/business_profile.rs", "crates/router/src/db/events.rs", "crates/router/src/db/kafka_store.rs", "crates/router/src/db/merchant_account.rs", "crates/router/src/db/merchant_key_store.rs", "crates/router/src/events.rs", "crates/router/src/routes/app.rs", "crates/router/src/services.rs", "crates/router/src/services/api.rs", "crates/router/src/services/api/client.rs", "crates/router/src/services/kafka.rs", "crates/storage_impl/src/business_profile.rs", "crates/storage_impl/src/database/store.rs", "crates/storage_impl/src/kv_router_store.rs", "crates/storage_impl/src/lib.rs", "crates/storage_impl/src/merchant_account.rs", "crates/storage_impl/src/merchant_key_store.rs", "crates/storage_impl/src/mock_db.rs"]}, "change_types": {"structs_added": 6, "functions_added": 254, "enums_added": 2, "fields_added": 693, "imports_added": 83, "conditionals_added": 9, "database_queries": 18}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9823", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9829, "pr_title": "fix(connector): [adyenplatform] use YYYY format for expiry year", "merged_at": "2025-10-14T09:08:04Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nfix connector metadata deserialization\r\n\r\nCurrently we deserialize to camelCase.\r\nbut dashboard always sends in snake_case.\r\n\r\nmain pr - #9826", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`", "metadata": {"pr_number": 9827, "pr_title": "fix(connector):  [Peach Payments] fix connector metadata deserialization", "merged_at": "2025-10-14T11:48:24Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nfix connector metadata deserialization\r\n\r\nCurrently we deserialize to camelCase.\r\nbut dashboard always sends in snake_case.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`", "metadata": {"pr_number": 9826, "pr_title": "fix(connector):  [Peach Payments] fix connector metadata deserialization", "merged_at": "2025-10-14T10:15:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "The Noon Connector V2 API is failing in the payment flow with the error `Missing required param: order_category.` This happens because the connector_metadata is not being extracted in the V2 confirm-intent flow, which causes the order_category field to be None. The fix involves correctly parsing connector_metadata and ensuring the order_category value is passed from it.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_intent.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_update_intent.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n   - `crates/router/src/core/utils.rs`\n\n**4. Other**\n   - `crates/router/src/services/kafka/payment_intent.rs`\n   - `crates/router/src/services/kafka/payment_intent_event.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (12 changes)", "metadata": {"pr_number": 9825, "pr_title": "fix(payments): add connector metadata parsing and order category to payment router data", "merged_at": "2025-10-16T10:25:01Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_intent.rs"], "core_business": ["crates/router/src/core/payments/operations/payment_update_intent.rs", "crates/router/src/core/payments/transformers.rs", "crates/router/src/core/utils.rs"], "other": ["crates/router/src/services/kafka/payment_intent.rs", "crates/router/src/services/kafka/payment_intent_event.rs"]}, "change_types": {"fields_added": 12, "imports_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Fixes https://github.com/juspay/hyperswitch/issues/9822", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9823, "pr_title": "fix(connector): [adyenplatform] use YYYY format for expiry year", "merged_at": "2025-10-14T08:40:47Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nthis pr cleans up the ci-pr check. ci hack consumes a lot of time to execute hogging up runners. ci check should be more than enough.\r\nalso, this pr removes the commented out code since its been the same since like last 2+ years.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `.github/workflows/CI-pr.yml`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9819, "pr_title": "ci: remove cargo check", "merged_at": "2025-10-15T16:19:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"config": [".github/workflows/CI-pr.yml"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nIrrespective of what is sent in the connector field - be it `bluecode` or `calida`, it will be treated as `calida` at Hyperswitch's end. We would be sending back connector as `calida` in the response and the db it would also be saved as `calida`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/calida.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9817, "pr_title": "fix(connector): [CALIDA] Treat Bluecode as an alias for Calida", "merged_at": "2025-10-15T16:45:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/calida.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR fixes the Cypress API key validation issue, where the validation was failing for key_prefixes in API keys.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Utils**\n   - `cypress-tests/cypress/utils/RequestBodyUtils.js`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9815, "pr_title": "ci(cypress): fix cypress api-key validation", "merged_at": "2025-10-14T08:07:47Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"utils": ["cypress-tests/cypress/utils/RequestBodyUtils.js"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd network token support for peach payments connector\r\nhotfix for - #9754", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payment_methods/network_tokenization.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (88 changes)", "metadata": {"pr_number": 9814, "pr_title": "feat(connector): [Peach Payments] add network token support for connector", "merged_at": "2025-10-13T14:00:59Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payment_methods/network_tokenization.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 5, "functions_added": 3, "enums_added": 3, "fields_added": 88}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9791", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/migration.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (11 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9812, "pr_title": "feat(migration): add connector_customer updation support to batch PM update API", "merged_at": "2025-10-13T11:58:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"api_models": ["crates/api_models/src/payment_methods.rs"], "core_business": ["crates/router/src/core/payment_methods/migration.rs"]}, "change_types": {"functions_added": 1, "fields_added": 11, "imports_added": 2, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Fixed payment failures caused by changes in the Iatapay redirection page by triggering the Simulate button during the redirection flow.\r\n\r\n## Motivation and Context\r\nIatapay UPI is failing due to new element added in the redirection page\r\n\r\n\r\n## How did you test it?\r\nRan locally\r\n<img width=\"1295\" height=\"670\" alt=\"Screenshot 2025-10-13 at 3 15 08 PM\" src=\"https://github.com/user-attachments/assets/69fbed33-bcd6-474b-9d7f-f1824790c91c\" />\r\n<img width=\"772\" height=\"622\" alt=\"Screenshot 2025-10-13 at 3 17 03 PM\" src=\"https://github.com/user-attachments/assets/391eb55e-8965-4e37-a541-3f9977482fa9\" />\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [ ] I formatted the code `cargo +nightly fmt --all`\r\n- [ ] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `cypress-tests/cypress/support/redirectionHandler.js`", "metadata": {"pr_number": 9811, "pr_title": "ci(cypress): Fix Iatapay UPI redirection", "merged_at": "2025-10-13T11:49:13Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["payment", "user"]}, "hierarchy": {"tests": ["cypress-tests/cypress/support/redirectionHandler.js"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd support for Apple Pay - connector decryption flow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 3 more files\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**3. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Extend existing types with new fields (65 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 2c4806d5:\nFiles to modify:\n\n\n**finix.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**request.rs**\n  Add:\n    - struct: pub::FinixApplePayPaymentToken\n    - struct: pub::FinixApplePayHeader\n    - struct: pub::FinixApplePayEncryptedData\n    - struct: pub::FinixApplePayPaymentMethod\n    - struct: pub::FinixApplePayToken", "metadata": {"pr_number": 9810, "pr_title": "feat(connector): [Finix] Add support for Apple Pay", "merged_at": "2025-10-16T08:13:01Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/finix.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers/request.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 5, "fields_added": 65, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Added `connector_customer_id` support to batch payment method update API. When provided in CSV with `merchant_connector_ids`, stores it in customer's `connector_customer` field and returns in response.\r\n\r\n__Key format:__\r\n\r\n- Payout processors: `{profile_id}_{connector_name}`\r\n- Others: `merchant_connector_id`", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/migration.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (11 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9791, "pr_title": "feat(migration): add connector_customer updation support to batch PM update API", "merged_at": "2025-10-11T13:30:20Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payment_methods.rs"], "core_business": ["crates/router/src/core/payment_methods/migration.rs"]}, "change_types": {"functions_added": 1, "fields_added": 11, "imports_added": 2, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request introduces several improvements to the subscription flow, primarily focused on more robust handling and propagation of billing address information, as well as better error handling for missing required fields. The changes ensure that billing address is consistently validated and passed through various layers of the subscription logic, reducing ambiguity and potential runtime errors.\r\n\r\n**Billing Address Handling and Validation**\r\n* Added a `billing` field to `ConfirmSubscriptionPaymentDetails` and `PaymentResponseData` structs, ensuring billing address is captured and available throughout the subscription process. [[1]](diffhunk://#diff-3d85d9e288cc67856867986ee406a3102ce1d0cf9fe5c8f9efed3a578608f817R215) [[2]](diffhunk://#diff-3d85d9e288cc67856867986ee406a3102ce1d0cf9fe5c8f9efed3a578608f817R298-R299)\r\n* Implemented `get_billing_address` method for both `ConfirmSubscriptionRequest` and `CreateAndConfirmSubscriptionRequest` to centralize billing address validation and error reporting. [[1]](diffhunk://#diff-3d85d9e288cc67856867986ee406a3102ce1d0cf9fe5c8f9efed3a578608f817R340-L338) [[2]](diffhunk://#diff-3d85d9e288cc67856867986ee406a3102ce1d0cf9fe5c8f9efed3a578608f817R392-R401)\r\n\r\n**Subscription Flow Updates**\r\n* Updated subscription confirmation and creation logic to use the new `get_billing_address` method, improving error handling for missing billing addresses and ensuring billing information is required and validated at each step. [[1]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL194-R202) [[2]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL208-R223) [[3]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL341-R387)\r\n\r\n**API and Handler Changes**\r\n* Refactored `BillingHandler` and `InvoiceHandler` to require billing address as a mandatory parameter and utilize the new validation logic, removing previous optional handling and associated error checks. [[1]](diffhunk://#diff-57a5a7402c9b28e022a6839808acf84b88808f76da82ce1c76a80660c8869ec6L181-R181) [[2]](diffhunk://#diff-57a5a7402c9b28e022a6839808acf84b88808f76da82ce1c76a80660c8869ec6L193-R193) [[3]](diffhunk://#diff-bacee0b3d81189090ca0d5f72fc58118b681a7dd4aab772679f2dec2a585a073L195-R195) [[4]](diffhunk://#diff-bacee0b3d81189090ca0d5f72fc58118b681a7dd4aab772679f2dec2a585a073L223-R223)\r\n\r\n**Response Structure Improvements**\r\n* Modified `ConfirmSubscriptionResponse` to include `plan_id` and `price_id` as parameters, ensuring these values are propagated and available in API responses. [[1]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cR290-R291) [[2]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cR443-R444) [[3]](diffhunk://#diff-1d71cc03e82ba9b3c7478b6304bd763431e20cc723881a1623ab3127301b8976R230-R241)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - `crates/router/src/core/subscription/subscription_handler.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (7 changes)", "metadata": {"pr_number": 9788, "pr_title": "refactor: Refactored Response types for subscription APIs", "merged_at": "2025-10-13T11:00:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/subscription_handler.rs"]}, "change_types": {"functions_added": 2, "fields_added": 7}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Renamed the spec file", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `cypress-tests/cypress/e2e/spec/Payment/00029-IncrementalAuth.cy.js`\n   - `cypress-tests/cypress/e2e/spec/Payment/00028-DynamicFields.cy.js`", "metadata": {"pr_number": 9786, "pr_title": "ci(cypress): fix paypal cypress", "merged_at": "2025-10-10T11:30:11Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"tests": ["cypress-tests/cypress/e2e/spec/Payment/00029-IncrementalAuth.cy.js", "cypress-tests/cypress/e2e/spec/Payment/00028-DynamicFields.cy.js"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCurrently click to pay session token is failing as it is not able to parse card brands, which should ideally be fetched from union of payment processors\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\nAdd config to make the merchant eligible for authentication service\r\n```shell\r\ncurl --location 'http://localhost:8080/configs/' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: test_admin' \\\r\n--data '{\r\n    \"key\": \"merchants_eligible_for_authentication_service\",\r\n    \"value\": \"[\\\"sahkal\\\", \\\"cewqcewc\\\", \\\"dqwdwljildwduoqwhduwqcqwjd\\\"]\"\r\n}'\r\n```\r\nCreate merchant connector account for Ctp_mastercard\r\n\r\n```shell\r\ncurl --location 'http://localhost:8080/account/dqwdwljildwduoqwhduwqcqwjd/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_Ln1VBidiPjZkR3OuxhdgOAMfwZ7atLwUDLPylBG22x9pnERlTCpvs18nnEkGqlCM' \\\r\n--data '\r\n{\r\n    \"connector_type\": \"authentication_processor\",\r\n    \"connector_name\": \"ctp_mastercard\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"HeaderKey\",\r\n        \"api_key\": \"API-KEY\"\r\n    },\r\n    \"test_mode\": true,\r\n    \"disabled\": false,\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"card_networks\": [\r\n                        \"Visa\",\r\n                        \"Mastercard\"\r\n                    ],\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                },\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"card_networks\": [\r\n                        \"Visa\",\r\n                        \"Mastercard\"\r\n                    ],\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n     \"metadata\": {\r\n    \"dpa_id\": \"b6e06cc6-3018-4c4c-bbf5-9fb232615090\",\r\n    \"dpa_name\": \"TestMerchant\",\r\n    \"locale\": \"en_AU\",\r\n    \"acquirer_bin\": \"545301\",\r\n    \"acquirer_merchant_id\": \"SRC3DS\",\r\n    \"merchant_category_code\": \"0001\",\r\n    \"merchant_country_code\": \"US\"\r\n  }\r\n}\r\n'\r\n```\r\n\r\nAdyen\r\n\r\n```shell\r\ncurl --location 'http://localhost:8080/account/dqwdwljildwduoqwhduwqcqwjd/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_Ln1VBidiPjZkR3OuxhdgOAMfwZ7atLwUDLPylBG22x9pnERlTCpvs18nnEkGqlCM' \\\r\n--data '\r\n{\r\n    \"connector_type\": \"payment_processor\",\r\n    \"connector_name\": \"cybersource\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"SignatureKey\",\r\n        \"api_secret\": \"bypQ0ZszfbHTyNgLEQx+Txvs3qqYc14LVKS+QmwX/88=\",\r\n        \"api_key\": \"538e4ded-cef5-4438-a153-5a02566a34fd\",\r\n        \"key1\": \"juspay_us_sandbox\"\r\n    },\r\n    \"test_mode\": true,\r\n    \"disabled\": false,\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"card_networks\": [\r\n                        \"AmericanExpress\"\r\n                    ],\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                },\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"card_networks\": [\r\n                        \"Visa\",\r\n                        \"Mastercard\"\r\n                    ],\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"city\": \"NY\",\r\n        \"unit\": \"245\",\r\n        \"live_endpoint_prefix\": \"vsfbjh\"\r\n    },\r\n    \"connector_webhook_details\": {\r\n        \"merchant_secret\": \"556B655EBE2F2F0912F6DBC893C23C8A30F5F5293746B80114844AB30549E2AB\"\r\n    }\r\n    // \"business_country\": \"US\",\r\n    // \"business_label\": \"default\"\r\n}\r\n'\r\n```\r\n\r\nupdate business profile with ctp_mastercard mca_id\r\n\r\n```shell\r\ncurl --location 'http://localhost:8080/account/dqwdwljildwduoqwhduwqcqwjd/business_profile/pro_KCTRv8sFQfC0r65CZxrn' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: dev_Ln1VBidiPjZkR3OuxhdgOAMfwZ7atLwUDLPylBG22x9pnERlTCpvs18nnEkGqlCM' \\\r\n--data '{\r\n    \"is_click_to_pay_enabled\": true,\r\n    \"authentication_product_ids\": {\"click_to_pay\": \"mca_XAXUpel8ABbpoGNF8lGz\"}\r\n}'\r\n```\r\n\r\ndo payments create\r\n\r\n```shell\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_fQsdc9JbERQ7CWvmguo84XDROuXOD1oK9sdfCJXOko3SossoI4zdxpJkOIPmojwn' \\\r\n--data '{\r\n    \"amount\": 1130,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": false,\r\n    \"return_url\": \"https://hyperswitch.io\"\r\n    }   \r\n'\r\n```\r\n\r\ndo Session call\r\n```shell\r\ncurl --location 'http://localhost:8080/payments/session_tokens' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: pk_dev_c5c226cace0b4d98b8f29407cd025440' \\\r\n--data '{\r\n    \"payment_id\": \"pay_9pQ3GAGiwtlt6HmWlqE0\",\r\n    \"client_secret\": \"pay_9pQ3GAGiwtlt6HmWlqE0_secret_oDBRYWg6ktOmc0sYa9tM\",\r\n    \"wallets\": []\r\n}\r\n'\r\n```\r\n\r\nResponse \r\n\r\n```shell\r\n{\r\n    \"payment_id\": \"pay_9pQ3GAGiwtlt6HmWlqE0\",\r\n    \"client_secret\": \"pay_9pQ3GAGiwtlt6HmWlqE0_secret_oDBRYWg6ktOmc0sYa9tM\",\r\n    \"session_token\": [\r\n        {\r\n            \"wallet_name\": \"click_to_pay\",\r\n            \"dpa_id\": \"b6e06cc6-3018-4c4c-bbf5-9fb232615090\",\r\n            \"dpa_name\": \"TestMerchant\",\r\n            \"locale\": \"en_AU\",\r\n            \"card_brands\": [\r\n                \"Visa\",\r\n                \"Mastercard\"\r\n            ],\r\n            \"acquirer_bin\": \"545301\",\r\n            \"acquirer_merchant_id\": \"SRC3DS\",\r\n            \"merchant_category_code\": \"0001\",\r\n            \"merchant_country_code\": \"US\",\r\n            \"transaction_amount\": \"0.10\",\r\n            \"transaction_currency_code\": \"EUR\",\r\n            \"phone_number\": \"999999999\",\r\n            \"email\": \"guest@example.com\",\r\n            \"phone_country_code\": \"+65\",\r\n            \"provider\": \"mastercard\",\r\n            \"dpa_client_id\": null\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [ ] I formatted the code `cargo +nightly fmt --all`\r\n- [ ] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`", "metadata": {"pr_number": 9784, "pr_title": "fix(router): fixed click to pay metadata parsing issue", "merged_at": "2025-10-13T15:45:48Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["payment", "merchant", "connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payments.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded Webhook Flow and Support for merchant_order_reference_id for Peachpayments", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments.rs`\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (60 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 6394c892:\nFiles to modify:\n\n\n**peachpayments.rs**\n  Modify existing code\n\n**transformers.rs**\n  Remove:\n    - struct: pub::PeachpaymentsPaymentsResponse\n  Add:\n    - function: pub::get_webhook_response\n    - struct: pub::PeachpaymentsPaymentsData\n    - enum: pub::PeachpaymentsPaymentsResponse", "metadata": {"pr_number": 9781, "pr_title": "feat(connector): [Peachpayments] Add Webhook Flow and Support For merchant_order_reference_id", "merged_at": "2025-10-15T16:01:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments.rs", "crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"]}, "change_types": {"structs_added": 3, "functions_added": 3, "enums_added": 1, "fields_added": 60, "imports_added": 4, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n1. This pr adds plan_id and price_id columns to the subscription table.\r\n2. Created the subscription update call, which takes `plan_id`, `item_price_id`, `amount`, and `currency` as input.\r\n3. Added payment update s2s call.\r\n4. This PR removes all subscription information from the subscription confirm API so that the SDK can use it.\r\n\r\nSubscription Update call does 2 things\r\n\r\n- Takes  `plan_id`, `item_price_id` and update subscription\r\n- Takes `amount`, and `currency`, and updates the invoice and makes an S2S call to the payment update so that the confirm call can use the new amount and currency", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - ... and 1 more files\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/invoice.rs`\n   - `crates/hyperswitch_domain_models/src/subscription.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - `crates/router/src/core/subscription/payments_api_client.rs`\n   - ... and 2 more files\n\n**5. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/payments.rs`\n   - `crates/router/src/routes/subscription.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (10 changes)\n- Extend existing types with new fields (125 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 36fbaa07:\nFiles to modify:\n\n\n**subscription.rs**\n  Remove:\n    - function: pub::get_item_price_id\n  Add:\n    - struct: pub::UpdateSubscriptionRequest\n    - impl: impl ApiEventMetric for UpdateSubscriptionRequest\n\n**invoice.rs**\n  Modify existing code\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - function: pub::get_item_price_id\n  Add:\n    - struct: pub::UpdateSubscriptionRequest\n    - impl: impl ApiEventMetric for UpdateSubscriptionRequest\n\n**invoice.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - function: pub::get_item_price_id\n  Add:\n    - struct: pub::UpdateSubscriptionRequest\n    - impl: impl ApiEventMetric for UpdateSubscriptionRequest\n\n**subscription.rs**\n  Remove:\n    - function: pub::get_item_price_id\n  Add:\n    - struct: pub::UpdateSubscriptionRequest\n    - impl: impl ApiEventMetric for UpdateSubscriptionRequest\n\n**invoice_handler.rs**\n  Add:\n    - function: pub::update_payment\n\n**payments_api_client.rs**\n  Add:\n    - function: pub::update_payment\n\n**subscription_handler.rs**\n  Modify existing code\n\n**incoming.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - function: pub::get_item_price_id\n  Add:\n    - struct: pub::UpdateSubscriptionRequest\n    - impl: impl ApiEventMetric for UpdateSubscriptionRequest\n\n**authentication.rs**\n  Add:\n    - function: pub::check_internal_api_key_auth_no_client_secret\n\n**invoice_sync.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9778, "pr_title": "feat(subscriptions): Add update subscriptions APIs with payments update call", "merged_at": "2025-10-14T10:54:26Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/invoice.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/subscription.rs"], "domain": ["crates/hyperswitch_domain_models/src/invoice.rs", "crates/hyperswitch_domain_models/src/subscription.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/payments_api_client.rs", "crates/router/src/core/subscription/subscription_handler.rs", "crates/router/src/core/webhooks/incoming.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs", "crates/router/src/routes/subscription.rs", "crates/router/src/services/authentication.rs", "crates/router/src/workflows/invoice_sync.rs", "migrations/2025-10-07-160015_add-plan-id-and-price-id-to-subscription/down.sql", "migrations/2025-10-07-160015_add-plan-id-and-price-id-to-subscription/up.sql"]}, "change_types": {"structs_added": 4, "functions_added": 10, "enums_added": 1, "fields_added": 125, "imports_added": 4, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdded Payments Webhooks", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/gigadat.rs`\n   - `crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (19 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (1 changes)", "metadata": {"pr_number": 9775, "pr_title": "feat(connector): [Gigadat] Add Payments Webhook", "merged_at": "2025-10-10T10:19:38Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/gigadat.rs", "crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs"]}, "change_types": {"structs_added": 2, "functions_added": 4, "fields_added": 19, "imports_added": 3, "conditionals_added": 1, "database_queries": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n**Payments Eligibility API**\r\n\r\nThis PR introduces the Payments Eligibility API, which is invoked by the SDK after the payment method data filled event. The API pre-processes the submitted payment method data to determine the appropriate next action and checks eligibility based on various parameters.\r\n\r\nAs part of this change, blocklist checks have been added to the eligibility flow to ensure that ineligible or restricted payment methods are identified early in the process.\r\n\r\n<img width=\"843\" height=\"1443\" alt=\"image\" src=\"https://github.com/user-attachments/assets/025e6255-6cb1-4376-8ae6-f39c2495d50d\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/events/payment.rs`\n   - `crates/api_models/src/payments.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/blocklist/utils.rs`\n   - `crates/router/src/core/payments.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/payments.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**5. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/routes/app.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (16 changes)\n- Extend existing types with new fields (41 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit ecf702ab:\nFiles to modify:\n\n\n**payment.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for payments::PaymentsEligibilityRequest\n    - impl: impl ApiEventMetric for payments::PaymentsEligibilityResponse\n\n**payments.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: pub::should_payment_be_blocked\n\n**payments.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**authentication.rs**\n  Add:\n    - function: private::get_client_secret\n    - impl: impl ClientSecretFetch for payments::PaymentsEligibilityRequest\n\n**payments.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9774, "pr_title": "feat(router): add pre-confirm payments eligibility api", "merged_at": "2025-10-16T07:16:20Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "card"]}, "hierarchy": {"api_models": ["crates/api_models/src/events/payment.rs", "crates/api_models/src/payments.rs"], "core_business": ["crates/router/src/core/blocklist/utils.rs", "crates/router/src/core/payments.rs"], "types": ["crates/router/src/types/api/payments.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs", "crates/router/src/services/authentication.rs"]}, "change_types": {"structs_added": 2, "functions_added": 16, "enums_added": 1, "fields_added": 41, "imports_added": 1, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdded `docker.io` registry prefix to all images in the `docker-compose.yml` to avoid confusions when the host machine has a different default registry set.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `docker-compose-development.yml`\n   - `docker-compose.yml`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (36 changes)", "metadata": {"pr_number": 9771, "pr_title": "chore: added explicit docker.io registry to all images in docker-compose.yml", "merged_at": "2025-10-15T12:08:32Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"config": ["docker-compose-development.yml", "docker-compose.yml"]}, "change_types": {"fields_added": 36}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- Added time range filter support in the customer list API to fetch customers based on created_at between start_time and end_time.\r\n- Implemented count functionality to return both the filtered customer list and total count for pagination.\r\n- If customer_id is provided, the time range filter is skipped — only one filter applies at a time.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/customers.rs`\n   - `crates/api_models/src/events/customer.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/query/customers.rs`\n   - `crates/diesel_models/src/query/generics.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/customer.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/customers.rs`\n   - `crates/router/src/core/errors/customers_error_response.rs`\n   - `crates/router/src/core/errors/transformers.rs`\n   - ... and 3 more files\n\n**5. Type Definitions**\n   - `crates/router/src/types/api/customers.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `crates/router/src/compatibility/stripe/errors.rs`\n   - `crates/router/src/db/kafka_store.rs`\n   - `crates/router/src/routes/app.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (20 changes)\n- Extend existing types with new fields (70 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n- Modify database queries (15 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 587588f8:\nFiles to modify:\n\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints\n\n**customer.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for CustomerListRequestWithConstraints\n    - impl: impl ApiEventMetric for CustomerListRequestWithConstraints\n    - impl: impl ApiEventMetric for CustomerListResponse\n    - impl: impl ApiEventMetric for CustomerListResponse\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints\n\n**generics.rs**\n  Add:\n    - function: pub::generic_count\n\n**customer.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for CustomerListRequestWithConstraints\n    - impl: impl ApiEventMetric for CustomerListRequestWithConstraints\n    - impl: impl ApiEventMetric for CustomerListResponse\n    - impl: impl ApiEventMetric for CustomerListResponse\n\n**errors.rs**\n  Modify existing code\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints\n\n**customers_error_response.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**locker_migration.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - mod: pub::customer_validation\n\n**customer_validation.rs**\n  Add:\n    - function: pub::validate_customer_list_limit\n\n**kafka_store.rs**\n  Add:\n    - function: private::list_customers_by_merchant_id_with_count\n\n**app.rs**\n  Modify existing code\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints\n\n**lock_utils.rs**\n  Modify existing code\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints\n\n**types.rs**\n  Modify existing code\n\n**customers.rs**\n  Add:\n    - struct: pub::CustomerListRequestWithConstraints", "metadata": {"pr_number": 9767, "pr_title": "feat(customers): add time range filtering and count functionality to customer list endpoints", "merged_at": "2025-10-16T08:13:01Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/customers.rs", "crates/api_models/src/events/customer.rs"], "database": ["crates/diesel_models/src/query/customers.rs", "crates/diesel_models/src/query/generics.rs"], "domain": ["crates/hyperswitch_domain_models/src/customer.rs"], "core_business": ["crates/router/src/core/customers.rs", "crates/router/src/core/errors/customers_error_response.rs", "crates/router/src/core/errors/transformers.rs", "crates/router/src/core/locker_migration.rs", "crates/router/src/core/utils.rs", "crates/router/src/core/utils/customer_validation.rs"], "types": ["crates/router/src/types/api/customers.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/router/src/compatibility/stripe/errors.rs", "crates/router/src/db/kafka_store.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/customers.rs", "crates/storage_impl/src/customers.rs"]}, "change_types": {"structs_added": 2, "functions_added": 20, "fields_added": 70, "imports_added": 1, "conditionals_added": 2, "database_queries": 15}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR adds a metric `WEBHOOK_FLOW_FAILED_BUT_ACKNOWLEDGED` to track incoming webhooks that failed processing but were acknowledged with 200 status to prevent queueing in connector systems.\r\n\r\nThe metric includes the following attributes:\r\n- connector\r\n- merchant_id", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/metrics.rs`\n   - `crates/router/src/core/webhooks/incoming.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9763, "pr_title": "chore(webhooks): add metric to track failed webhooks acknowledged with 200", "merged_at": "2025-10-10T07:29:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "connector", "webhook"]}, "hierarchy": {"core_business": ["crates/router/src/core/metrics.rs", "crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nFix wasm bug juspay threeds\r\n\r\ncurrently wasm build is not showing any error because of double bracket issue\r\n\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n\r\nran control center locally\r\n<img width=\"1067\" height=\"709\" alt=\"Screenshot 2025-10-08 at 8 30 17 PM\" src=\"https://github.com/user-attachments/assets/e0fa02a4-5079-4721-b028-11bada3f3253\" />\r\n\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9757, "pr_title": "fix(router): Fix wasm bug juspay threeds", "merged_at": "2025-10-08T16:41:58Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd network token support for peach payments connector", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payment_methods/network_tokenization.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (88 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c2da9db9:\nFiles to modify:\n\n\n**transformers.rs**\n  Remove:\n    - struct: pub::PeachpaymentsPaymentsRequest\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::PeachpaymentsPaymentsCardRequest\n    - struct: pub::CardOnFileData\n    - struct: pub::EcommerceNetworkTokenPaymentOnlyTransactionData\n    - struct: pub::NetworkTokenDetails\n    - enum: pub::PeachpaymentsPaymentsRequest\n    - enum: pub::EcommercePaymentOnlyTransactionData\n    - enum: pub::CardNetworkLowercase\n    - impl: impl From<common_enums::CardNetwork> for CardNetworkLowercase\n    - impl: impl TryFrom<(\n&PeachpaymentsRouterData<&PaymentsAuthorizeRouterData>,\nNetworkTokenData,\n)> for PeachpaymentsPaymentsRequest\n    - impl: impl TryFrom<(&PeachpaymentsRouterData<&PaymentsAuthorizeRouterData>, Card)> for PeachpaymentsPaymentsRequest\n\n**network_tokenization.rs**\n  Modify existing code", "metadata": {"pr_number": 9754, "pr_title": "feat(connector): [Peach Payments] add network token support for connector", "merged_at": "2025-10-13T12:38:13Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payment_methods/network_tokenization.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 5, "functions_added": 3, "enums_added": 3, "fields_added": 88}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdd the following payment methods in wasm for multisafepay\r\n- TRUSTLY\r\n- ALIPAY\r\n- WE CHAT PAY\r\n- EPS\r\n- MBway\r\n- Sofort\r\n\r\n\r\n\r\nJust dashboard changes and no need test cases from BE", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9746, "pr_title": "fix(wasm_changes): Multisafepay wasm changes", "merged_at": "2025-10-09T09:00:14Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThe migration-runner service in the `docker-compose.yml` file fails during a second deployment as `just` installer raises `just already installed` error. This PR fixes that issue issue by adding a conditional statement which calls the just installer only when just command is not available.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `docker-compose.yml`\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9745, "pr_title": "fix: fixed the just install error in migration-runner", "merged_at": "2025-10-10T07:28:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"config": ["docker-compose.yml"]}, "change_types": {"conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd type for fields in juspay threeds server\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\nComplied wasm in local terminal\r\n\r\n<img width=\"917\" height=\"396\" alt=\"Screenshot 2025-10-08 at 3 48 48 PM\" src=\"https://github.com/user-attachments/assets/380e43c9-43a1-4133-9be3-688b88c38208\" />\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9744, "pr_title": "fix(core): Add type for fields in juspay threeds server", "merged_at": "2025-10-08T12:43:54Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Reverts juspay/hyperswitch#9689", "response": "To implement this **unknown** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**", "metadata": {"pr_number": 9740, "pr_title": "revert(routing): update configs on updation of mca", "merged_at": "2025-10-08T08:46:29Z", "intent": {"feature_type": "unknown", "action": "unknown", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"imports_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n`is_rebilling` should be sent as `1` always for `NTID` flow in Nuvei.\r\n\r\n- Core change:  For proxy/ntid flow customer details were not being passed in `router_data` from core. \r\n- Add US as supported countries for GOOGLEPAY, Even though it doesn't list US in supported countries in [DOC](https://docs.nuvei.com/documentation/global-guides/google-pay/)\r\n\r\n\r\n## REQUEST\r\n```json\r\n{\r\n    \"amount\": 10023,\r\n    \"currency\": \"EUR\",\r\n    \"confirm\": true,\r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n        \"online\": {\r\n            \"ip_address\": \"in sit\",\r\n            \"user_agent\": \"amet irure esse\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"customer_id\": \"nithxxinn\",\r\n    \"return_url\": \"https://www.google.com\",\r\n    \"capture_method\": \"automatic\",\r\n\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"description\": \"hellow world\",\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n    \"email\": \"hello@gmail.com\",\r\n\r\n \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"off_session\": true,\r\n    \"recurring_details\": {\r\n        \"type\": \"network_transaction_id_and_card_details\",\r\n        \"data\": {\r\n            \"card_number\": \"4242424242424242\",\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"2030\",\r\n            \"card_network\":\"VISA\",\r\n            \"network_transaction_id\": \"01615070********\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRESPONSE : \r\n\r\n```json \r\n{\r\n    \"payment_id\": \"pay_LkaUU5hsgNIRtS3dNJ7Y\",\r\n    \"merchant_id\": \"merchant_1760007762\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10023,\r\n    \"net_amount\": 10023,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10023,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_LkaUU5hsgNIRtS3dNJ7Y_secret_SnY5seciR0qmDoTyLD3Z\",\r\n    \"created\": \"2025-10-10T07:39:13.663Z\",\r\n    \"currency\": \"EUR\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"4242\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"424242\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"2030\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://www.google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"nithxxinn\",\r\n        \"created_at\": 1760081953,\r\n        \"expires\": 1760085553,\r\n        \"secret\": \"epk_84b79b41787640c780ec0ffbc06d61e2\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000018185783\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": null,\r\n    \"reference_id\": \"9599777111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_D59PF6bunaFycoeexf3v\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_dBUZgHuGCA5UOuipcycK\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-10T07:54:13.663Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-10T07:39:16.176Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null,\r\n    \"is_stored_credential\": true,\r\n    \"mit_category\": null\r\n}\r\n```\r\n\r\n## Connector request\r\n\r\n```js\r\nObject {\r\n    timeStamp: String(\"20251010052957\"),\r\n    sessionToken: String(\"*** alloc::string::String ***\"),\r\n    merchantId: String(\"*** alloc::string::String ***\"),\r\n    merchantSiteId: String(\"*** alloc::string::String ***\"),\r\n    clientRequestId: String(\"*** alloc::string::String ***\"),\r\n    amount: String(\"100.23\"),\r\n    currency: String(\"EUR\"),\r\n    userTokenId: String(\"nithxxinn\"), // required when rebilling is \"1\"\r\n    clientUniqueId: String(\"\"),\r\n    transactionType: String(\"Sale\"),\r\n    isRebilling: String(\"1\"), // rebilling 1 for ntid\r\n    paymentOption: Object {\r\n        card: Object {\r\n            cardNumber: String(\"424242**********\"),\r\n            expirationMonth: String(\"*** alloc::string::String ***\"),\r\n            expirationYear: String(\"*** alloc::string::String ***\"),\r\n        },\r\n    },\r\n    deviceDetails: Object {\r\n        ipAddress: String(\"192.**.**.**\"),\r\n    },\r\n    checksum: String(\"*** alloc::string::String ***\"),\r\n    billingAddress: Object {\r\n        email: String(\"*****@gmail.com\"),\r\n        firstName: String(\"*** alloc::string::String ***\"),\r\n        lastName: String(\"*** alloc::string::String ***\"),\r\n        country: String(\"US\"),\r\n        city: String(\"*** alloc::string::String ***\"),\r\n        address: String(\"*** alloc::string::String ***\"),\r\n        zip: String(\"*** alloc::string::String ***\"),\r\n        addressLine2: String(\"*** alloc::string::String ***\"),\r\n    },\r\n    urlDetails: Object {\r\n        successUrl: String(\"https://google.com\"),\r\n        failureUrl: String(\"https://google.com\"),\r\n        pendingUrl: String(\"https://google.com\"),\r\n    },\r\n    amountDetails: Object {\r\n        totalTax: Null,\r\n        totalShipping: Null,\r\n        totalHandling: Null,\r\n        totalDiscount: Null,\r\n    },\r\n    externalSchemeDetails: Object {\r\n        transactionId: String(\"*** alloc::string::String ***\"), // NITD\r\n        brand: String(\"VISA\"),\r\n    },\r\n}\r\n```\r\n## Non Mandate request\r\n\r\n```json\r\n{\r\n    \"amount\": 30000,\r\n    \"capture_method\": \"automatic\",\r\n    \"currency\": \"AED\",\r\n    \"confirm\": true,\r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"offline\",\r\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n        \"online\": {\r\n            \"ip_address\": \"127.0.0.1\",\r\n            \"user_agent\": \"amet irure esse\"\r\n        }\r\n    },\r\n    \"connector\": [\r\n        \"nuvei\"\r\n    ],\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"return_url\": \"https://www.google.com\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"AT\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n    \"email\": \"hello@gmail.com\",\r\n    \"payment_method_data\": {\r\n          \"card\": {\r\n            \"card_number\": \"4531739335817394\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRESPONSE\r\n\r\n```js\r\n{\r\n  \"timeStamp\": \"20251010163310\",\r\n  \"sessionToken\": \"*** alloc::string::String ***\",\r\n  \"merchantId\": \"*** alloc::string::String ***\",\r\n  \"merchantSiteId\": \"*** alloc::string::String ***\",\r\n  \"clientRequestId\": \"*** alloc::string::String ***\",\r\n  \"amount\": \"300.00\",\r\n  \"currency\": \"AED\",\r\n  \"clientUniqueId\": \"\",\r\n  \"transactionType\": \"Sale\",\r\n  \"paymentOption\": {\r\n    \"card\": {\r\n      \"cardNumber\": \"453173**********\",\r\n      \"cardHolderName\": \"*** alloc::string::String ***\",\r\n      \"expirationMonth\": \"*** alloc::string::String ***\",\r\n      \"expirationYear\": \"*** alloc::string::String ***\",\r\n      \"CVV\": \"*** alloc::string::String ***\"\r\n    }\r\n  },\r\n  \"deviceDetails\": {\r\n    \"ipAddress\": \"192.**.**.**\"\r\n  },\r\n  \"checksum\": \"*** alloc::string::String ***\",\r\n  \"billingAddress\": {\r\n    \"email\": \"*****@gmail.com\",\r\n    \"firstName\": \"*** alloc::string::String ***\",\r\n    \"lastName\": \"*** alloc::string::String ***\",\r\n    \"country\": \"AT\",\r\n    \"city\": \"*** alloc::string::String ***\",\r\n    \"address\": \"*** alloc::string::String ***\",\r\n    \"zip\": \"*** alloc::string::String ***\",\r\n    \"addressLine2\": \"*** alloc::string::String ***\"\r\n  },\r\n  \"urlDetails\": {\r\n    \"successUrl\": \"https://google.com\",\r\n    \"failureUrl\": \"https://google.com\",\r\n    \"pendingUrl\": \"https://google.com\"\r\n  },\r\n  \"amountDetails\": {\r\n    \"totalTax\": null,\r\n    \"totalShipping\": null,\r\n    \"totalHandling\": null,\r\n    \"totalDiscount\": null\r\n  }\r\n}\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n\n**4. Configuration Files**\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n\n**Code Patterns Applied:**\n- Implement new functions (4 changes)\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9738, "pr_title": "fix(nuvei): For NTID/proxy flow `is_rebilling` should always be sent 1 & pass customer_details in proxy flow + Add US as supported countries for GOOGLEPAY", "merged_at": "2025-10-10T12:43:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/deployments/sandbox.toml", "config/development.toml"]}, "change_types": {"functions_added": 4, "enums_added": 1, "fields_added": 9}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded google pay connector tokenization flow for finix connector.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 3 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (1 changes)\n- Extend existing types with new fields (33 changes)", "metadata": {"pr_number": 9734, "pr_title": "feat(connector): [Finix] Add Google Pay Connector Tokenization Flow", "merged_at": "2025-10-10T07:59:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/finix.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers/request.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 1, "functions_added": 1, "fields_added": 33, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request refactors how the default fallback routing configuration is updated when a merchant connector account is modified. Instead of calling the old helper function, the logic is now handled through a new `MerchantDefaultConfigUpdate` struct with methods that more explicitly update or remove the connector from the routing algorithm, depending on whether the connector is disabled. The changes also ensure that the connector update uses a clone of the merchant connector account object.\r\n\r\n**Routing configuration update refactor:**\r\n\r\n* Replaces the old `update_default_fallback_on_mca_update` helper with explicit logic using the `MerchantDefaultConfigUpdate` struct, which updates or deletes the connector from the default fallback routing algorithm based on the connector's status. This makes the update process more modular and easier to maintain. [[1]](diffhunk://#diff-7e1b4a44fadc4de1af2a6abeb318b3ddf044177c44ba00731c33dbf4cdce92b7L2894-R2920) [[2]](diffhunk://#diff-ea48d33e52b2cb7edbbba1d236b55f946fdb2c178f8c76f4226818b3630c4658L2791-L2837)\r\n* Removes the now-unused `update_default_fallback_on_mca_update` function from `routing/helpers.rs`.\r\n\r\n**Code quality and correctness:**\r\n\r\n* Ensures the `update_merchant_connector_account` call receives a clone of the `mca` object, preventing potential issues with ownership or mutation.\r\n* Cleans up imports by removing the now-unused `update_default_fallback_on_mca_update` import.\r\n<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (6 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9729, "pr_title": "fix(routing): cache redaction on updation of mca", "merged_at": "2025-10-08T08:06:23Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "connector"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"fields_added": 6, "imports_added": 3, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\ni initially pushed the changes to [this](https://github.com/juspay/hyperswitch/pull/9706) pr but since it was already in the merge queue, i raised this as a separate pr.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**2. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files", "metadata": {"pr_number": 9722, "pr_title": "chore(environment): [tesouro] update currency environment variables", "merged_at": "2025-10-08T15:44:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["transaction"]}, "hierarchy": {"tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n1. Add support to create a subscription with trial plans.\r\nWhen this type of subscription is created, a payment of $0 will be made to validate the payment method and save it for future use. The incoming webhook for invoice-generated event should work similarly to the MIT flow.\r\n\r\n2. Add support to make 3DS payments in subscriptions", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n   - `crates/diesel_models/src/query/invoice.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/customer.rs`\n   - `crates/hyperswitch_domain_models/src/invoice.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - ... and 3 more files\n\n**5. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `migrations/2025-10-09-171834_invoice_subscription_id_connector_invoice_id_unique_index/down.sql`\n   - `migrations/2025-10-09-171834_invoice_subscription_id_connector_invoice_id_unique_index/up.sql`\n\n**6. Type Definitions**\n   - `crates/router/src/types/storage/invoice_sync.rs`\n\n**7. Other**\n   - `crates/router/src/db/kafka_store.rs`\n   - `crates/router/src/workflows/invoice_sync.rs`\n   - `crates/storage_impl/src/invoice.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (13 changes)\n- Extend existing types with new fields (91 changes)\n- Add conditional logic for feature flags or filtering (5 changes)\n- Modify database queries (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c2a9ce78:\nFiles to modify:\n\n\n**payments.rs**\n  Modify existing code\n\n**subscription.rs**\n  Modify existing code\n\n**connector_enums.rs**\n  Modify existing code\n\n**invoice.rs**\n  Modify existing code\n\n**invoice.rs**\n  Modify existing code\n\n**customer.rs**\n  Add:\n    - function: pub::get_connector_customer_map\n\n**invoice.rs**\n  Modify existing code\n\n**subscription.rs**\n  Modify existing code\n\n**billing_processor_handler.rs**\n  Modify existing code\n\n**invoice_handler.rs**\n  Add:\n    - function: pub::find_invoice_by_subscription_id_connector_invoice_id\n\n**payments_api_client.rs**\n  Modify existing code\n\n**subscription_handler.rs**\n  Add:\n    - function: pub::update_connector_customer_id_in_customer\n    - function: pub::update_customer\n\n**incoming.rs**\n  Modify existing code\n\n**kafka_store.rs**\n  Add:\n    - function: private::find_invoice_by_subscription_id_connector_invoice_id\n\n**invoice_sync.rs**\n  Modify existing code\n\n**invoice_sync.rs**\n  Modify existing code\n\n**invoice.rs**\n  Modify existing code", "metadata": {"pr_number": 9721, "pr_title": "feat(subscription): add support to create subscription with trial plans", "merged_at": "2025-10-10T14:44:11Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs", "crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/invoice.rs", "crates/diesel_models/src/query/invoice.rs"], "domain": ["crates/hyperswitch_domain_models/src/customer.rs", "crates/hyperswitch_domain_models/src/invoice.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/payments_api_client.rs", "crates/router/src/core/subscription/subscription_handler.rs", "crates/router/src/core/webhooks/incoming.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "migrations/2025-10-09-171834_invoice_subscription_id_connector_invoice_id_unique_index/down.sql", "migrations/2025-10-09-171834_invoice_subscription_id_connector_invoice_id_unique_index/up.sql"], "types": ["crates/router/src/types/storage/invoice_sync.rs"], "other": ["crates/router/src/db/kafka_store.rs", "crates/router/src/workflows/invoice_sync.rs", "crates/storage_impl/src/invoice.rs"]}, "change_types": {"functions_added": 13, "fields_added": 91, "imports_added": 2, "conditionals_added": 5, "database_queries": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nmake `endpoint_prefix` optional in three_ds_metadata for unified_authentication_service\r\nMain PR - https://github.com/juspay/hyperswitch/pull/9717", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types/unified_authentication_service.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n   - `crates/router/src/core/unified_authentication_service.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9719, "pr_title": "fix(router): make `endpoint_prefix` optional in three_ds_metadata for unified_authentication_service", "merged_at": "2025-10-07T13:58:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types/unified_authentication_service.rs"], "core_business": ["crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/unified_authentication_service.rs"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "implement payouts for Loonio", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n   - `crates/api_models/src/payouts.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/cards.rs`\n   - `crates/router/src/core/payment_methods/vault.rs`\n   - `crates/router/src/core/payouts/helpers.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 15 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/api/payouts.rs`\n   - `crates/router/src/types/transformers.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/payout_method_utils.rs`\n\n**6. Tests**\n   - `config/deployments/integration_test.toml`\n\n**7. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 3 more files\n\n**8. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/common_enums/src/enums.rs`\n   - ... and 5 more files\n\n**Code Patterns Applied:**\n- Define new data structures (7 changes)\n- Implement new functions (23 changes)\n- Extend existing types with new fields (124 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit abcc70be:\nFiles to modify:\n\n\n**enums.rs**\n  Modify existing code\n\n**payouts.rs**\n  Add:\n    - struct: pub::Interac\n    - enum: pub::BankRedirect\n\n**connector_enums.rs**\n  Modify existing code\n\n**enums.rs**\n  Modify existing code\n\n**payout_method_utils.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**enums.rs**\n  Modify existing code\n\n**adyen.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payouts.rs**\n  Add:\n    - struct: pub::Interac\n    - enum: pub::BankRedirect\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**loonio.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_url\n    - function: private::get_headers\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::Payouts for Loonio\n    - impl: impl api::PayoutFulfill for Loonio\n    - impl: impl api::PayoutSync for Loonio\n    - impl: impl ConnectorIntegration<PoFulfill, PayoutsData, PayoutsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<PoSync, PayoutsData, PayoutsResponseData> for Loonio\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**connect.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**default_implementations.rs**\n  Modify existing code\n\n**openapi.rs**\n  Modify existing code\n\n**openapi_v2.rs**\n  Modify existing code\n\n**payout_required_fields.rs**\n  Modify existing code\n\n**cards.rs**\n  Modify existing code\n\n**vault.rs**\n  Add:\n    - function: private::get_value2\n    - function: private::from_values\n    - struct: pub::TokenizedBankRedirectSensitiveValues\n    - struct: pub::TokenizedBankRedirectInsensitiveValues\n\n**helpers.rs**\n  Modify existing code\n\n**payouts.rs**\n  Add:\n    - struct: pub::Interac\n    - enum: pub::BankRedirect\n\n**transformers.rs**\n  Modify existing code\n\n**adyen.rs**\n  Modify existing code", "metadata": {"pr_number": 9718, "pr_title": "feat(connector): [Loonio] implement payouts", "merged_at": "2025-10-08T16:47:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs", "crates/api_models/src/payouts.rs"], "core_business": ["crates/router/src/core/payment_methods/cards.rs", "crates/router/src/core/payment_methods/vault.rs", "crates/router/src/core/payouts/helpers.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/adyen.rs", "crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs", "crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs", "crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs", "crates/hyperswitch_connectors/src/connectors/ebanx/transformers.rs", "crates/hyperswitch_connectors/src/connectors/loonio.rs", "crates/hyperswitch_connectors/src/connectors/loonio/transformers.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/connectors/payone/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripe/transformers/connect.rs", "crates/hyperswitch_connectors/src/connectors/wise/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/router/tests/connectors/adyen.rs"], "types": ["crates/router/src/types/api/payouts.rs", "crates/router/src/types/transformers.rs"], "utils": ["crates/common_utils/src/payout_method_utils.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml", "crates/router/src/configs/defaults/payout_required_fields.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/common_enums/src/enums.rs", "crates/euclid/src/enums.rs", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs", "migrations/2025-10-07-100547-0000_add_bank_redirect_in/down.sql", "migrations/2025-10-07-100547-0000_add_bank_redirect_in/up.sql"]}, "change_types": {"structs_added": 7, "functions_added": 23, "enums_added": 3, "fields_added": 124, "imports_added": 5, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nmake `endpoint_prefix` optional in three_ds_metadata for unified_authentication_service", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types/unified_authentication_service.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n   - `crates/router/src/core/unified_authentication_service.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9717, "pr_title": "fix(router): make `endpoint_prefix` optional in three_ds_metadata for unified_authentication_service", "merged_at": "2025-10-07T16:44:53Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types/unified_authentication_service.rs"], "core_business": ["crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/unified_authentication_service.rs"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n  - Add SdkUpiIntentInformation struct and NextActionData variant for URI responses\r\n  - Add UpiQr payment method type with exhaustive pattern matching across all connectors", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n   - `crates/api_models/src/payments/additional_info.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n   - `crates/router/src/core/unified_connector_service.rs`\n   - ... and 1 more files\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen.rs`\n   - `crates/hyperswitch_connectors/src/connectors/dummyconnector/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/iatapay/transformers.rs`\n   - ... and 4 more files\n\n**5. Type Definitions**\n   - `crates/router/src/compatibility/stripe/payment_intents/types.rs`\n   - `crates/router/src/compatibility/stripe/setup_intents/types.rs`\n   - `crates/router/src/types/transformers.rs`\n\n**6. Utils**\n   - `crates/kgraph_utils/src/mca.rs`\n   - `crates/kgraph_utils/src/transformers.rs`\n   - `crates/payment_methods/src/helpers.rs`\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/common_enums/src/enums.rs`\n   - ... and 6 more files\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (8 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 5c7a6073:\nFiles to modify:\n\n\n**payments.rs**\n  Add:\n    - struct: pub::UpiQrData\n    - struct: pub::SdkUpiIntentInformation\n\n**additional_info.rs**\n  Modify existing code\n\n**enums.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**enums.rs**\n  Modify existing code\n\n**lowering.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**adyen.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**klarna.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payment_method_data.rs**\n  Add:\n    - struct: pub::UpiQrData\n\n**mca.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**openapi.rs**\n  Modify existing code\n\n**openapi_v2.rs**\n  Modify existing code\n\n**helpers.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::UpiQrData\n    - struct: pub::SdkUpiIntentInformation\n\n**transformers.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9716, "pr_title": "feat(core): add support for upi_intent and upi_qr", "merged_at": "2025-10-13T13:09:37Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs", "crates/api_models/src/payments/additional_info.rs"], "domain": ["crates/hyperswitch_domain_models/src/payment_method_data.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/transformers.rs", "crates/router/src/core/unified_connector_service.rs", "crates/router/src/core/unified_connector_service/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/adyen.rs", "crates/hyperswitch_connectors/src/connectors/dummyconnector/transformers.rs", "crates/hyperswitch_connectors/src/connectors/iatapay/transformers.rs", "crates/hyperswitch_connectors/src/connectors/klarna.rs", "crates/hyperswitch_connectors/src/connectors/paypal/transformers.rs", "crates/hyperswitch_connectors/src/connectors/razorpay/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripe/transformers.rs"], "types": ["crates/router/src/compatibility/stripe/payment_intents/types.rs", "crates/router/src/compatibility/stripe/setup_intents/types.rs", "crates/router/src/types/transformers.rs"], "utils": ["crates/kgraph_utils/src/mca.rs", "crates/kgraph_utils/src/transformers.rs", "crates/payment_methods/src/helpers.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/common_enums/src/enums.rs", "crates/common_enums/src/transformers.rs", "crates/euclid/src/frontend/dir/enums.rs", "crates/euclid/src/frontend/dir/lowering.rs", "crates/euclid/src/frontend/dir/transformers.rs", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"structs_added": 3, "functions_added": 2, "fields_added": 8}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request introduces several enhancements and refactors to the subscription API, focusing on improving authentication, response structure, and data handling. The main changes include adding payment and invoice details to subscription responses, updating authentication logic to support client secrets in queries, and refactoring handler methods for better error handling and extensibility.\r\n\r\n**Subscription Response Improvements**\r\n* Added `payment` and `invoice` fields to the `SubscriptionResponse` struct to provide more detailed information about payments and invoices associated with a subscription.\r\n* Updated the `PaymentResponseData` struct to use a `Secret<String>` for the `client_secret` field, improving security and consistency.\r\n\r\n**Authentication and Query Handling**\r\n* Introduced a new `GetSubscriptionQuery` struct to allow passing a client secret when fetching subscription details, and implemented `ClientSecretFetch` for relevant subscription request/query types. [[1]](diffhunk://#diff-3d85d9e288cc67856867986ee406a3102ce1d0cf9fe5c8f9efed3a578608f817R206-R215) [[2]](diffhunk://#diff-c66a703d6e518900240c7296a4d6f9c55c9787ea8f490a419dd0395dc0b36d70R4329-R4349)\r\n* Refactored authentication logic in subscription route handlers (`get_subscription`, `get_subscription_plans`, and `confirm_subscription`) to extract and validate client secrets from query payloads, improving security and flexibility. [[1]](diffhunk://#diff-d737ada25c830476b3867c693bd362d4b1142773f1b0d971556518b5c04691a3R104-R122) [[2]](diffhunk://#diff-d737ada25c830476b3867c693bd362d4b1142773f1b0d971556518b5c04691a3R149-R172) [[3]](diffhunk://#diff-d737ada25c830476b3867c693bd362d4b1142773f1b0d971556518b5c04691a3R184-R199) [[4]](diffhunk://#diff-d737ada25c830476b3867c693bd362d4b1142773f1b0d971556518b5c04691a3L205-R216)\r\n\r\n**Handler and Response Refactoring**\r\n* Refactored the `to_subscription_response` method in `SubscriptionWithHandler` to accept optional payment and invoice parameters, and handle invoice conversion with error reporting for invalid currency values. [[1]](diffhunk://#diff-1d71cc03e82ba9b3c7478b6304bd763431e20cc723881a1623ab3127301b8976L253-R258) [[2]](diffhunk://#diff-1d71cc03e82ba9b3c7478b6304bd763431e20cc723881a1623ab3127301b8976R268-R295)\r\n* Updated core subscription logic to use the new response structure and refactored method signatures for consistency, including changes to how responses are generated and returned. [[1]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL34-R31) [[2]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL71-R68) [[3]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL94-R91) [[4]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL420-R412)\r\n\r\nThese changes collectively improve the robustness and extensibility of the subscription API, making it easier to integrate payment and invoice details while strengthening authentication mechanisms.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - `crates/router/src/core/subscription/subscription_handler.rs`\n   - ... and 1 more files\n\n**4. External Connector Integration**\n   - `migrations/2025-10-07-130304_add_connector_invoice_id/down.sql`\n   - `migrations/2025-10-07-130304_add_connector_invoice_id/up.sql`\n\n**5. Other**\n   - `crates/router/src/routes/subscription.rs`\n   - `crates/router/src/services/authentication.rs`\n   - `crates/router/src/workflows/invoice_sync.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (5 changes)\n- Extend existing types with new fields (36 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 01b4d6ae:\nFiles to modify:\n\n\n**subscription.rs**\n  Add:\n    - function: pub::as_string\n\n**invoice.rs**\n  Modify existing code\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::as_string\n\n**invoice_handler.rs**\n  Modify existing code\n\n**subscription_handler.rs**\n  Add:\n    - function: private::foreign_try_from\n    - impl: impl ForeignTryFrom<&diesel_models::invoice::Invoice> for subscription_types::Invoice\n\n**incoming.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::as_string\n\n**authentication.rs**\n  Add:\n    - function: private::get_client_secret\n    - function: private::get_client_secret\n    - impl: impl ClientSecretFetch for api_models::subscription::ConfirmSubscriptionRequest\n    - impl: impl ClientSecretFetch for api_models::subscription::GetPlansQuery\n\n**invoice_sync.rs**\n  Modify existing code", "metadata": {"pr_number": 9713, "pr_title": "feat(subscriptions): Add client secret auth support in subscriptions APIs", "merged_at": "2025-10-08T15:44:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/invoice.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/subscription_handler.rs", "crates/router/src/core/webhooks/incoming.rs"], "connectors": ["migrations/2025-10-07-130304_add_connector_invoice_id/down.sql", "migrations/2025-10-07-130304_add_connector_invoice_id/up.sql"], "other": ["crates/router/src/routes/subscription.rs", "crates/router/src/services/authentication.rs", "crates/router/src/workflows/invoice_sync.rs"]}, "change_types": {"functions_added": 5, "fields_added": 36, "imports_added": 1, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nRenamed Connector Name from Bluecode to Calida. Payment Method Type Bluecode remains the same.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 15 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**5. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**6. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (11 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (22 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 04a14e39:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Remove:\n    - mod: pub::bluecode\n  Add:\n    - mod: pub::calida\n\n**calida.rs**\n  Remove:\n    - struct: pub::Bluecode\n  Add:\n    - struct: pub::Calida\n\n**transformers.rs**\n  Remove:\n    - struct: pub::BluecodeRouterData\n    - struct: pub::BluecodePaymentsResponse\n    - struct: pub::BluecodeErrorResponse\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**payment_connector_required_fields.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code\n\n**calida.rs**\n  Remove:\n    - struct: pub::Bluecode\n  Add:\n    - struct: pub::Calida\n\n**main.rs**\n  Remove:\n    - mod: private::bluecode\n  Add:\n    - mod: private::calida\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9712, "pr_title": "fix(connector): [CALIDA] Changed Connector Name From Bluecode to Calida", "merged_at": "2025-10-07T16:39:34Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/bluecode.rs", "crates/hyperswitch_connectors/src/connectors/bluecode/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs", "crates/router/src/connector.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/router/tests/connectors/bluecode.rs", "crates/router/tests/connectors/main.rs", "crates/router/tests/connectors/sample_auth.toml", "crates/test_utils/src/connector_auth.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 11, "functions_added": 2, "enums_added": 1, "fields_added": 22, "imports_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for https://github.com/juspay/hyperswitch/pull/9644", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (10 changes)\n- Add conditional logic for feature flags or filtering (3 changes)", "metadata": {"pr_number": 9709, "pr_title": "fix(connectors): [Nexixpay] MIT & order_id fix", "merged_at": "2025-10-07T10:51:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 10, "conditionals_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadded wasm changes for juspayThreeds server metadata\r\n\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n<img width=\"980\" height=\"236\" alt=\"Screenshot 2025-10-07 at 2 56 56 PM\" src=\"https://github.com/user-attachments/assets/c4937bfb-f9b9-4881-9d18-55e7c8924d57\" />\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9708, "pr_title": "fix(core): added wasm changes for juspayThreeds server metadata", "merged_at": "2025-10-08T07:16:28Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nLoomio webhooks for payments \r\n\r\n\r\n## payment request\r\n\r\n```json\r\n{\r\n    \"amount\": 1500,\r\n    \"currency\": \"CAD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"customer_id\": \"aaaa\",\r\n\r\n    \"authentication_type\": \"three_ds\",\r\n    \"payment_method\": \"bank_redirect\",\r\n    \"payment_method_type\": \"interac\",\r\n    \"payment_method_data\": {\r\n        \"bank_redirect\": {\r\n            \"interac\": {}\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"Singapore Changi Airport. 2nd flr\",\r\n            \"line2\": \"\",\r\n            \"line3\": \"\",\r\n            \"city\": \"Downtown Core\",\r\n            \"state\": \"Central Indiana America\",\r\n            \"zip\": \"039393\",\r\n            \"country\": \"SG\",\r\n            \"first_name\": \"Swangi\",\r\n            \"last_name\": \"Kumari\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"swangi.kumari@juspay.in\"\r\n    },\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"127.0.0.1\"\r\n    }\r\n}\r\n```\r\n\r\n## response\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_J3xaVGqCX1QbnGKyQoCQ\",\r\n    \"merchant_id\": \"merchant_1759821555\",\r\n    \"status\": \"requires_customer_action\",\r\n    \"amount\": 1500,\r\n    \"net_amount\": 1500,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 1500,\r\n    \"amount_received\": null,\r\n    \"connector\": \"loonio\",\r\n    \"client_secret\": \"pay_J3xaVGqCX1QbnGKyQoCQ_secret_IfvZo54PdakCzmi10muX\",\r\n    \"created\": \"2025-10-07T09:15:47.349Z\",\r\n    \"currency\": \"CAD\",\r\n    \"customer_id\": \"aaaa\",\r\n    \"customer\": {\r\n        \"id\": \"aaaa\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"bank_redirect\",\r\n    \"payment_method_data\": {\r\n        \"bank_redirect\": {\r\n            \"type\": \"BankRedirectResponse\",\r\n            \"bank_name\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Downtown Core\",\r\n            \"country\": \"SG\",\r\n            \"line1\": \"Singapore Changi Airport. 2nd flr\",\r\n            \"line2\": \"\",\r\n            \"line3\": \"\",\r\n            \"zip\": \"039393\",\r\n            \"state\": \"Central Indiana America\",\r\n            \"first_name\": \"Swangi\",\r\n            \"last_name\": \"Kumari\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"swangi.kumari@juspay.in\"\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": {\r\n        \"type\": \"redirect_to_url\",\r\n        \"redirect_to_url\": \"http://localhost:8080/payments/redirect/pay_J3xaVGqCX1QbnGKyQoCQ/merchant_1759821555/pay_J3xaVGqCX1QbnGKyQoCQ_1\"\r\n    },\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"interac\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"aaaa\",\r\n        \"created_at\": 1759828547,\r\n        \"expires\": 1759832147,\r\n        \"secret\": \"epk_dfb1c2f173f34c4da48ee0a98d48051f\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"pay_J3xaVGqCX1QbnGKyQoCQ_1\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_MLEtbytGk3haqiqlaheV\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_UKE4wkdWmZVIs8oRKgbo\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-07T09:30:47.349Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"127.0.0.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-07T09:15:48.782Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null,\r\n    \"is_stored_credential\": null,\r\n    \"mit_category\": null\r\n}\r\n```\r\n\r\n## make redirect\r\n<img width=\"1708\" height=\"1115\" alt=\"Screenshot 2025-10-07 at 2 47 11 PM\" src=\"https://github.com/user-attachments/assets/35ea68fa-8b86-48ef-9600-64916ebdaf2b\" />\r\n\r\n## the status will change when webhook reaches without force psync\r\n\r\n<img width=\"1178\" height=\"678\" alt=\"Screenshot 2025-10-07 at 2 47 43 PM\" src=\"https://github.com/user-attachments/assets/254d2a5f-eab1-4b15-988a-a353338d1536\" />\r\n\r\n## webhook source verificaiton = false\r\n\r\n\r\n<img width=\"1085\" height=\"311\" alt=\"Screenshot 2025-10-07 at 6 15 09 PM\" src=\"https://github.com/user-attachments/assets/0f21632f-0927-47ac-95b4-4593dcbb1633\" />\r\n<img width=\"648\" height=\"246\" alt=\"Screenshot 2025-10-07 at 6 15 21 PM\" src=\"https://github.com/user-attachments/assets/1871af58-ce58-4c78-97d3-7c1502ab77ba\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/loonio.rs`\n   - `crates/hyperswitch_connectors/src/connectors/loonio/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (37 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 27a7845a:\nFiles to modify:\n\n\n**loonio.rs**\n  Add:\n    - function: private::verify_webhook_source\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::from\n    - struct: pub::LoonioWebhookBody\n    - enum: pub::LoonioWebhookTransactionType\n    - enum: pub::LoonioPaymentResponseData\n    - impl: impl From<&LoonioWebhookEventCode> for webhooks::IncomingWebhookEvent\n    - impl: impl From<&LoonioWebhookEventCode> for enums::AttemptStatus", "metadata": {"pr_number": 9707, "pr_title": "feat(connector): Loonio Webhooks", "merged_at": "2025-10-07T17:37:38Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/loonio.rs", "crates/hyperswitch_connectors/src/connectors/loonio/transformers.rs"]}, "change_types": {"structs_added": 1, "functions_added": 4, "enums_added": 3, "fields_added": 37, "imports_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR adds support for Google Pay payment method in the Tesouro connector.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (15 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9706, "pr_title": "feat(connector): [tesouro] google pay", "merged_at": "2025-10-07T15:14:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/tesouro.rs", "crates/hyperswitch_connectors/src/connectors/tesouro/transformers.rs"]}, "change_types": {"structs_added": 1, "functions_added": 2, "fields_added": 15, "imports_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nSince `id` column is introduced as varchar for a few major tracker tables in v2, index creation was missed in v2_compatible_migrations directory. This PR includes that.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `v2_compatible_migrations/2025-10-07-131000_add_indexes_on_id_columns/down.sql`\n   - `v2_compatible_migrations/2025-10-07-131000_add_indexes_on_id_columns/up.sql`", "metadata": {"pr_number": 9704, "pr_title": "chore: create indexes on required id columns for v2 application", "merged_at": "2025-10-08T15:44:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"other": ["v2_compatible_migrations/2025-10-07-131000_add_indexes_on_id_columns/down.sql", "v2_compatible_migrations/2025-10-07-131000_add_indexes_on_id_columns/up.sql"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "https://github.com/juspay/hyperswitch/pull/9659\r\nThis pull request introduces a new helper function to update the default fallback connector configuration whenever a merchant connector account (MCA) is updated. This ensures that changes to connector status (such as disabling or enabling) are accurately reflected in both merchant and profile configurations. The changes also include necessary imports and function calls to integrate this logic into the connector update flow.\r\n\r\n**Connector fallback configuration updates:**\r\n\r\n* Added the `update_default_fallback_on_mca_update` function in `routing/helpers.rs` to update merchant and profile default connector configurations based on the status of the updated MCA. The function ensures that disabled or inactive connectors are removed from the defaults, and enabled connectors are added if not already present.\r\n* Integrated the new helper into the `update_connector` flow in `admin.rs`, so it is triggered automatically after connector updates.\r\n\r\n**Imports and code organization:**\r\n\r\n* Added necessary imports for `update_default_fallback_on_mca_update` and related types in `admin.rs` and `helpers.rs` to support the new logic. [[1]](diffhunk://#diff-7e1b4a44fadc4de1af2a6abeb318b3ddf044177c44ba00731c33dbf4cdce92b7R25-R28) [[2]](diffhunk://#diff-ea48d33e52b2cb7edbbba1d236b55f946fdb2c178f8c76f4226818b3630c4658R6)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (9 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9690, "pr_title": "refactor(routing): update configs on updation of mca", "merged_at": "2025-10-08T08:05:17Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "connector"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 9, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "https://github.com/juspay/hyperswitch/pull/9659\r\nThis pull request introduces a new helper function to update the default fallback connector configuration whenever a merchant connector account (MCA) is updated. This ensures that changes to connector status (such as disabling or enabling) are accurately reflected in both merchant and profile configurations. The changes also include necessary imports and function calls to integrate this logic into the connector update flow.\r\n\r\n**Connector fallback configuration updates:**\r\n\r\n* Added the `update_default_fallback_on_mca_update` function in `routing/helpers.rs` to update merchant and profile default connector configurations based on the status of the updated MCA. The function ensures that disabled or inactive connectors are removed from the defaults, and enabled connectors are added if not already present.\r\n* Integrated the new helper into the `update_connector` flow in `admin.rs`, so it is triggered automatically after connector updates.\r\n\r\n**Imports and code organization:**\r\n\r\n* Added necessary imports for `update_default_fallback_on_mca_update` and related types in `admin.rs` and `helpers.rs` to support the new logic. [[1]](diffhunk://#diff-7e1b4a44fadc4de1af2a6abeb318b3ddf044177c44ba00731c33dbf4cdce92b7R25-R28) [[2]](diffhunk://#diff-ea48d33e52b2cb7edbbba1d236b55f946fdb2c178f8c76f4226818b3630c4658R6)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (3 changes)\n- Extend existing types with new fields (13 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9689, "pr_title": "refactor(routing): update configs on updation of mca", "merged_at": "2025-10-06T16:31:20Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "connector"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"functions_added": 3, "fields_added": 13, "imports_added": 2, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nWe can update card expiry in payments method data of payment methods table using batch pm update API>\r\nAdded support to pass multiple mca ids for updating payment methods entry.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_method.rs`\n\n**3. Core Business Logic**\n   - `crates/payment_methods/src/core/migration.rs`\n   - `crates/router/src/core/payment_methods/migration.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (1 changes)\n- Extend existing types with new fields (22 changes)\n- Add conditional logic for feature flags or filtering (7 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit ad374997:\nFiles to modify:\n\n\n**payment_methods.rs**\n  Modify existing code\n\n**payment_method.rs**\n  Modify existing code\n\n**migration.rs**\n  Remove:\n    - struct: private::MerchantConnectorValidator\n  Add:\n    - struct: pub::MerchantConnectorValidator\n\n**migration.rs**\n  Remove:\n    - struct: private::MerchantConnectorValidator\n  Add:\n    - struct: pub::MerchantConnectorValidator", "metadata": {"pr_number": 9688, "pr_title": "feat(core): Add support to update card exp in update payment methods api", "merged_at": "2025-10-07T12:54:46Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/payment_methods.rs"], "database": ["crates/diesel_models/src/payment_method.rs"], "core_business": ["crates/payment_methods/src/core/migration.rs", "crates/router/src/core/payment_methods/migration.rs"]}, "change_types": {"structs_added": 1, "functions_added": 1, "fields_added": 22, "imports_added": 3, "conditionals_added": 7}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nthis pr fixes bug in paysafe where skrill wallet payment method was throwing `501`. the reason being, we've added a check in preprocessing call that applied to all wallet payment methods for paysafe instead of having it applied to apple pay specifically.\r\n\r\nthis pr fixes that.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`", "metadata": {"pr_number": 9687, "pr_title": "fix(connector): restrict preprocessing to only apple pay for paysafe", "merged_at": "2025-10-07T11:04:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCurrently with Postgres@18, db connection fails. Reason being space should be percent encoded as `%20`. This encoding standards are followed across all versions of Postgres as mentioned in their [docs](https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNSTRING) as well.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Utils**\n   - `crates/common_utils/src/lib.rs`", "metadata": {"pr_number": 9685, "pr_title": "fix(database): percent-encode spaces in Postgres connection URI", "merged_at": "2025-10-06T18:21:44Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "user"]}, "hierarchy": {"utils": ["crates/common_utils/src/lib.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Added a fork using tokio::spawn and sent the cloned router data to UCS, \r\nAdded some headers for identification of connector, flow, req-id \r\ncalled the validation service to send both router data for comparison.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/mandates.rs`\n   - `crates/hyperswitch_domain_models/src/payment_address.rs`\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n   - ... and 4 more files\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/flows.rs`\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - ... and 5 more files\n\n**3. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n\n**4. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/consts.rs`\n   - `crates/common_utils/src/errors.rs`\n\n**6. Configuration Files**\n   - `crates/router/src/configs/secrets_transformers.rs`\n   - `crates/router/src/configs/settings.rs`\n\n**7. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/external_services/src/grpc_client.rs`\n   - `crates/external_services/src/http_client/client.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (14 changes)\n- Extend existing types with new fields (123 changes)\n- Add conditional logic for feature flags or filtering (12 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 115ef10a:\nFiles to modify:\n\n\n**enums.rs**\n  Add:\n    - enum: pub::ExecutionMode\n\n**consts.rs**\n  Modify existing code\n\n**errors.rs**\n  Modify existing code\n\n**grpc_client.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**client.rs**\n  Add:\n    - function: private::apply_mitm_certificate\n\n**mandates.rs**\n  Modify existing code\n\n**payment_address.rs**\n  Modify existing code\n\n**payment_method_data.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**router_data.rs**\n  Modify existing code\n\n**router_request_types.rs**\n  Modify existing code\n\n**router_response_types.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**secrets_transformers.rs**\n  Modify existing code\n\n**settings.rs**\n  Add:\n    - struct: pub::ComparisonServiceConfig\n\n**payments.rs**\n  Modify existing code\n\n**flows.rs**\n  Modify existing code\n\n**authorize_flow.rs**\n  Modify existing code\n\n**external_proxy_flow.rs**\n  Modify existing code\n\n**psync_flow.rs**\n  Modify existing code\n\n**setup_mandate_flow.rs**\n  Modify existing code\n\n**retry.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code", "metadata": {"pr_number": 9684, "pr_title": "feat(framework): Added diff-checker required code and running ucs in shadow mode", "merged_at": "2025-10-10T12:36:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/mandates.rs", "crates/hyperswitch_domain_models/src/payment_address.rs", "crates/hyperswitch_domain_models/src/payment_method_data.rs", "crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/router_data.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs", "crates/hyperswitch_domain_models/src/router_response_types.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/flows.rs", "crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/flows/setup_mandate_flow.rs", "crates/router/src/core/payments/retry.rs", "crates/router/src/core/unified_connector_service.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "utils": ["crates/common_utils/src/consts.rs", "crates/common_utils/src/errors.rs"], "config": ["crates/router/src/configs/secrets_transformers.rs", "crates/router/src/configs/settings.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/external_services/src/grpc_client.rs", "crates/external_services/src/http_client/client.rs", "crates/router/src/routes/app.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 2, "functions_added": 14, "enums_added": 1, "fields_added": 123, "imports_added": 12, "conditionals_added": 12}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR introduces profile-level configuration for enabling/disabling L2/L3 transaction data, providing merchants with granular control over enhanced payment data collection at the business profile level.\r\n# 🧩 Additional Changes\r\n\r\n## 🗄️ Database & Schema\r\n\r\n- Added new column `is_l2_l3_enabled` to the `business_profile` table.  \r\n  - **Type:** `BOOLEAN`  \r\n  - **Nullable:** Yes (`NULLABLE BOOLEAN`)  \r\n\r\n- Updated L2/L3 data construction logic to check **both**:\r\n  1. **Global config flag:** `state.conf.l2_l3_data_config.enabled`  \r\n  2. **Profile-level flag:** `payment_data.is_l2_l3_enabled == Some(true)`\r\n\r\n- **New behavior:**  \r\n  L2/L3 data is now included **only when both** flags are enabled.\r\n\r\n---\r\n\r\n## ⚙️ Behavior Changes\r\n\r\n**Previously:**  \r\nL2/L3 data inclusion was controlled **only** by the global configuration flag:\r\n```text\r\nl2_l3_data_config.enabled = true\r\n\r\n**Now **\r\nL2/L3 data inclusion requires both conditions to be true:\r\n\r\nGlobal config enabled → l2_l3_data_config.enabled = true\r\n\r\nProfile-level enabled → is_l2_l3_enabled = true\r\n```\r\n- [x] This PR modifies the API contract\r\n- [x] This PR modifies the database schema\r\n- [ ] This PR modifies application configuration/environment variables\r\n\r\n<!--\r\nProvide links to the files with corresponding changes.\r\n\r\nFollowing are the paths where you can find config files:\r\n1. `config`\r\n2. `crates/router/src/configs`\r\n3. `loadtest/config`\r\n-->\r\n\r\n\r\n## Motivation and Context\r\n<!--\r\nWhy is this change required? What problem does it solve?\r\nIf it fixes an open issue, please link to the issue here.\r\n\r\nIf you don't have an issue, we'd recommend starting with one first so the PR\r\ncan focus on the implementation (unless it is an obvious bug or documentation fix\r\nthat will have little conversation).\r\n-->\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\nFlag False\r\n```\r\ncurl --location 'http://localhost:8080/account/postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204/business_profile/pro_VRw87wcMS3AfvczM2ROe' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: dev_2Lukl788r5RWxkuO15MlUgGWKB17w8CQgU6Jiov5jEUhKIDyR8xJ9BqP1x6uT6Bh' \\\r\n--data '{\r\n    \"is_l2_l3_enabled\":false\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"merchant_id\": \"postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204\",\r\n    \"profile_id\": \"pro_VRw87wcMS3AfvczM2ROe\",\r\n    \"profile_name\": \"Update\",\r\n    \"return_url\": \"https://google.com/success\",\r\n    \"enable_payment_response_hash\": true,\r\n    \"payment_response_hash_key\": \"cVla9zUpUCNm8lPgzW9zNWi9Le5utHWR3nFruLNhtjbwRdXGtL4PU2g7fGyb9WY6\",\r\n    \"redirect_to_merchant_with_http_post\": false,\r\n    \"webhook_details\": {\r\n        \"webhook_version\": \"1.0.1\",\r\n        \"webhook_username\": \"ekart_retail\",\r\n        \"webhook_password\": \"password_ekart@123\",\r\n        \"webhook_url\": \"https://webhook.site\",\r\n        \"payment_created_enabled\": true,\r\n        \"payment_succeeded_enabled\": true,\r\n        \"payment_failed_enabled\": true,\r\n        \"payment_statuses_enabled\": null,\r\n        \"refund_statuses_enabled\": null,\r\n        \"payout_statuses_enabled\": null\r\n    },\r\n    \"metadata\": null,\r\n    \"routing_algorithm\": null,\r\n    \"intent_fulfillment_time\": 900,\r\n    \"frm_routing_algorithm\": null,\r\n    \"payout_routing_algorithm\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"session_expiry\": 900,\r\n    \"payment_link_config\": null,\r\n    \"authentication_connector_details\": null,\r\n    \"use_billing_as_payment_method_billing\": true,\r\n    \"extended_card_info_config\": null,\r\n    \"collect_shipping_details_from_wallet_connector\": false,\r\n    \"collect_billing_details_from_wallet_connector\": false,\r\n    \"always_collect_shipping_details_from_wallet_connector\": false,\r\n    \"always_collect_billing_details_from_wallet_connector\": false,\r\n    \"is_connector_agnostic_mit_enabled\": false,\r\n    \"payout_link_config\": null,\r\n    \"outgoing_webhook_custom_http_headers\": null,\r\n    \"tax_connector_id\": null,\r\n    \"is_tax_connector_enabled\": false,\r\n    \"is_network_tokenization_enabled\": false,\r\n    \"is_auto_retries_enabled\": false,\r\n    \"max_auto_retries_enabled\": null,\r\n    \"always_request_extended_authorization\": null,\r\n    \"is_click_to_pay_enabled\": false,\r\n    \"authentication_product_ids\": null,\r\n    \"card_testing_guard_config\": {\r\n        \"card_ip_blocking_status\": \"disabled\",\r\n        \"card_ip_blocking_threshold\": 3,\r\n        \"guest_user_card_blocking_status\": \"disabled\",\r\n        \"guest_user_card_blocking_threshold\": 10,\r\n        \"customer_id_blocking_status\": \"disabled\",\r\n        \"customer_id_blocking_threshold\": 5,\r\n        \"card_testing_guard_expiry\": 3600\r\n    },\r\n    \"is_clear_pan_retries_enabled\": false,\r\n    \"force_3ds_challenge\": false,\r\n    \"is_debit_routing_enabled\": false,\r\n    \"merchant_business_country\": null,\r\n    \"is_pre_network_tokenization_enabled\": false,\r\n    \"acquirer_configs\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"merchant_category_code\": null,\r\n    \"merchant_country_code\": null,\r\n    \"dispute_polling_interval\": null,\r\n    \"is_manual_retry_enabled\": null,\r\n    \"always_enable_overcapture\": null,\r\n    \"is_external_vault_enabled\": \"skip\",\r\n    \"external_vault_connector_details\": null,\r\n    \"billing_processor_id\": null,\r\n    \"is_l2_l3_enabled\": false\r\n}\r\n```\r\nPayments Create +Confirm\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_2Lukl788r5RWxkuO15MlUgGWKB17w8CQgU6Jiov5jEUhKIDyR8xJ9BqP1x6uT6Bh' \\\r\n--data-raw '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"tax_status\": \"exempt\",\r\n    \"duty_amount\": 400,\r\n    \"shipping_cost\": 431,\r\n    \"discount_amount\": 500,\r\n    \"shipping_amount_tax\": 50,\r\n    \"order_date\": \"2024-01-15T10:30:00Z\",\r\n    \"confirm\": true,\r\n    \"customer\": {\r\n        \"id\":\"2343\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john@example.com\",\r\n        \"tax_registration_id\": \"TAX123456789\"\r\n    },\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4457030000000007\",\r\n            \"card_exp_month\": \"09\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"John Doe\",\r\n            \"card_cvc\": \"123\"\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"123 Main St\",\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"10001\",\r\n            \"country\": \"US\",\r\n            \"origin_zip\": \"90210\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"123 Main St\",\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"10001\",\r\n            \"country\": \"US\",\r\n            \"origin_zip\": \"90210\"\r\n        }\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"product_name\": \"Laptop\",\r\n            \"quantity\": 1,\r\n            \"amount\": 8000,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 8000,\r\n            \"unit_discount_amount\": 200,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 640\r\n        },\r\n        {\r\n            \"product_name\": \"Mouse\",\r\n            \"quantity\": 2,\r\n            \"amount\": 2000,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 1000,\r\n            \"unit_discount_amount\": 50,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 160\r\n        }\r\n    ]\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_k5Bpv5PtEJybJqMpAxgh\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204\",\r\n    \"status\": \"processing\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10431,\r\n    \"shipping_cost\": 431,\r\n    \"amount_capturable\": 10431,\r\n    \"amount_received\": null,\r\n    \"connector\": \"worldpayvantiv\",\r\n    \"client_secret\": \"pay_k5Bpv5PtEJybJqMpAxgh_secret_gIdSB9ymBpqxF67m2YuI\",\r\n    \"created\": \"2025-10-06T10:20:03.012Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"2343\",\r\n    \"customer\": {\r\n        \"id\": \"2343\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john@example.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": null,\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"0007\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"445703\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"09\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"John Doe\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"00\",\r\n                \"advanced_a_v_s_result\": null,\r\n                \"authentication_result\": null,\r\n                \"card_validation_result\": \"M\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"New York\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"123 Main St\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"10001\",\r\n            \"state\": \"NY\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": \"90210\"\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"New York\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"123 Main St\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"10001\",\r\n            \"state\": \"NY\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": \"90210\"\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"brand\": null,\r\n            \"amount\": 8000,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"product_name\": \"Laptop\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 640,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 200\r\n        },\r\n        {\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"brand\": null,\r\n            \"amount\": 2000,\r\n            \"category\": null,\r\n            \"quantity\": 2,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"product_name\": \"Mouse\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 160,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 50\r\n        }\r\n    ],\r\n    \"email\": \"john@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": null,\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"2343\",\r\n        \"created_at\": 1759746002,\r\n        \"expires\": 1759749602,\r\n        \"secret\": \"epk_b1c2dbc4c6974e5ba52bc4febad559c0\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"83997805908936712\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"yu3m15HUiA8RH7xlVbxYNbb_GXBH\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_VRw87wcMS3AfvczM2ROe\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_Xy151X2xCrZUxa679A2r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:35:03.012Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"500144570300000\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:20:06.451Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null,\r\n    \"is_stored_credential\": null,\r\n    \"mit_category\": null\r\n}\r\n```\r\nenhanced_data : None (In vantive we pass the l2_l3_data in enchanced_data field )\r\n<img width=\"1041\" height=\"293\" alt=\"Screenshot 2025-10-06 at 3 51 10 PM\" src=\"https://github.com/user-attachments/assets/0bf180ae-a6ad-4653-aeec-9c333d2e5ae8\" />\r\n-----------------------------------------------------------------------------------------------------------------------\r\n\r\nPrifle flag as true\r\n```\r\ncurl --location 'http://localhost:8080/account/postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204/business_profile/pro_VRw87wcMS3AfvczM2ROe' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: dev_2Lukl788r5RWxkuO15MlUgGWKB17w8CQgU6Jiov5jEUhKIDyR8xJ9BqP1x6uT6Bh' \\\r\n--data '{\r\n    \"is_l2_l3_enabled\":true\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"merchant_id\": \"postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204\",\r\n    \"profile_id\": \"pro_VRw87wcMS3AfvczM2ROe\",\r\n    \"profile_name\": \"Update\",\r\n    \"return_url\": \"https://google.com/success\",\r\n    \"enable_payment_response_hash\": true,\r\n    \"payment_response_hash_key\": \"cVla9zUpUCNm8lPgzW9zNWi9Le5utHWR3nFruLNhtjbwRdXGtL4PU2g7fGyb9WY6\",\r\n    \"redirect_to_merchant_with_http_post\": false,\r\n    \"webhook_details\": {\r\n        \"webhook_version\": \"1.0.1\",\r\n        \"webhook_username\": \"ekart_retail\",\r\n        \"webhook_password\": \"password_ekart@123\",\r\n        \"webhook_url\": \"https://webhook.site\",\r\n        \"payment_created_enabled\": true,\r\n        \"payment_succeeded_enabled\": true,\r\n        \"payment_failed_enabled\": true,\r\n        \"payment_statuses_enabled\": null,\r\n        \"refund_statuses_enabled\": null,\r\n        \"payout_statuses_enabled\": null\r\n    },\r\n    \"metadata\": null,\r\n    \"routing_algorithm\": null,\r\n    \"intent_fulfillment_time\": 900,\r\n    \"frm_routing_algorithm\": null,\r\n    \"payout_routing_algorithm\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"session_expiry\": 900,\r\n    \"payment_link_config\": null,\r\n    \"authentication_connector_details\": null,\r\n    \"use_billing_as_payment_method_billing\": true,\r\n    \"extended_card_info_config\": null,\r\n    \"collect_shipping_details_from_wallet_connector\": false,\r\n    \"collect_billing_details_from_wallet_connector\": false,\r\n    \"always_collect_shipping_details_from_wallet_connector\": false,\r\n    \"always_collect_billing_details_from_wallet_connector\": false,\r\n    \"is_connector_agnostic_mit_enabled\": false,\r\n    \"payout_link_config\": null,\r\n    \"outgoing_webhook_custom_http_headers\": null,\r\n    \"tax_connector_id\": null,\r\n    \"is_tax_connector_enabled\": false,\r\n    \"is_network_tokenization_enabled\": false,\r\n    \"is_auto_retries_enabled\": false,\r\n    \"max_auto_retries_enabled\": null,\r\n    \"always_request_extended_authorization\": null,\r\n    \"is_click_to_pay_enabled\": false,\r\n    \"authentication_product_ids\": null,\r\n    \"card_testing_guard_config\": {\r\n        \"card_ip_blocking_status\": \"disabled\",\r\n        \"card_ip_blocking_threshold\": 3,\r\n        \"guest_user_card_blocking_status\": \"disabled\",\r\n        \"guest_user_card_blocking_threshold\": 10,\r\n        \"customer_id_blocking_status\": \"disabled\",\r\n        \"customer_id_blocking_threshold\": 5,\r\n        \"card_testing_guard_expiry\": 3600\r\n    },\r\n    \"is_clear_pan_retries_enabled\": false,\r\n    \"force_3ds_challenge\": false,\r\n    \"is_debit_routing_enabled\": false,\r\n    \"merchant_business_country\": null,\r\n    \"is_pre_network_tokenization_enabled\": false,\r\n    \"acquirer_configs\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"merchant_category_code\": null,\r\n    \"merchant_country_code\": null,\r\n    \"dispute_polling_interval\": null,\r\n    \"is_manual_retry_enabled\": null,\r\n    \"always_enable_overcapture\": null,\r\n    \"is_external_vault_enabled\": \"skip\",\r\n    \"external_vault_connector_details\": null,\r\n    \"billing_processor_id\": null,\r\n    \"is_l2_l3_enabled\": true\r\n}\r\n```\r\nPqyments Create+ Confirm\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_2Lukl788r5RWxkuO15MlUgGWKB17w8CQgU6Jiov5jEUhKIDyR8xJ9BqP1x6uT6Bh' \\\r\n--data-raw '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"tax_status\": \"exempt\",\r\n    \"duty_amount\": 400,\r\n    \"shipping_cost\": 431,\r\n    \"discount_amount\": 500,\r\n    \"shipping_amount_tax\": 50,\r\n    \"order_date\": \"2024-01-15T10:30:00Z\",\r\n    \"confirm\": true,\r\n    \"customer\": {\r\n        \"id\":\"2343\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john@example.com\",\r\n        \"tax_registration_id\": \"TAX123456789\"\r\n    },\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4457030000000007\",\r\n            \"card_exp_month\": \"09\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"John Doe\",\r\n            \"card_cvc\": \"123\"\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"123 Main St\",\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"10001\",\r\n            \"country\": \"US\",\r\n            \"origin_zip\": \"90210\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"123 Main St\",\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"10001\",\r\n            \"country\": \"US\",\r\n            \"origin_zip\": \"90210\"\r\n        }\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"product_name\": \"Laptop\",\r\n            \"quantity\": 1,\r\n            \"amount\": 8000,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 8000,\r\n            \"unit_discount_amount\": 200,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 640\r\n        },\r\n        {\r\n            \"product_name\": \"Mouse\",\r\n            \"quantity\": 2,\r\n            \"amount\": 2000,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 1000,\r\n            \"unit_discount_amount\": 50,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 160\r\n        }\r\n    ]\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_G9uVSa1XhuipIytubifJ\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_86dca2fb-b078-46c4-9ae4-fb347ac31204\",\r\n    \"status\": \"processing\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10431,\r\n    \"shipping_cost\": 431,\r\n    \"amount_capturable\": 10431,\r\n    \"amount_received\": null,\r\n    \"connector\": \"worldpayvantiv\",\r\n    \"client_secret\": \"pay_G9uVSa1XhuipIytubifJ_secret_lCs00yR6IDj1mQiv6CR3\",\r\n    \"created\": \"2025-10-06T10:22:46.946Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"2343\",\r\n    \"customer\": {\r\n        \"id\": \"2343\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john@example.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": null,\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"0007\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"445703\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"09\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"John Doe\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"00\",\r\n                \"advanced_a_v_s_result\": null,\r\n                \"authentication_result\": null,\r\n                \"card_validation_result\": \"M\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"New York\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"123 Main St\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"10001\",\r\n            \"state\": \"NY\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": \"90210\"\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"New York\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"123 Main St\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"10001\",\r\n            \"state\": \"NY\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": \"90210\"\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"brand\": null,\r\n            \"amount\": 8000,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"product_name\": \"Laptop\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 640,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 200\r\n        },\r\n        {\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"brand\": null,\r\n            \"amount\": 2000,\r\n            \"category\": null,\r\n            \"quantity\": 2,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"product_name\": \"Mouse\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 160,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 50\r\n        }\r\n    ],\r\n    \"email\": \"john@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": null,\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"2343\",\r\n        \"created_at\": 1759746166,\r\n        \"expires\": 1759749766,\r\n        \"secret\": \"epk_2e4eaf2fa2084f55adfbda7dd29be585\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"84085766858464538\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"i4q0Jo5exObW4PQfss0jq4uQ619b\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_VRw87wcMS3AfvczM2ROe\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_Xy151X2xCrZUxa679A2r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:37:46.946Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"500144570300000\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:22:49.462Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null,\r\n    \"is_stored_credential\": null,\r\n    \"mit_category\": null\r\n}\r\n```\r\n<img width=\"1007\" height=\"455\" alt=\"Screenshot 2025-10-06 at 3 53 33 PM\" src=\"https://github.com/user-attachments/assets/487931c3-4aec-4b0e-8ba7-fb6c64a50f01\" />\r\n-----------------------------------------------------------------------------------------------------------------------\r\nProfile flag as None\r\n```\r\n\r\n```\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/business_profile.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/operations/payment_approve.rs`\n   - ... and 16 more files\n\n**5. Type Definitions**\n   - `crates/router/src/types/api/admin.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/db/events.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (78 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit bd853345:\nFiles to modify:\n\n\n**admin.rs**\n  Modify existing code\n\n**business_profile.rs**\n  Modify existing code\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**business_profile.rs**\n  Modify existing code\n\n**admin.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**payment_approve.rs**\n  Modify existing code\n\n**payment_cancel.rs**\n  Modify existing code\n\n**payment_cancel_post_capture.rs**\n  Modify existing code\n\n**payment_capture.rs**\n  Modify existing code\n\n**payment_complete_authorize.rs**\n  Modify existing code\n\n**payment_confirm.rs**\n  Modify existing code\n\n**payment_create.rs**\n  Modify existing code\n\n**payment_post_session_tokens.rs**\n  Modify existing code\n\n**payment_reject.rs**\n  Modify existing code\n\n**payment_session.rs**\n  Modify existing code\n\n**payment_start.rs**\n  Modify existing code\n\n**payment_status.rs**\n  Modify existing code\n\n**payment_update.rs**\n  Modify existing code\n\n**payment_update_metadata.rs**\n  Modify existing code\n\n**payments_incremental_authorization.rs**\n  Modify existing code\n\n**tax_calculation.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**events.rs**\n  Modify existing code\n\n**admin.rs**\n  Modify existing code", "metadata": {"pr_number": 9683, "pr_title": "feat(core): Add profile-level configuration for L2/L3 data enablement", "merged_at": "2025-10-16T08:22:12Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs"], "database": ["crates/diesel_models/src/business_profile.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs"], "core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/payments.rs", "crates/router/src/core/payments/operations/payment_approve.rs", "crates/router/src/core/payments/operations/payment_cancel.rs", "crates/router/src/core/payments/operations/payment_cancel_post_capture.rs", "crates/router/src/core/payments/operations/payment_capture.rs", "crates/router/src/core/payments/operations/payment_complete_authorize.rs", "crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/operations/payment_post_session_tokens.rs", "crates/router/src/core/payments/operations/payment_reject.rs", "crates/router/src/core/payments/operations/payment_session.rs", "crates/router/src/core/payments/operations/payment_start.rs", "crates/router/src/core/payments/operations/payment_status.rs", "crates/router/src/core/payments/operations/payment_update.rs", "crates/router/src/core/payments/operations/payment_update_metadata.rs", "crates/router/src/core/payments/operations/payments_incremental_authorization.rs", "crates/router/src/core/payments/operations/tax_calculation.rs", "crates/router/src/core/payments/transformers.rs"], "types": ["crates/router/src/types/api/admin.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/db/events.rs", "migrations/2025-10-06-093228_add_l2_l3_to_business_profile/down.sql", "migrations/2025-10-06-093228_add_l2_l3_to_business_profile/up.sql"]}, "change_types": {"fields_added": 78}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nImplementation of \r\nPayment,Refund,void , customer create , tokenization for non3ds cards for finix\r\n\r\n\r\n## Test cases\r\n\r\n<details>\r\n  <summary> Payment : Automatic </summary>\r\n\r\n## Request \r\n\r\n```json\r\n{\r\n    \"amount\": 689,\r\n    \"customer_id\":\"hello_world\",\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"description\": \"hellow world\",\r\n    // \"connector\":[\"paypal_test\",\"stripe_test\"],\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"IN\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"5200828282828210\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n  \r\n    }\r\n}\r\n\r\n```\r\n\r\n## Response \r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_pVWtQXnwq32dc3OdqqQo\",\r\n    \"merchant_id\": \"merchant_1759477997\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 689,\r\n    \"net_amount\": 689,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 689,\r\n    \"connector\": \"finix\",\r\n    \"client_secret\": \"pay_pVWtQXnwq32dc3OdqqQo_secret_oYqnSGx6ktsh1jv0HF3Y\",\r\n    \"created\": \"2025-10-06T10:17:24.054Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello_world\",\r\n    \"customer\": {\r\n        \"id\": \"hello_world\",\r\n        \"name\": null,\r\n        \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"8210\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"520082\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"IN\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"hello_world\",\r\n        \"created_at\": 1759745843,\r\n        \"expires\": 1759749443,\r\n        \"secret\": \"epk_6f24c6ad6c29447e8e6cb37f9431a152\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"TRmJxabrSYTSjGxnqthW8nkK\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:32:24.054Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:17:26.710Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary> Payment : Manual </summary>\r\n\r\n```json\r\n{\r\n    \"amount\": 689,\r\n    \"customer_id\":\"hello_world\",\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"description\": \"hellow world\",\r\n    // \"connector\":[\"paypal_test\",\"stripe_test\"],\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"IN\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"5200828282828210\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n  \r\n    }\r\n}\r\n\r\n```\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_A8v0P3KgtB5w7mZaWO3t\",\r\n    \"merchant_id\": \"merchant_1759477997\",\r\n    \"status\": \"requires_capture\",\r\n    \"amount\": 689,\r\n    \"net_amount\": 689,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 689,\r\n    \"amount_received\": null,\r\n    \"connector\": \"finix\",\r\n    \"client_secret\": \"pay_A8v0P3KgtB5w7mZaWO3t_secret_jjLo36Con9BduAYRKTUP\",\r\n    \"created\": \"2025-10-06T10:18:12.998Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello_world\",\r\n    \"customer\": {\r\n        \"id\": \"hello_world\",\r\n        \"name\": null,\r\n        \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"8210\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"520082\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"IN\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"hello_world\",\r\n        \"created_at\": 1759745892,\r\n        \"expires\": 1759749492,\r\n        \"secret\": \"epk_5946337c7bf3422db4549d97b25c6c30\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"AUaokdvtqphbiksg4FAxfZf9\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:33:12.998Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:18:14.166Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n## Capture \r\n\r\n```sh\r\ncurl --location 'localhost:8080/payments/pay_A8v0P3KgtB5w7mZaWO3t/capture' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_3cGokW5MFJmBnLTLmcS2EKAODQblXknbM6XCjDHLipq0CmLrUu3LNsIyFCDwgOwH' \\\r\n--data '{\r\n    \"amount\": 689\r\n}'\r\n```\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_A8v0P3KgtB5w7mZaWO3t\",\r\n    \"merchant_id\": \"merchant_1759477997\",\r\n    \"status\": \"processing\",\r\n    \"amount\": 689,\r\n    \"net_amount\": 689,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 689,\r\n    \"connector\": \"finix\",\r\n    \"client_secret\": \"pay_A8v0P3KgtB5w7mZaWO3t_secret_jjLo36Con9BduAYRKTUP\",\r\n    \"created\": \"2025-10-06T10:18:12.998Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello_world\",\r\n    \"customer\": {\r\n        \"id\": \"hello_world\",\r\n        \"name\": null,\r\n        \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"8210\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"520082\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"IN\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"AUaokdvtqphbiksg4FAxfZf9\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:33:12.998Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:18:48.481Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n## make psync after few min to get this as captured status\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary> Void </summary>\r\nMake Auth call\r\n\r\n```json\r\ncurl --location 'localhost:8080/payments/pay_InDxLEmz9xZ9AF6xfgYc/cancel' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_3cGokW5MFJmBnLTLmcS2EKAODQblXknbM6XCjDHLipq0CmLrUu3LNsIyFCDwgOwH' \\\r\n--data '{\r\n  \"cancellation_reason\": \"requested_by_customer\"\r\n}'\r\n```\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_InDxLEmz9xZ9AF6xfgYc\",\r\n    \"merchant_id\": \"merchant_1759477997\",\r\n    \"status\": \"cancelled\",\r\n    \"amount\": 689,\r\n    \"net_amount\": 689,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"finix\",\r\n    \"client_secret\": \"pay_InDxLEmz9xZ9AF6xfgYc_secret_CSRpGCjsWQu3t6q1SZbM\",\r\n    \"created\": \"2025-10-06T10:20:46.718Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello_world\",\r\n    \"customer\": {\r\n        \"id\": \"hello_world\",\r\n        \"name\": null,\r\n        \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"8210\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"520082\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"IN\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": \"requested_by_customer\",\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"AU5zeQMv2WYgNKyo8fNh2or5\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:35:46.718Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:20:52.789Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Refund</summary>\r\n\r\nmake a payment capture\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_K7EmavhAOgxV3pOMGHGL\",\r\n    \"merchant_id\": \"merchant_1759477997\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 400,\r\n    \"net_amount\": 400,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 400,\r\n    \"connector\": \"finix\",\r\n    \"client_secret\": \"pay_K7EmavhAOgxV3pOMGHGL_secret_vOfMeE36wQUhik3cS5Nu\",\r\n    \"created\": \"2025-10-06T10:22:02.926Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello_world\",\r\n    \"customer\": {\r\n        \"id\": \"hello_world\",\r\n        \"name\": null,\r\n        \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"8210\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"520082\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"IN\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"hello_world\",\r\n        \"created_at\": 1759746122,\r\n        \"expires\": 1759749722,\r\n        \"secret\": \"epk_47435b2e06634545a0d2d0c534e0a881\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"TRaB2ZZji4QoFwuKCC4mwfi9\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-06T10:37:02.926Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-06T10:22:05.203Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n## Refund\r\n\r\n```sh\r\ncurl --location 'localhost:8080/refunds' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_3cGokW5MFJmBnLTLmcS2EKAODQblXknbM6XCjDHLipq0CmLrUu3LNsIyFCDwgOwH' \\\r\n--data '{\r\n    \"payment_id\": \"pay_K7EmavhAOgxV3pOMGHGL\",\r\n    \"amount\":389\r\n}'\r\n```\r\n\r\n```json\r\n{\r\n    \"refund_id\": \"ref_OL9OI4S00JxqZZk0l9j1\",\r\n    \"payment_id\": \"pay_K7EmavhAOgxV3pOMGHGL\",\r\n    \"amount\": 389,\r\n    \"currency\": \"USD\",\r\n    \"status\": \"pending\",\r\n    \"reason\": null,\r\n    \"metadata\": null,\r\n    \"error_message\": null,\r\n    \"error_code\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"created_at\": \"2025-10-06T10:22:49.992Z\",\r\n    \"updated_at\": \"2025-10-06T10:22:50.684Z\",\r\n    \"connector\": \"finix\",\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"split_refunds\": null,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null\r\n}\r\n```\r\n\r\nMake Rsync\r\n\r\n```sh\r\ncurl --location 'localhost:8080/refunds/ref_OL9OI4S00JxqZZk0l9j1?force_sync=true' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_3cGokW5MFJmBnLTLmcS2EKAODQblXknbM6XCjDHLipq0CmLrUu3LNsIyFCDwgOwH'\r\n```\r\n\r\n```json\r\n{\r\n    \"refund_id\": \"ref_OL9OI4S00JxqZZk0l9j1\",\r\n    \"payment_id\": \"pay_K7EmavhAOgxV3pOMGHGL\",\r\n    \"amount\": 389,\r\n    \"currency\": \"USD\",\r\n    \"status\": \"succeeded\",\r\n    \"reason\": null,\r\n    \"metadata\": null,\r\n    \"error_message\": null,\r\n    \"error_code\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"created_at\": \"2025-10-06T10:22:49.992Z\",\r\n    \"updated_at\": \"2025-10-06T10:23:20.589Z\",\r\n    \"connector\": \"finix\",\r\n    \"profile_id\": \"pro_GjR7afeLzCXVYhe62xl8\",\r\n    \"merchant_connector_id\": \"mca_bSuyBQOAy40vpxbsiOCR\",\r\n    \"split_refunds\": null,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<img width=\"995\" height=\"1008\" alt=\"Screenshot 2025-10-06 at 2 51 30 PM\" src=\"https://github.com/user-attachments/assets/fe013d3c-a608-4b89-9072-dd83b8f1c0dd\" />\r\n<img width=\"1010\" height=\"995\" alt=\"Screenshot 2025-10-06 at 2 51 42 PM\" src=\"https://github.com/user-attachments/assets/5c4a923a-d9d3-4fce-b7a9-0cf9d152caa6\" />\r\n<img width=\"867\" height=\"951\" alt=\"Screenshot 2025-10-06 at 2 52 03 PM\" src=\"https://github.com/user-attachments/assets/f85c3460-0f51-436b-90ff-2f9dfddfe1e2\" />\r\n<img width=\"1279\" height=\"972\" alt=\"Screenshot 2025-10-06 at 3 04 12 PM\" src=\"https://github.com/user-attachments/assets/279759b8-5ed3-4cc2-9298-38cfffd704e4\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 9 more files\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `cypress-tests/cypress/e2e/configs/Payment/Finix.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n\n**5. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (18 changes)\n- Implement new functions (39 changes)\n- Extend existing types with new fields (566 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 5c6635be:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**finix.rs**\n  Remove:\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Finix\n  Add:\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::should_call_connector_customer\n    - impl: impl api::ConnectorCustomer for Finix\n    - impl: impl ConnectorIntegration<CreateConnectorCustomer, ConnectorCustomerData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Finix\n\n**transformers.rs**\n  Remove:\n    - struct: pub::FinixRouterData\n    - struct: pub::FinixPaymentsRequest\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::FinixRouterData\n    - impl: impl TryFrom<ResponseRouterData<F, FinixIdentityResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&FinixRouterData<'_, Authorize, PaymentsAuthorizeData, PaymentsResponseData>> for FinixPaymentsRequest\n    - impl: impl TryFrom<&FinixRouterData<'_, Capture, PaymentsCaptureData, PaymentsResponseData>> for FinixCaptureRequest\n    - mod: pub::request\n    - mod: pub::response\n\n**request.rs**\n  Add:\n    - function: pub::new\n    - function: private::from\n    - function: private::fmt\n    - function: pub::is_failure\n    - function: pub::get_flow_for_auth\n    - struct: pub::FinixPaymentsRequest\n    - struct: pub::FinixCaptureRequest\n    - struct: pub::FinixCancelRequest\n    - struct: pub::FinixCaptureAuthorizationRequest\n    - struct: pub::FinixCreateIdentityRequest\n    - struct: pub::FinixIdentityEntity\n    - struct: pub::FinixCreatePaymentInstrumentRequest\n    - struct: pub::FinixCreateRefundRequest\n    - struct: pub::FinixThreeDSecure\n    - struct: pub::FinixAddress\n    - struct: pub::FinixAuthType\n    - enum: pub::FinixId\n    - enum: pub::FinixState\n    - enum: pub::FinixPaymentType\n    - enum: pub::FinixPaymentInstrumentType\n    - enum: pub::FinixCardType\n    - enum: pub::FinixIdentityType\n    - enum: pub::FinixFlow\n    - impl: impl FinixCreateRefundRequest\n    - impl: impl From<String> for FinixId\n    - impl: impl std::fmt::Display for FinixId\n    - impl: impl FinixState\n    - impl: impl FinixFlow\n\n**response.rs**\n  Add:\n    - struct: pub::FinixPaymentsResponse\n    - struct: pub::FinixIdentityResponse\n    - struct: pub::FinixInstrumentResponse\n    - struct: pub::FinixErrorResponse\n    - struct: pub::FinixErrorEmbedded\n    - struct: pub::FinixError\n\n**default_implementations.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9680, "pr_title": "feat(connector): Card non3ds | FINIX", "merged_at": "2025-10-09T13:19:07Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/finix.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers/request.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers/response.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["config/deployments/integration_test.toml", "cypress-tests/cypress/e2e/configs/Payment/Finix.js", "cypress-tests/cypress/e2e/configs/Payment/Utils.js"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 18, "functions_added": 39, "enums_added": 7, "fields_added": 566, "imports_added": 16, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Modified response handling logic to only populate `amount_captured` in router_data when payment status is `Charged`.\r\n- Removed the integrity check error that was preventing overpaid payments from being processed correctly.\r\n- The `PaymentsSyncData::get_captured_amount` method was ignoring the `amount_captured` parameter  and only consulting stored payment data and getting total_amount. To fix this added `.or(amount_captured.map(MinorUnit::new))` to the chain in `PaymentsSyncData::get_captured_amount`, ensuring the method prioritizes amount_captured from router_data similar to PaymentsAuthorizeData before consulting payment_data for total_amount.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/cryptopay/transformers.rs`\n   - `crates/router/src/connector/utils.rs`\n\n**2. Type Definitions**\n   - `crates/router/src/types.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9674, "pr_title": "fix(connector): [Cryptopay] fix amount_captured population logic in response handling", "merged_at": "2025-10-10T08:50:42Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/cryptopay/transformers.rs", "crates/router/src/connector/utils.rs"], "types": ["crates/router/src/types.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis pr completes [9400](https://github.com/juspay/hyperswitch/pull/9400)\r\n\r\n\r\nThis pr adds support to do MIT payment for subscription and adds an invoice sync job \r\nCreated Mit payment handler in subscription invoice_handler.rs\r\nand added create_invoice_sync_job after updating the invoice with the payment ID", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - `crates/router/src/core/subscription/payments_api_client.rs`\n   - ... and 1 more files\n\n**4. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/router/src/workflows/invoice_sync.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (23 changes)", "metadata": {"pr_number": 9668, "pr_title": "feat(payments): Add MIT payment functionality and update invoice handler", "merged_at": "2025-10-07T13:03:02Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/invoice.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/payments_api_client.rs", "crates/router/src/core/webhooks/incoming.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/router/src/workflows/invoice_sync.rs"]}, "change_types": {"structs_added": 1, "functions_added": 4, "fields_added": 23}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Just modified the error logging on change of password for getting better error details and description. This helps in knowing about error in more detail.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/user.rs`", "metadata": {"pr_number": 9667, "pr_title": "feat: Add attach_printable() for better error logging", "merged_at": "2025-10-15T16:19:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"core_business": ["crates/router/src/core/user.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This pull request introduces a new helper function to update the default fallback connector configuration whenever a merchant connector account (MCA) is updated. This ensures that changes to connector status (such as disabling or enabling) are accurately reflected in both merchant and profile configurations. The changes also include necessary imports and function calls to integrate this logic into the connector update flow.\r\n\r\n**Connector fallback configuration updates:**\r\n\r\n* Added the `update_default_fallback_on_mca_update` function in `routing/helpers.rs` to update merchant and profile default connector configurations based on the status of the updated MCA. The function ensures that disabled or inactive connectors are removed from the defaults, and enabled connectors are added if not already present.\r\n* Integrated the new helper into the `update_connector` flow in `admin.rs`, so it is triggered automatically after connector updates.\r\n\r\n**Imports and code organization:**\r\n\r\n* Added necessary imports for `update_default_fallback_on_mca_update` and related types in `admin.rs` and `helpers.rs` to support the new logic. [[1]](diffhunk://#diff-7e1b4a44fadc4de1af2a6abeb318b3ddf044177c44ba00731c33dbf4cdce92b7R25-R28) [[2]](diffhunk://#diff-ea48d33e52b2cb7edbbba1d236b55f946fdb2c178f8c76f4226818b3630c4658R6)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (10 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9659, "pr_title": "refactor(routing): update configs on updation of mca", "merged_at": "2025-10-07T16:53:24Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "connector"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"functions_added": 2, "fields_added": 10, "imports_added": 2, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Currently the API Call to the /user/auth endpoint displays only a 200::OK response code without providing a proper response body containing the authentication details for proper debugging.This PR Introduces a Response body of type CreateUserAuthenticationMethodReponse which contains members to be displayed in response to the API call to /user/auth.Modified the create_user_authentication_method as well to include the response body in addition to response code.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/events/user.rs`\n   - `crates/api_models/src/user.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/user.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (14 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9653, "pr_title": "feat: include response body for create_user_authentication_method", "merged_at": "2025-10-15T16:19:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"api_models": ["crates/api_models/src/events/user.rs", "crates/api_models/src/user.rs"], "core_business": ["crates/router/src/core/user.rs"]}, "change_types": {"structs_added": 1, "fields_added": 14, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nthis pr introduces apple pay hyperswitch decryption flow (simplified and manual) and predecrypt flow to tesouro connector.\r\nconnector does not support connector decryption flow. so, we throw an error in that case stating decrypted data is missing.\r\ntesouro does not have any required fields. neither do they have mentioned the supported countries and currencies on their website.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 2 more files\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**3. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (19 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 8375629c:\nFiles to modify:\n\n\n**tesouro.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: private::get_apple_pay_data\n    - function: private::try_from\n    - struct: pub::TesouroNetworkTokenPassThroughDetails\n    - enum: pub::TesouroWalletType\n    - impl: impl TryFrom<(&ApplePayWalletData, Option<&PaymentMethodToken>)> for TesouroPaymentMethodDetails", "metadata": {"pr_number": 9648, "pr_title": "feat(connector): [tesouro] apple pay", "merged_at": "2025-10-07T08:22:58Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/tesouro.rs", "crates/hyperswitch_connectors/src/connectors/tesouro/transformers.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 2, "functions_added": 2, "enums_added": 1, "fields_added": 19, "imports_added": 1, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "fix wasm for Loonio", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9647, "pr_title": "refactor(connector): fix wasm for Loonio", "merged_at": "2025-10-01T13:42:36Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis implementation adds comprehensive V2 API testing for payment void/cancel operations across different payment states. The feature introduces a new Cypress test suite that validates three critical scenarios: successfully voiding a payment in the requires_capture state `after manual capture confirmation`, attempting to void a payment in the `requires_payment_method` state, and attempting to void a completed payment in the `succeeded` state.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `.github/workflows/cypress-tests-runner.yml`\n   - `cypress-tests-v2/cypress/e2e/configs/Payment/Commons.js`\n   - `cypress-tests-v2/cypress/e2e/configs/Payment/Utils.js`\n   - ... and 6 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (108 changes)\n- Add conditional logic for feature flags or filtering (21 changes)", "metadata": {"pr_number": 9646, "pr_title": "test(cypress): add cypress tests for void payment in v2", "merged_at": "2025-10-07T17:28:46Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user"]}, "hierarchy": {"tests": [".github/workflows/cypress-tests-runner.yml", "cypress-tests-v2/cypress/e2e/configs/Payment/Commons.js", "cypress-tests-v2/cypress/e2e/configs/Payment/Utils.js", "cypress-tests-v2/cypress/e2e/configs/Payment/_Reusable.js", "cypress-tests-v2/cypress/e2e/spec/Payment/0001-[No3DS]Payments.cy.js", "cypress-tests-v2/cypress/e2e/spec/Payment/0003-VoidPayments.cy.js", "cypress-tests-v2/cypress/fixtures/imports.js", "cypress-tests-v2/cypress/fixtures/void_payment.json", "cypress-tests-v2/cypress/support/commands.js"]}, "change_types": {"fields_added": 108, "conditionals_added": 21}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nUse same order_id or max length 18 for all payment calls associated with an merchant order. \r\nWe need to store connector_metadata in case of MIT payments also so that MIT payments can be manually captured or cancelled later.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (10 changes)\n- Add conditional logic for feature flags or filtering (3 changes)", "metadata": {"pr_number": 9644, "pr_title": "fix(connectors): [Nexixpay] MIT & order_id fix", "merged_at": "2025-10-07T07:49:15Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 10, "conditionals_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This pull request introduces new domain models for subscriptions and invoices, and refactors the codebase to use these models instead of the previous Diesel-based models. The changes improve type safety and abstraction for subscription and invoice handling, and update relevant interfaces and function calls throughout the codebase to use the new models.\r\n\r\n**Domain Model Additions:**\r\n\r\n* Added a new `Subscription` domain model in `crates/hyperswitch_domain_models/src/subscription.rs`, including the `SubscriptionStatus` enum, conversion traits, and the `SubscriptionInterface` trait for standardized operations. Also added the `SubscriptionUpdate` struct with conversion logic.\r\n* Added a new `Invoice` domain model in `crates/hyperswitch_domain_models/src/invoice.rs`, including conversion traits, the `InvoiceInterface` trait for CRUD operations, and the `InvoiceUpdate` struct with conversion logic.\r\n\r\n**Refactoring and Integration:**\r\n\r\n* Refactored all subscription and invoice-related logic in `crates/router/src/core/subscription.rs` and `crates/router/src/core/subscription/billing_processor_handler.rs` to use the new domain models (`hyperswitch_domain_models::subscription::Subscription` and `hyperswitch_domain_models::invoice::Invoice`) instead of Diesel models. [[1]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL83-L95) [[2]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL201-R203) [[3]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL210-R213) [[4]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL320-R324) [[5]](diffhunk://#diff-adea1b33060886c62616ea56c46edb8f356525cbacea004da12e8819334cf27cL329-R334) [[6]](diffhunk://#diff-57a5a7402c9b28e022a6839808acf84b88808f76da82ce1c76a80660c8869ec6L168-R168) [[7]](diffhunk://#diff-bacee0b3d81189090ca0d5f72fc58118b681a7dd4aab772679f2dec2a585a073L13-R28) [[8]](diffhunk://#diff-bacee0b3d81189090ca0d5f72fc58118b681a7dd4aab772679f2dec2a585a073L47-R50)\r\n* Updated the invoice creation logic in `invoice_handler.rs` to use the new domain model and retrieve the merchant key store for secure operations.\r\n\r\n**Module Organization:**\r\n\r\n* Registered the new `invoice` and `subscription` modules in `crates/hyperswitch_domain_models/src/lib.rs` for proper integration with the rest of the domain models. [[1]](diffhunk://#diff-7ea431033335b7e3d2454c104f750be19973ad4f061a8cdb5c50af53ebdff00bR18) [[2]](diffhunk://#diff-7ea431033335b7e3d2454c104f750be19973ad4f061a8cdb5c50af53ebdff00bR41)\r\n\r\nThese changes lay the groundwork for improved maintainability and extensibility in handling subscriptions and invoices in the codebase.\r\n\r\n\r\n## How did you test it?\r\n\r\nCreate Billing Connector\r\n\r\n```\r\ncurl --location 'http://localhost:8080/account/merchant_1759737987/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: ****' \\\r\n--data '{\r\n    \"connector_type\": \"billing_processor\",\r\n    \"connector_name\": \"chargebee\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"HeaderKey\",\r\n        \"api_key\": \"****\"\r\n    },\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"connector_webhook_details\": {\r\n        \"merchant_secret\": \"hyperswitch\",\r\n        \"additional_secret\": \"hyperswitch\"\r\n    },\r\n    \"metadata\": {\r\n        \"site\": \"hyperswitch-juspay3-test\"\r\n    }\r\n}'\r\n```\r\n\r\n```\r\n{\r\n    \"connector_type\": \"billing_processor\",\r\n    \"connector_name\": \"chargebee\",\r\n    \"connector_label\": \"chargebee_US_default\",\r\n    \"merchant_connector_id\": \"mca_nyehf3o9gtzGgeVFzsx0\",\r\n    \"profile_id\": \"pro_Ba2HYJtnuKdJzv2SBizB\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"HeaderKey\",\r\n        \"api_key\": \"te**********************************MK\"\r\n    },\r\n    \"payment_methods_enabled\": null,\r\n    \"connector_webhook_details\": {\r\n        \"merchant_secret\": \"hyperswitch\",\r\n        \"additional_secret\": \"hyperswitch\"\r\n    },\r\n    \"metadata\": {\r\n        \"site\": \"hyperswitch-juspay3-test\"\r\n    },\r\n    \"test_mode\": null,\r\n    \"disabled\": false,\r\n    \"frm_configs\": null,\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"pm_auth_config\": null,\r\n    \"status\": \"active\",\r\n    \"additional_merchant_data\": null,\r\n    \"connector_wallets_details\": null\r\n}\r\n```\r\n\r\nUpdate profile to set the billing processor\r\n\r\n```\r\ncurl --location 'http://localhost:8080/account/merchant_1759737987/business_profile/pro_Ba2HYJtnuKdJzv2SBizB' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: ****' \\\r\n--data '{\r\n  \"billing_processor_id\": \"mca_nyehf3o9gtzGgeVFzsx0\"\r\n}'\r\n\r\n```\r\n```\r\n{\r\n    \"merchant_id\": \"merchant_1759737987\",\r\n    \"profile_id\": \"pro_Ba2HYJtnuKdJzv2SBizB\",\r\n    \"profile_name\": \"US_default\",\r\n    \"return_url\": \"https://google.com/success\",\r\n    \"enable_payment_response_hash\": true,\r\n    \"payment_response_hash_key\": \"BPIswjNm5ivN92rBE9J4ShmB2dfLVLeQ8DRnzY7cR7qsaUlfNpBgvnOCBWRfhR5e\",\r\n    \"redirect_to_merchant_with_http_post\": false,\r\n    \"webhook_details\": {\r\n        \"webhook_version\": \"1.0.1\",\r\n        \"webhook_username\": \"ekart_retail\",\r\n        \"webhook_password\": \"password_ekart@123\",\r\n        \"webhook_url\": \"https://webhook.site\",\r\n        \"payment_created_enabled\": true,\r\n        \"payment_succeeded_enabled\": true,\r\n        \"payment_failed_enabled\": true,\r\n        \"payment_statuses_enabled\": null,\r\n        \"refund_statuses_enabled\": null,\r\n        \"payout_statuses_enabled\": null\r\n    },\r\n    \"metadata\": null,\r\n    \"routing_algorithm\": null,\r\n    \"intent_fulfillment_time\": 900,\r\n    \"frm_routing_algorithm\": null,\r\n    \"payout_routing_algorithm\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"session_expiry\": 900,\r\n    \"payment_link_config\": null,\r\n    \"authentication_connector_details\": null,\r\n    \"use_billing_as_payment_method_billing\": true,\r\n    \"extended_card_info_config\": null,\r\n    \"collect_shipping_details_from_wallet_connector\": false,\r\n    \"collect_billing_details_from_wallet_connector\": false,\r\n    \"always_collect_shipping_details_from_wallet_connector\": false,\r\n    \"always_collect_billing_details_from_wallet_connector\": false,\r\n    \"is_connector_agnostic_mit_enabled\": false,\r\n    \"payout_link_config\": null,\r\n    \"outgoing_webhook_custom_http_headers\": null,\r\n    \"tax_connector_id\": null,\r\n    \"is_tax_connector_enabled\": false,\r\n    \"is_network_tokenization_enabled\": false,\r\n    \"is_auto_retries_enabled\": false,\r\n    \"max_auto_retries_enabled\": null,\r\n    \"always_request_extended_authorization\": null,\r\n    \"is_click_to_pay_enabled\": false,\r\n    \"authentication_product_ids\": null,\r\n    \"card_testing_guard_config\": {\r\n        \"card_ip_blocking_status\": \"disabled\",\r\n        \"card_ip_blocking_threshold\": 3,\r\n        \"guest_user_card_blocking_status\": \"disabled\",\r\n        \"guest_user_card_blocking_threshold\": 10,\r\n        \"customer_id_blocking_status\": \"disabled\",\r\n        \"customer_id_blocking_threshold\": 5,\r\n        \"card_testing_guard_expiry\": 3600\r\n    },\r\n    \"is_clear_pan_retries_enabled\": false,\r\n    \"force_3ds_challenge\": false,\r\n    \"is_debit_routing_enabled\": false,\r\n    \"merchant_business_country\": null,\r\n    \"is_pre_network_tokenization_enabled\": false,\r\n    \"acquirer_configs\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"merchant_category_code\": null,\r\n    \"merchant_country_code\": null,\r\n    \"dispute_polling_interval\": null,\r\n    \"is_manual_retry_enabled\": null,\r\n    \"always_enable_overcapture\": null,\r\n    \"is_external_vault_enabled\": \"skip\",\r\n    \"external_vault_connector_details\": null,\r\n    \"billing_processor_id\": \"mca_nyehf3o9gtzGgeVFzsx0\"\r\n}\r\n\r\n```\r\nCreate Customer\r\n\r\n```\r\ncurl --location 'http://localhost:8080/customers' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: ****' \\\r\n--data-raw '{\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"phone_country_code\": \"+65\",\r\n    \"description\": \"First customer\",\r\n    \"address\": {\r\n        \"line1\": \"1467\",\r\n        \"line2\": \"Harrison Street\",\r\n        \"line3\": \"Harrison Street\",\r\n        \"city\": \"San Fransico\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"94122\",\r\n        \"country\": \"US\",\r\n        \"first_name\": \"joseph\",\r\n        \"last_name\": \"Doe\"\r\n    },\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    }\r\n}'\r\n\r\n```\r\n```\r\n{\r\n    \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"guest@example.com\",\r\n    \"phone\": \"999999999\",\r\n    \"phone_country_code\": \"+65\",\r\n    \"description\": \"First customer\",\r\n    \"address\": {\r\n        \"city\": \"San Fransico\",\r\n        \"country\": \"US\",\r\n        \"line1\": \"1467\",\r\n        \"line2\": \"Harrison Street\",\r\n        \"line3\": \"Harrison Street\",\r\n        \"zip\": \"94122\",\r\n        \"state\": \"California\",\r\n        \"first_name\": \"joseph\",\r\n        \"last_name\": \"Doe\",\r\n        \"origin_zip\": null\r\n    },\r\n    \"created_at\": \"2025-10-06T08:08:37.562Z\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"default_payment_method_id\": null,\r\n    \"tax_registration_id\": null\r\n}\r\n```\r\n\r\n\r\nCreate Subscription\r\n\r\n```\r\ncurl --location 'http://localhost:8080/subscriptions/create' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'X-Profile-Id: pro_Ba2HYJtnuKdJzv2SBizB' \\\r\n--header 'api-key: ****' \\\r\n--data '{\r\n    \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\",\r\n    \"amount\": 14100,\r\n    \"currency\": \"USD\",\r\n    \"payment_details\": {\r\n        \"authentication_type\": \"no_three_ds\",\r\n        \"setup_future_usage\": \"off_session\",\r\n        \"capture_method\": \"automatic\",\r\n        \"return_url\": \"https://google.com\"\r\n    }\r\n}'\r\n```\r\n\r\n```\r\n{\r\n    \"id\": \"sub_Q1ttH0p1b50OtnDgZfrz\",\r\n    \"merchant_reference_id\": null,\r\n    \"status\": \"created\",\r\n    \"plan_id\": null,\r\n    \"profile_id\": \"pro_Ba2HYJtnuKdJzv2SBizB\",\r\n    \"client_secret\": \"sub_Q1ttH0p1b50OtnDgZfrz_secret_jXFTn0oMPowj2RqRUcWX\",\r\n    \"merchant_id\": \"merchant_1759737987\",\r\n    \"coupon_code\": null,\r\n    \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\"\r\n}\r\n```\r\n\r\nConfirm Subscription\r\n\r\n```\r\ncurl --location 'http://localhost:8080/subscriptions/sub_Q1ttH0p1b50OtnDgZfrz/confirm' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'X-Profile-Id: pro_Ba2HYJtnuKdJzv2SBizB' \\\r\n--header 'api-key: ****' \\\r\n--data '{\r\n    \"item_price_id\": \"cbdemo_enterprise-suite-monthly\",\r\n    \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\",\r\n    \"description\": \"Hello this is description\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"state\": \"zsaasdas\",\r\n            \"city\": \"Banglore\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"sdsdfsdf\",\r\n            \"line2\": \"hsgdbhd\",\r\n            \"line3\": \"alsksoe\",\r\n            \"zip\": \"571201\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"123456789\",\r\n            \"country_code\": \"+1\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"123456789\",\r\n            \"country_code\": \"+1\"\r\n        }\r\n    },\r\n    \"payment_details\": {\r\n        \"payment_method\": \"card\",\r\n        \"payment_method_type\": \"credit\",\r\n        \"payment_method_data\": {\r\n            \"card\": {\r\n                \"card_number\": \"4111111111111111\",\r\n                \"card_exp_month\": \"03\",\r\n                \"card_exp_year\": \"2030\",\r\n                \"card_holder_name\": \"CLBRW dffdg\",\r\n                \"card_cvc\": \"737\"\r\n            }\r\n        },\r\n        \"customer_acceptance\": {\r\n            \"acceptance_type\": \"online\",\r\n            \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n            \"online\": {\r\n                \"ip_address\": \"127.0.0.1\",\r\n                \"user_agent\": \"amet irure esse\"\r\n            }\r\n        }\r\n    }\r\n}'\r\n```\r\n\r\n```\r\n{\r\n    \"id\": \"sub_Q1ttH0p1b50OtnDgZfrz\",\r\n    \"merchant_reference_id\": null,\r\n    \"status\": \"active\",\r\n    \"plan_id\": null,\r\n    \"price_id\": null,\r\n    \"coupon\": null,\r\n    \"profile_id\": \"pro_Ba2HYJtnuKdJzv2SBizB\",\r\n    \"payment\": {\r\n        \"payment_id\": \"pay_uadWety0AlrsIpLa2Dt6\",\r\n        \"status\": \"succeeded\",\r\n        \"amount\": 14100,\r\n        \"currency\": \"USD\",\r\n        \"connector\": \"stripe\",\r\n        \"payment_method_id\": \"pm_HBp7wdIyHsvnta708kxF\",\r\n        \"payment_experience\": null,\r\n        \"error_code\": null,\r\n        \"error_message\": null,\r\n        \"payment_method_type\": \"credit\"\r\n    },\r\n    \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\",\r\n    \"invoice\": {\r\n        \"id\": \"invoice_UwA8TmKbXgxE1a7s6Nux\",\r\n        \"subscription_id\": \"sub_Q1ttH0p1b50OtnDgZfrz\",\r\n        \"merchant_id\": \"merchant_1759737987\",\r\n        \"profile_id\": \"pro_Ba2HYJtnuKdJzv2SBizB\",\r\n        \"merchant_connector_id\": \"mca_nyehf3o9gtzGgeVFzsx0\",\r\n        \"payment_intent_id\": \"pay_uadWety0AlrsIpLa2Dt6\",\r\n        \"payment_method_id\": \"pm_HBp7wdIyHsvnta708kxF\",\r\n        \"customer_id\": \"cus_EkIUbktzRFCHooI9Kylq\",\r\n        \"amount\": 14100,\r\n        \"currency\": \"USD\",\r\n        \"status\": \"payment_pending\"\r\n    },\r\n    \"billing_processor_subscription_id\": \"sub_Q1ttH0p1b50OtnDgZfrz\"\r\n}\r\n```\r\n\r\nScreenshots\r\n\r\n<img width=\"617\" height=\"229\" alt=\"Screenshot 2025-10-06 at 1 44 10 PM\" src=\"https://github.com/user-attachments/assets/f11a1fe2-d7e9-4d2b-99db-c68f35212b2b\" />\r\n\r\n<img width=\"436\" height=\"252\" alt=\"Screenshot 2025-10-06 at 1 44 18 PM\" src=\"https://github.com/user-attachments/assets/b66abdad-d216-4a12-84f0-653a1654ea7a\" />", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/invoice.rs`\n   - `crates/hyperswitch_domain_models/src/lib.rs`\n   - `crates/hyperswitch_domain_models/src/subscription.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - ... and 1 more files\n\n**3. Other**\n   - `crates/router/src/db.rs`\n   - `crates/router/src/db/invoice.rs`\n   - `crates/router/src/db/kafka_store.rs`\n   - ... and 5 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (53 changes)\n- Extend existing types with new fields (321 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 17986c3b:\nFiles to modify:\n\n\n**invoice.rs**\n  Add:\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::to_invoice\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - trait: pub::InvoiceInterface\n    - impl: impl super::behaviour::Conversion for Invoice\n    - impl: impl Invoice\n    - impl: impl super::behaviour::Conversion for InvoiceUpdate\n    - impl: impl InvoiceUpdate\n\n**lib.rs**\n  Add:\n    - mod: pub::invoice\n\n**subscription.rs**\n  Add:\n    - function: private::fmt\n    - function: pub::generate_and_set_client_secret\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - struct: pub::Subscription\n    - struct: pub::SubscriptionUpdate\n    - enum: pub::SubscriptionStatus\n    - trait: pub::SubscriptionInterface\n    - impl: impl std::fmt::Display for SubscriptionStatus\n    - impl: impl Subscription\n    - impl: impl super::behaviour::Conversion for Subscription\n    - impl: impl SubscriptionUpdate\n    - impl: impl super::behaviour::Conversion for SubscriptionUpdate\n\n**subscription.rs**\n  Add:\n    - function: private::fmt\n    - function: pub::generate_and_set_client_secret\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - struct: pub::Subscription\n    - struct: pub::SubscriptionUpdate\n    - enum: pub::SubscriptionStatus\n    - trait: pub::SubscriptionInterface\n    - impl: impl std::fmt::Display for SubscriptionStatus\n    - impl: impl Subscription\n    - impl: impl super::behaviour::Conversion for Subscription\n    - impl: impl SubscriptionUpdate\n    - impl: impl super::behaviour::Conversion for SubscriptionUpdate\n\n**billing_processor_handler.rs**\n  Modify existing code\n\n**invoice_handler.rs**\n  Modify existing code\n\n**subscription_handler.rs**\n  Modify existing code\n\n**db.rs**\n  Remove:\n    - mod: pub::invoice\n    - mod: pub::subscription\n\n**invoice.rs**\n  Add:\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::to_invoice\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - trait: pub::InvoiceInterface\n    - impl: impl super::behaviour::Conversion for Invoice\n    - impl: impl Invoice\n    - impl: impl super::behaviour::Conversion for InvoiceUpdate\n    - impl: impl InvoiceUpdate\n\n**kafka_store.rs**\n  Add:\n    - function: private::insert_invoice_entry\n    - function: private::find_invoice_by_invoice_id\n    - function: private::update_invoice_entry\n    - function: private::get_latest_invoice_for_subscription\n    - function: private::insert_subscription_entry\n    - function: private::find_by_merchant_id_subscription_id\n    - function: private::update_subscription_entry\n    - impl: impl InvoiceInterface for KafkaStore\n    - impl: impl SubscriptionInterface for KafkaStore\n\n**subscription.rs**\n  Add:\n    - function: private::fmt\n    - function: pub::generate_and_set_client_secret\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - struct: pub::Subscription\n    - struct: pub::SubscriptionUpdate\n    - enum: pub::SubscriptionStatus\n    - trait: pub::SubscriptionInterface\n    - impl: impl std::fmt::Display for SubscriptionStatus\n    - impl: impl Subscription\n    - impl: impl super::behaviour::Conversion for Subscription\n    - impl: impl SubscriptionUpdate\n    - impl: impl super::behaviour::Conversion for SubscriptionUpdate\n\n**invoice_sync.rs**\n  Modify existing code\n\n**invoice.rs**\n  Add:\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::to_invoice\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - trait: pub::InvoiceInterface\n    - impl: impl super::behaviour::Conversion for Invoice\n    - impl: impl Invoice\n    - impl: impl super::behaviour::Conversion for InvoiceUpdate\n    - impl: impl InvoiceUpdate\n\n**lib.rs**\n  Add:\n    - mod: pub::invoice\n\n**subscription.rs**\n  Add:\n    - function: private::fmt\n    - function: pub::generate_and_set_client_secret\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - function: pub::new\n    - function: private::convert\n    - function: private::convert_back\n    - function: private::construct_new\n    - struct: pub::Subscription\n    - struct: pub::SubscriptionUpdate\n    - enum: pub::SubscriptionStatus\n    - trait: pub::SubscriptionInterface\n    - impl: impl std::fmt::Display for SubscriptionStatus\n    - impl: impl Subscription\n    - impl: impl super::behaviour::Conversion for Subscription\n    - impl: impl SubscriptionUpdate\n    - impl: impl super::behaviour::Conversion for SubscriptionUpdate", "metadata": {"pr_number": 9640, "pr_title": "feat(subscription): domain_model for subscription and invoice", "merged_at": "2025-10-09T10:51:00Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/invoice.rs", "crates/hyperswitch_domain_models/src/lib.rs", "crates/hyperswitch_domain_models/src/subscription.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/subscription_handler.rs"], "other": ["crates/router/src/db.rs", "crates/router/src/db/invoice.rs", "crates/router/src/db/kafka_store.rs", "crates/router/src/db/subscription.rs", "crates/router/src/workflows/invoice_sync.rs", "crates/storage_impl/src/invoice.rs", "crates/storage_impl/src/lib.rs", "crates/storage_impl/src/subscription.rs"]}, "change_types": {"structs_added": 4, "functions_added": 53, "enums_added": 1, "fields_added": 321, "imports_added": 19}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nhttps://github.com/juspay/hyperswitch/pull/9629\r\nThis pull request enhances cache management for connector creation by introducing a new mechanism to invalidate related cache entries whenever a new connector is added. The main change is the addition of the `redact_cgraph_cache` function, which ensures that outdated cgraph cache data is cleared for the relevant merchant and profile, preventing stale data issues.\r\n\r\n**Cache invalidation improvements:**\r\n\r\n* Added the `redact_cgraph_cache` function in `crates/router/src/core/routing/helpers.rs` to invalidate both payouts and payments cgraph cache entries for a given merchant and profile. This function uses Redis and publishes cache invalidation events.\r\n* Integrated the `redact_cgraph_cache` call into the connector creation flow in `crates/router/src/core/admin.rs`, ensuring cache is redacted whenever a new connector is created.\r\n* Imported the `redact_cgraph_cache` helper function in `crates/router/src/core/admin.rs` to enable its usage in the admin logic.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9639, "pr_title": "refactor(core): add cache redaction for cgraph", "merged_at": "2025-10-01T11:30:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing/helpers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 3, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd support in subscription to get an estimate for the provided plan_price", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/lib.rs`\n   - `crates/api_models/src/subscription.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n\n**5. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/subscription.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (55 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 15bc0a3b:\nFiles to modify:\n\n\n**lib.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - struct: pub::EstimateSubscriptionQuery\n    - struct: pub::EstimateSubscriptionResponse\n    - struct: pub::SubscriptionLineItem\n    - impl: impl ApiEventMetric for EstimateSubscriptionQuery\n    - impl: impl ApiEventMetric for EstimateSubscriptionResponse\n\n**chargebee.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**flow_common_types.rs**\n  Remove:\n    - struct: pub::GetSubscriptionEstimateData\n  Add:\n    - struct: pub::GetSubscriptionEstimateData\n\n**subscriptions.rs**\n  Add:\n    - function: private::from\n    - function: private::from\n    - impl: impl From<GetSubscriptionEstimateResponse> for api_models::subscription::EstimateSubscriptionResponse\n    - impl: impl From<SubscriptionLineItem> for api_models::subscription::SubscriptionLineItem\n\n**conversion_impls.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - struct: pub::EstimateSubscriptionQuery\n    - struct: pub::EstimateSubscriptionResponse\n    - struct: pub::SubscriptionLineItem\n    - impl: impl ApiEventMetric for EstimateSubscriptionQuery\n    - impl: impl ApiEventMetric for EstimateSubscriptionResponse\n\n**billing_processor_handler.rs**\n  Add:\n    - function: pub::get_subscription_estimate\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - struct: pub::EstimateSubscriptionQuery\n    - struct: pub::EstimateSubscriptionResponse\n    - struct: pub::SubscriptionLineItem\n    - impl: impl ApiEventMetric for EstimateSubscriptionQuery\n    - impl: impl ApiEventMetric for EstimateSubscriptionResponse\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9637, "pr_title": "feat(subscription): Add endpoint to get Subscription estimate", "merged_at": "2025-10-08T14:07:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/lib.rs", "crates/api_models/src/subscription.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/subscription.rs"]}, "change_types": {"structs_added": 4, "functions_added": 6, "fields_added": 55, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Add Cards Payout through Nuvei\r\n- Add Webhook support for Payouts in Nuvei\r\n- Propagate error from failure response in payouts\r\n- Create webhook_url in PayoutsData Request to pass to Psp's\r\n\r\nNote: hotfix pr raised against https://github.com/juspay/hyperswitch/pull/9618", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/utils.rs`\n\n**4. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 6 more files\n\n**5. Tests**\n   - `config/deployments/integration_test.toml`\n\n**6. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 1 more files\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (16 changes)\n- Extend existing types with new fields (82 changes)\n- Add conditional logic for feature flags or filtering (3 changes)", "metadata": {"pr_number": 9635, "pr_title": "feat(payouts): [Nuvei] add payout flows", "merged_at": "2025-10-01T12:46:51Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payouts.rs", "crates/router/src/core/utils.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/nuvei.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/tests/connectors/utils.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 5, "functions_added": 16, "enums_added": 1, "fields_added": 82, "imports_added": 4, "conditionals_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nImplemented payment method: Card no-3ds\r\nImplemented Flows\r\n1. Authorization\r\n2. Capture\r\n3. Void\r\n4. Refund\r\n5. Psync\r\n6. Rsync\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n<details>\r\n<summary>MCA </summary>\r\n```sh\r\ncurl --location 'http://localhost:8080/account/postman_merchant_GHAction_4cb4b491-da52-43a7-8fff-360261ebd79c/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_8XGtpjTSBeWNmsMy7KR8pdMkGBcvRI6OhCMmzxQcAVj8yjZ8Gp7MCjtNZyJWeFSx' \\\r\n--data '{\r\n    \"connector_type\": \"payment_processor\",\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"connector_name\": \"tesouro\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"SignatureKey\",\r\n        \"api_key\": \"nTEAZfcT**********\",\r\n        \"api_secret\": \"4T4su51E2FbR**************/\",\r\n        \"key1\": \"a82c239a-54a7-403f**************\"\r\n    },\r\n    \"test_mode\": false,\r\n    \"disabled\": false,\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"apple_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"skrill\",\r\n                    \"payment_experience\": \"redirect_to_url\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": false,\r\n                    \"installment_payment_enabled\": false\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"bank_redirect\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"interac\",\r\n                    \"payment_experience\": \"redirect_to_url\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n         {\r\n            \"payment_method\": \"gift_card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"pay_safe_card\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \r\n}'\r\n```\r\nResponse\r\n```json\r\n{\r\n    \"connector_type\": \"payment_processor\",\r\n    \"connector_name\": \"tesouro\",\r\n    \"connector_label\": \"tesouro_US_default\",\r\n    \"merchant_connector_id\": \"mca_M3Q1V50G2ytWac7zWmOF\",\r\n    \"profile_id\": \"pro_eKnWPC646SRcs9KRGG0n\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"SignatureKey\",\r\n        \"api_key\": \"nT***********************ow\",\r\n        \"key1\": \"a8********************************d3\",\r\n        \"api_secret\": \"4T************************************f/\"\r\n    },\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"payment_experience\": null,\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"payment_experience\": null,\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"apple_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"skrill\",\r\n                    \"payment_experience\": \"redirect_to_url\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": false,\r\n                    \"installment_payment_enabled\": false\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"bank_redirect\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"interac\",\r\n                    \"payment_experience\": \"redirect_to_url\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"gift_card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"pay_safe_card\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"connector_webhook_details\": null,\r\n    \"metadata\": null,\r\n    \"test_mode\": false,\r\n    \"disabled\": false,\r\n    \"frm_configs\": null,\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"pm_auth_config\": null,\r\n    \"status\": \"active\",\r\n    \"additional_merchant_data\": null,\r\n    \"connector_wallets_details\": null\r\n}\r\n\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary> Automatic no 3ds Card payment  and Refund </summary>\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data-raw '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"email\": \"hello@123.com\",\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4111111111111111\",\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \r\n            \"card_cvc\": \"1111\"\r\n            \r\n        }\r\n    },\r\n\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"CA\",\r\n            \"state\": \"ab\",\r\n            \r\n            \r\n            \r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    }\r\n}'\r\n```\r\nResponse\r\n```json\r\n{\r\n    \"payment_id\": \"pay_SVsgv5wtaqOdSpb76MVI\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_SVsgv5wtaqOdSpb76MVI_secret_ukZI5V7J8cUQsghCx9Be\",\r\n    \"created\": \"2025-10-01T05:33:30.915Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"2a65a3e0-9e88-11f0-9a42-dc24789d2db7\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T05:48:30.915Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T05:33:31.364Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nRefund the transaction\r\n\r\n```\r\ncurl --location 'http://localhost:8080/refunds' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data '{\r\n    \"payment_id\": \"pay_SVsgv5wtaqOdSpb76MVI\",\r\n    \r\n    \"reason\": \"Customer returned product\",\r\n    \"refund_type\": \"instant\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    }    \r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n```json\r\n{\r\n    \"refund_id\": \"ref_BH1KVGCPkjKW6jKtLpWN\",\r\n    \"payment_id\": \"pay_SVsgv5wtaqOdSpb76MVI\",\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"status\": \"pending\",\r\n    \"reason\": \"Customer returned product\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"error_message\": null,\r\n    \"error_code\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"created_at\": \"2025-10-01T05:35:46.545Z\",\r\n    \"updated_at\": \"2025-10-01T05:35:48.609Z\",\r\n    \"connector\": \"tesouro\",\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"split_refunds\": null,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null\r\n}\r\n```\r\n\r\nRsync\r\n\r\n```\r\ncurl --location 'http://localhost:8080/refunds/ref_BH1KVGCPkjKW6jKtLpWN' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL'\r\n```\r\nResponse\r\n```json\r\n{\r\n    \"refund_id\": \"ref_BH1KVGCPkjKW6jKtLpWN\",\r\n    \"payment_id\": \"pay_SVsgv5wtaqOdSpb76MVI\",\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"status\": \"succeeded\",\r\n    \"reason\": \"Customer returned product\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"error_message\": null,\r\n    \"error_code\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"created_at\": \"2025-10-01T05:35:46.545Z\",\r\n    \"updated_at\": \"2025-10-01T05:36:42.990Z\",\r\n    \"connector\": \"tesouro\",\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"split_refunds\": null,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Manual Payment and Capture </summary>\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data-raw '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"manual\",\r\n    \"email\": \"hello@123.com\",\r\n\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4111111111111111\",\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \r\n            \"card_cvc\": \"1111\"\r\n            \r\n        }\r\n    },\r\n\r\n   \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"CA\",\r\n            \"state\": \"ab\",\r\n            \r\n            \r\n            \r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    }\r\n}'\r\n```\r\n\r\nResponse\r\n```json\r\n{\r\n    \"payment_id\": \"pay_OZP40FmatEF5cs67oZiX\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"requires_capture\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 100,\r\n    \"amount_received\": null,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_OZP40FmatEF5cs67oZiX_secret_8H4Yrw0NUSU8Cbzq2s9j\",\r\n    \"created\": \"2025-10-01T06:07:43.490Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"f1bde650-9e8c-11f0-b70a-028553774ff4\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T06:22:43.490Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T06:07:43.817Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nCapture\r\n\r\n```sh\r\ncurl --location 'http://localhost:8080/payments/pay_OZP40FmatEF5cs67oZiX/capture' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data '{\r\n    \"amount_to_capture\": 10\r\n    \r\n    \r\n}'\r\n\r\n```\r\n\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_OZP40FmatEF5cs67oZiX\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"partially_captured\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_OZP40FmatEF5cs67oZiX_secret_8H4Yrw0NUSU8Cbzq2s9j\",\r\n    \"created\": \"2025-10-01T06:07:43.490Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"151c88db-9e8d-11f0-b47c-e0f5e6f853d2\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T06:22:43.490Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T06:08:43.141Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Manual Capture and Void </summary>\r\n\r\n```sh\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data-raw '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"manual\",\r\n    \"email\": \"hello@123.com\",\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4111111111111111\",\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \r\n            \"card_cvc\": \"1111\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"CA\",\r\n            \"state\": \"ab\",\r\n            \r\n            \r\n            \r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    }\r\n}'\r\n\r\n```\r\n\r\nResponse\r\n```json\r\n{\r\n    \"payment_id\": \"pay_pSZnmh27wWa0DL3kj6A6\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"requires_capture\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 100,\r\n    \"amount_received\": null,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_pSZnmh27wWa0DL3kj6A6_secret_lZpYQsWHUWSrZ9U6altL\",\r\n    \"created\": \"2025-10-01T06:10:29.198Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"549579c0-9e8d-11f0-84dd-40baeaafcfb0\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T06:25:29.198Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T06:10:29.617Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nVoid\r\n\r\n```sh\r\ncurl --location 'http://localhost:8080/payments/pay_pSZnmh27wWa0DL3kj6A6/cancel' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL' \\\r\n--data '{\"cancellation_reason\":\"requested_by_customer\"}'\r\n```\r\n\r\nResponse\r\n```json\r\n{\r\n    \"payment_id\": \"pay_pSZnmh27wWa0DL3kj6A6\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"processing\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_pSZnmh27wWa0DL3kj6A6_secret_lZpYQsWHUWSrZ9U6altL\",\r\n    \"created\": \"2025-10-01T06:10:29.198Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": \"requested_by_customer\",\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"78a30d77-9e8d-11f0-83af-ca1c1383be41\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T06:25:29.198Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T06:11:30.100Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nPsync\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments/pay_pSZnmh27wWa0DL3kj6A6?force_sync=true' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_CK71LxQKH9Ca9ALpjDMLqTvPdsyUMWegZaSZl2GPErwxQffyESKr0PTWfRtBiHRL'\r\n```\r\n\r\nResponse\r\n```json\r\n{\r\n    \"payment_id\": \"pay_pSZnmh27wWa0DL3kj6A6\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_9f0a82e1-b575-4a82-933e-2c7ac56d04a8\",\r\n    \"status\": \"cancelled\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"tesouro\",\r\n    \"client_secret\": \"pay_pSZnmh27wWa0DL3kj6A6_secret_lZpYQsWHUWSrZ9U6altL\",\r\n    \"created\": \"2025-10-01T06:10:29.198Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": null,\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": null,\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": \"requested_by_customer\",\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"78a30d77-9e8d-11f0-83af-ca1c1383be41\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Za2p72f3BBR1hq7Y1RSc\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_r0WktD3si60vWLU2A0fP\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-10-01T06:25:29.198Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-10-01T06:12:05.583Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"request_extended_authorization\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n> Note: Due to fast execution of cypress testcases, connector randomly returns processing status - causing some Testcases to fail randomly. \r\n\r\n<img width=\"621\" height=\"635\" alt=\"Screenshot 2025-10-01 at 11 43 45 AM\" src=\"https://github.com/user-attachments/assets/613be43b-d154-455a-8a95-b2bec65220ef\" />\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 7 more files\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `cypress-tests/cypress/e2e/configs/Payment/Tesouro.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n\n**5. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n   - ... and 1 more files\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (39 changes)\n- Implement new functions (38 changes)\n- Extend existing types with new fields (890 changes)\n- Add conditional logic for feature flags or filtering (12 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit fbd92fa1:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**tesouro.rs**\n  Modify existing code\n\n**transformers.rs**\n  Remove:\n    - function: private::try_from\n    - struct: pub::TesouroPaymentsRequest\n  Add:\n    - function: private::get_acceptor_id\n    - struct: pub::GenericTesouroRequest\n    - struct: pub::TesouroApiResponseData\n    - struct: pub::TransactionResponseData\n    - struct: pub::TesouroCaptureResponseData\n    - struct: pub::CaptureCustomerInitiatedTransactionResponseData\n    - struct: pub::TesouroVoidResponseData\n    - struct: pub::ReverseTransactionResponseData\n    - struct: pub::RefundTransactionResponseData\n    - struct: pub::TesouroRefundPreviousPaymentResponseData\n    - enum: pub::TesouroApiResponse\n    - enum: pub::CaptureTransactionResponseType\n    - enum: pub::ReverseTransactionResponseType\n    - enum: pub::RefundTransactionResponseType\n    - impl: impl TesouroAuthType\n    - mod: pub::tesouro_queries\n    - mod: pub::tesouro_constants\n\n**payment_connector_required_fields.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9632, "pr_title": "feat(connectors): [Tesouro] Integrate no-threeds cards", "merged_at": "2025-10-01T13:05:07Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/tesouro.rs", "crates/hyperswitch_connectors/src/connectors/tesouro/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["config/deployments/integration_test.toml", "cypress-tests/cypress/e2e/configs/Payment/Tesouro.js", "cypress-tests/cypress/e2e/configs/Payment/Utils.js"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 39, "functions_added": 38, "enums_added": 12, "fields_added": 890, "imports_added": 5, "conditionals_added": 12}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request enhances cache management for connector creation by introducing a new mechanism to invalidate related cache entries whenever a new connector is added. The main change is the addition of the `redact_cgraph_cache` function, which ensures that outdated cgraph cache data is cleared for the relevant merchant and profile, preventing stale data issues.\r\n\r\n**Cache invalidation improvements:**\r\n\r\n* Added the `redact_cgraph_cache` function in `crates/router/src/core/routing/helpers.rs` to invalidate both payouts and payments cgraph cache entries for a given merchant and profile. This function uses Redis and publishes cache invalidation events.\r\n* Integrated the `redact_cgraph_cache` call into the connector creation flow in `crates/router/src/core/admin.rs`, ensuring cache is redacted whenever a new connector is created.\r\n* Imported the `redact_cgraph_cache` helper function in `crates/router/src/core/admin.rs` to enable its usage in the admin logic.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/routing/helpers.rs`\n   - `crates/router/src/core/subscription.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9629, "pr_title": "refactor(core): add cache redaction for cgraph", "merged_at": "2025-10-01T08:33:13Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/admin.rs", "crates/router/src/core/routing/helpers.rs", "crates/router/src/core/subscription.rs"]}, "change_types": {"functions_added": 1, "fields_added": 3, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n1)Wasm changes \r\n2) Fix the api contract by introducing the sandbox field", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9628, "pr_title": "fix(connector): [Gigadat] Fix the Wasm/api-contract", "merged_at": "2025-09-30T16:24:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/gigadat.rs", "crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs"]}, "change_types": {"fields_added": 5}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR adds two changes\r\n1. Updates `Sepa` to `SepaBankTransfer` for dynamic required fields for payouts\r\n2. Adds PayoutCurrency as a rule to be set while configuring payout routing on dashboard", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Type Definitions**\n   - `crates/euclid/src/types.rs`\n\n**2. Configuration Files**\n   - `crates/router/src/configs/defaults/payout_required_fields.rs`\n\n**3. Other**\n   - `crates/euclid/src/frontend/dir.rs`\n   - `crates/euclid_wasm/src/lib.rs`\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9626, "pr_title": "feat(payouts): add payout currency in wasm crate", "merged_at": "2025-09-30T14:41:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"types": ["crates/euclid/src/types.rs"], "config": ["crates/router/src/configs/defaults/payout_required_fields.rs"], "other": ["crates/euclid/src/frontend/dir.rs", "crates/euclid_wasm/src/lib.rs"]}, "change_types": {"conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR adds support for webhook_url in v2 PaymentsRequest. It allows merchants to pass their own webhook URL instead of creating one in Hyperswitch. This change is applicable only to v2 tunnel flow.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n   - `crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs`\n   - `crates/router/src/core/payments/operations/payment_confirm_intent.rs`\n   - ... and 2 more files\n\n**4. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (8 changes)", "metadata": {"pr_number": 9625, "pr_title": "refactor(core): add webhook_url for v2 tunnel", "merged_at": "2025-10-08T15:25:10Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs"], "core_business": ["crates/router/src/core/payment_methods.rs", "crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs", "crates/router/src/core/payments/operations/payment_confirm_intent.rs", "crates/router/src/core/payments/operations/proxy_payments_intent.rs", "crates/router/src/core/payments/transformers.rs"], "other": ["api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"fields_added": 8}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Implement interac Bank Redirect Payment Method\r\n- Payments\r\n- Psync", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 8 more files\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**5. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (64 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c1f8b961:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**loonio.rs**\n  Modify existing code\n\n**transformers.rs**\n  Remove:\n    - function: private::try_from\n    - struct: pub::LoonioPaymentsRequest\n    - struct: pub::LoonioCard\n    - impl: impl TryFrom<&LoonioRouterData<&PaymentsAuthorizeRouterData>> for LoonioPaymentsRequest\n\n**constants.rs**\n  Modify existing code\n\n**payment_connector_required_fields.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9620, "pr_title": "feat(connector): [Loonio] Implement interac Bank Redirect Payment Method", "merged_at": "2025-09-30T15:41:22Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/loonio.rs", "crates/hyperswitch_connectors/src/connectors/loonio/transformers.rs", "crates/hyperswitch_connectors/src/constants.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 4, "functions_added": 4, "enums_added": 2, "fields_added": 64, "imports_added": 5}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR introduces improvements to the **Customer page API**:\r\n\r\nAdded **search bar functionality** to filter customers by `customer_id`.\r\n\r\nThese changes enhance API usability and improve performance when handling large customer datasets.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/customers.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/query/customers.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/customer.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/customers.rs`\n   - `crates/router/src/core/locker_migration.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (9 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n- Modify database queries (7 changes)", "metadata": {"pr_number": 9619, "pr_title": "Feat(Customer): Added search Feature to the Customer Page", "merged_at": "2025-10-03T10:06:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/customers.rs"], "database": ["crates/diesel_models/src/query/customers.rs"], "domain": ["crates/hyperswitch_domain_models/src/customer.rs"], "core_business": ["crates/router/src/core/customers.rs", "crates/router/src/core/locker_migration.rs"]}, "change_types": {"functions_added": 1, "fields_added": 9, "conditionals_added": 2, "database_queries": 7}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Add Cards Payout through Nuvei\r\n- Add Webhook support for Payouts in Nuvei\r\n- Propagate error from failure response in payouts\r\n- Create webhook_url in PayoutsData Request to pass to Psp's", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/utils.rs`\n\n**4. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 6 more files\n\n**5. Tests**\n   - `config/deployments/integration_test.toml`\n\n**6. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 1 more files\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (16 changes)\n- Extend existing types with new fields (82 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 3b5302c7:\nFiles to modify:\n\n\n**enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**nuvei.rs**\n  Add:\n    - function: private::get_url\n    - function: private::get_headers\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::has_payout_prefix\n    - impl: impl api::Payouts for Nuvei\n    - impl: impl api::PayoutFulfill for Nuvei\n    - impl: impl ConnectorIntegration<PoFulfill, PayoutsData, PayoutsResponseData> for Nuvei\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::from\n    - function: pub::map_notification_to_event_for_payout\n    - struct: pub::NuveiPayoutRequest\n    - struct: pub::NuveiPayoutUrlDetails\n    - struct: pub::NuveiPayoutCardData\n    - struct: pub::NuveiPayoutSuccessResponse\n    - struct: pub::NuveiPayoutErrorResponse\n    - enum: pub::NuveiPayoutResponse\n    - impl: impl TryFrom<api_models::payouts::PayoutMethodData> for NuveiPayoutCardData\n    - impl: impl TryFrom<&types::PayoutsRouterData<F>> for NuveiPayoutRequest\n    - impl: impl TryFrom<PayoutsResponseRouterData<PoFulfill, NuveiPayoutResponse>> for types::PayoutsRouterData<PoFulfill>\n    - impl: impl From<NuveiTransactionStatus> for enums::PayoutStatus\n    - impl: impl From<NuveiPaymentStatus> for enums::PayoutStatus\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_webhook_url\n\n**router_request_types.rs**\n  Modify existing code\n\n**payouts.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_webhook_url\n\n**utils.rs**\n  Add:\n    - function: private::get_webhook_url", "metadata": {"pr_number": 9618, "pr_title": "feat(payouts): [Nuvei] add payout flows", "merged_at": "2025-09-30T16:58:00Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payouts.rs", "crates/router/src/core/utils.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/nuvei.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/tests/connectors/utils.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 5, "functions_added": 16, "enums_added": 1, "fields_added": 82, "imports_added": 4, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd new api endpoint for post authentication sync in modular authentication", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/unified_authentication_service.rs`\n\n**2. Other**\n   - `crates/router/src/routes/app.rs`", "metadata": {"pr_number": 9615, "pr_title": "fix(router): add new api endpoint for post authentication sync in modular authentication", "merged_at": "2025-09-30T12:34:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/unified_authentication_service.rs"], "other": ["crates/router/src/routes/app.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nStop sending back mandate reference from connector response in case of non-CIT payments to avoid making connector mandate details entry in payment_methods table. This should only be done in case of CIT payments to store correct PSP token which will be used in MIT payments.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (12 changes)", "metadata": {"pr_number": 9614, "pr_title": "fix(connectors): [Nexixpay] fix for failing MITs", "merged_at": "2025-09-30T14:08:59Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"fields_added": 12}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR introduces two new API:-\r\n1) To get data from Redis for monitoring purpose **v2/recovery/data-backfill/redis-data/:id?key_type=Status**\r\n2) To update additional token data(error code, hard decline flag and schedule at fields) **v2/recovery/data-backfill/update-token**", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/revenue_recovery_data_backfill.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery_data_backfill.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/storage/revenue_recovery_redis_operation.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**5. Other**\n   - `crates/redis_interface/src/commands.rs`\n   - `crates/router/src/routes.rs`\n   - `crates/router/src/routes/app.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (10 changes)\n- Extend existing types with new fields (32 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit af159867:\nFiles to modify:\n\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::deserialize\n    - struct: pub::GetRedisDataQuery\n    - struct: pub::RedisDataResponse\n    - struct: pub::UpdateTokenStatusRequest\n    - struct: pub::UpdateTokenStatusResponse\n    - enum: pub::RedisKeyType\n    - enum: pub::ScheduledAtUpdate\n    - impl: impl ApiEventMetric for RedisDataResponse\n    - impl: impl ApiEventMetric for UpdateTokenStatusRequest\n    - impl: impl ApiEventMetric for UpdateTokenStatusResponse\n    - impl: impl Deserialize<'de> for ScheduledAtUpdate\n\n**commands.rs**\n  Add:\n    - function: pub::get_ttl\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::deserialize\n    - struct: pub::GetRedisDataQuery\n    - struct: pub::RedisDataResponse\n    - struct: pub::UpdateTokenStatusRequest\n    - struct: pub::UpdateTokenStatusResponse\n    - enum: pub::RedisKeyType\n    - enum: pub::ScheduledAtUpdate\n    - impl: impl ApiEventMetric for RedisDataResponse\n    - impl: impl ApiEventMetric for UpdateTokenStatusRequest\n    - impl: impl ApiEventMetric for UpdateTokenStatusResponse\n    - impl: impl Deserialize<'de> for ScheduledAtUpdate\n\n**routes.rs**\n  Add:\n    - mod: pub::revenue_recovery_redis\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::deserialize\n    - struct: pub::GetRedisDataQuery\n    - struct: pub::RedisDataResponse\n    - struct: pub::UpdateTokenStatusRequest\n    - struct: pub::UpdateTokenStatusResponse\n    - enum: pub::RedisKeyType\n    - enum: pub::ScheduledAtUpdate\n    - impl: impl ApiEventMetric for RedisDataResponse\n    - impl: impl ApiEventMetric for UpdateTokenStatusRequest\n    - impl: impl ApiEventMetric for UpdateTokenStatusResponse\n    - impl: impl Deserialize<'de> for ScheduledAtUpdate\n\n**revenue_recovery_redis.rs**\n  Add:\n    - function: pub::get_revenue_recovery_redis_data\n\n**revenue_recovery_redis_operation.rs**\n  Add:\n    - function: pub::get_redis_key_data_raw\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9611, "pr_title": "feat(revenue_recovery): add support to fetch data and update additional token data in redis", "merged_at": "2025-10-01T15:38:04Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/revenue_recovery_data_backfill.rs"], "core_business": ["crates/router/src/core/revenue_recovery_data_backfill.rs"], "types": ["crates/router/src/types/storage/revenue_recovery_redis_operation.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/redis_interface/src/commands.rs", "crates/router/src/routes.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/revenue_recovery_data_backfill.rs", "crates/router/src/routes/revenue_recovery_redis.rs"]}, "change_types": {"structs_added": 4, "functions_added": 10, "enums_added": 2, "fields_added": 32, "imports_added": 9, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Deprecated groups include:\r\n\r\n1. organizationManage\r\n2. merchantDetailsView\r\n3. merchantDetailsManage\r\n\r\nThese permissions are equivalent to\r\norganizationManage == accountManage \r\nmerchantDetailsManage == accountManage\r\nmerchantDetailsView == accountView\r\n\r\nAlso earlier validation blocks organizationManage when creating custom roles because this permission was only available for predefined roles. We will be removing that validation check as the permission itself doesn't exists now.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Utils**\n   - `crates/router/src/utils/user_role.rs`\n\n**2. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/router/src/services/authorization/info.rs`\n   - `crates/router/src/services/authorization/permission_groups.rs`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (4 changes)", "metadata": {"pr_number": 9604, "pr_title": "refactor(users): remove deprecated permission groups", "merged_at": "2025-10-16T07:26:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant"]}, "hierarchy": {"utils": ["crates/router/src/utils/user_role.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/router/src/services/authorization/info.rs", "crates/router/src/services/authorization/permission_groups.rs", "crates/router/src/services/authorization/roles/predefined_roles.rs", "migrations/2025-10-06-111411_deprecated_roles_backfill/down.sql", "migrations/2025-10-06-111411_deprecated_roles_backfill/up.sql"]}, "change_types": {"conditionals_added": 1, "database_queries": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- RELATED PR : https://github.com/juspay/hyperswitch/pull/9581\r\n\r\n\r\n- Refunds via authorizedot net are getting into `pending` state where no connector call is made\r\n- This happens when `connector_metadata` is empty in attempt table\r\n- In usual cases `connector_metadata` is not empty but this happened via ucs.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9602, "pr_title": "fix(authorizedotnet): refund via ucs missing connector_metadata", "merged_at": "2025-09-30T06:40:32Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"functions_added": 2, "enums_added": 1, "fields_added": 5, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- RELATED PR : https://github.com/juspay/hyperswitch/pull/9581\r\n\r\n\r\n- Refunds via authorizedot net are getting into `pending` state where no connector call is made\r\n- This happens when `connector_metadata` is empty in attempt table\r\n- In usual cases `connector_metadata` is not empty but this happened via ucs.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9599, "pr_title": "fix(authorizedotnet): refund via ucs missing connector_metadata", "merged_at": "2025-09-30T06:37:14Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"functions_added": 2, "enums_added": 1, "fields_added": 5, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nIn the payment tokenization confirm intent flow, the field `connector_request_reference_id` was not being updated in payment_attempt.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm_intent.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9597, "pr_title": "fix(payment): add connector_request_reference_id to PaymentAttemptUpdate in ConfirmIntentTokenized flow", "merged_at": "2025-10-01T13:42:36Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payments/payment_attempt.rs"], "core_business": ["crates/router/src/core/payments/operations/payment_confirm_intent.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd error details when payment void is failed at connector level and update the status accordingly.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data.rs`\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payments/transformers.rs`\n\n**4. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (20 changes)", "metadata": {"pr_number": 9595, "pr_title": "fix(payments): update error handling for payment void v2", "merged_at": "2025-10-07T08:22:58Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_data.rs", "crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs"], "core_business": ["crates/router/src/core/payments/transformers.rs"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/hyperswitch_interfaces/src/conversion_impls.rs"]}, "change_types": {"fields_added": 20}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd authorized_amount in payment_attempt to support partial authorization for manual_multiple capture.\r\nAdd partial authorization support for Checkout connector", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - ... and 1 more files\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n   - `crates/hyperswitch_domain_models/src/router_data.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/authentication/transformers.rs`\n   - `crates/router/src/core/fraud_check/flows/checkout_flow.rs`\n   - `crates/router/src/core/fraud_check/flows/fulfillment_flow.rs`\n   - ... and 14 more files\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n   - `crates/router/src/types/api/verify_connector.rs`\n   - ... and 1 more files\n\n**5. Type Definitions**\n   - `crates/router/src/types.rs`\n   - `crates/router/src/types/storage/payment_attempt.rs`\n\n**6. Utils**\n   - `crates/router/src/utils/user/sample_data.rs`\n\n**7. Other**\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - `crates/router/src/services/kafka/payment_attempt.rs`\n   - `crates/router/src/services/kafka/payment_attempt_event.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (101 changes)\n- Modify database queries (1 changes)", "metadata": {"pr_number": 9594, "pr_title": "feat(core): Add authorized_amount in payment_attempt to support partial authorization for manual_multiple capture", "merged_at": "2025-10-01T10:16:39Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"database": ["crates/diesel_models/src/payment_attempt.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/user/sample_data.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments/payment_attempt.rs", "crates/hyperswitch_domain_models/src/router_data.rs"], "core_business": ["crates/router/src/core/authentication/transformers.rs", "crates/router/src/core/fraud_check/flows/checkout_flow.rs", "crates/router/src/core/fraud_check/flows/fulfillment_flow.rs", "crates/router/src/core/fraud_check/flows/record_return.rs", "crates/router/src/core/fraud_check/flows/sale_flow.rs", "crates/router/src/core/fraud_check/flows/transaction_flow.rs", "crates/router/src/core/mandate/utils.rs", "crates/router/src/core/payment_methods.rs", "crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/operations/payment_response.rs", "crates/router/src/core/payments/retry.rs", "crates/router/src/core/payments/transformers.rs", "crates/router/src/core/relay/utils.rs", "crates/router/src/core/unified_authentication_service/utils.rs", "crates/router/src/core/utils.rs", "crates/router/src/core/webhooks/utils.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/src/types/api/verify_connector.rs", "crates/router/tests/connectors/utils.rs"], "types": ["crates/router/src/types.rs", "crates/router/src/types/storage/payment_attempt.rs"], "utils": ["crates/router/src/utils/user/sample_data.rs"], "other": ["crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/services/kafka/payment_attempt.rs", "crates/router/src/services/kafka/payment_attempt_event.rs", "crates/storage_impl/src/mock_db/payment_attempt.rs", "crates/storage_impl/src/payments/payment_attempt.rs", "migrations/2025-09-29-074746_add_authorized_amount_to_payment_attempt/down.sql", "migrations/2025-09-29-074746_add_authorized_amount_to_payment_attempt/up.sql"]}, "change_types": {"structs_added": 1, "fields_added": 101, "database_queries": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n`eci_indicator` should be optional since transactions done from cards like mastercard do not send them.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9591, "pr_title": "fix(connector): [paysafe] make `eci_indicator` field optional", "merged_at": "2025-09-30T07:42:15Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdding support to call payments microservice for subscription related usecases", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/query/invoice.rs`\n   - `crates/diesel_models/src/query/utils.rs`\n   - `crates/diesel_models/src/subscription.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n   - `crates/router/src/core/subscription/invoice_handler.rs`\n   - ... and 2 more files\n\n**5. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n\n**6. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**7. Utils**\n   - `crates/common_utils/src/id_type/subscription.rs`\n   - `crates/router/src/routes/lock_utils.rs`\n\n**8. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**9. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/deployments/production.toml`\n   - ... and 5 more files\n\n**10. Other**\n   - `crates/router/src/db/invoice.rs`\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/payments.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (16 changes)\n- Implement new functions (43 changes)\n- Extend existing types with new fields (352 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n- Modify database queries (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit df663129:\nFiles to modify:\n\n\n**subscription.rs**\n  Remove:\n    - struct: pub::CreateSubscriptionResponse\n  Add:\n    - struct: pub::SubscriptionResponse\n    - struct: pub::CreateSubscriptionPaymentDetails\n    - struct: pub::CreatePaymentsRequestData\n    - struct: pub::ConfirmPaymentsRequestData\n\n**connector_enums.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - struct: pub::CreateSubscriptionResponse\n  Add:\n    - struct: pub::SubscriptionResponse\n    - struct: pub::CreateSubscriptionPaymentDetails\n    - struct: pub::CreatePaymentsRequestData\n    - struct: pub::ConfirmPaymentsRequestData\n\n**invoice.rs**\n  Add:\n    - function: pub::list_invoices_by_subscription_id\n\n**utils.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - struct: pub::CreateSubscriptionResponse\n  Add:\n    - struct: pub::SubscriptionResponse\n    - struct: pub::CreateSubscriptionPaymentDetails\n    - struct: pub::CreatePaymentsRequestData\n    - struct: pub::ConfirmPaymentsRequestData\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::from\n    - enum: pub::ChargebeeInvoiceStatus\n    - impl: impl From<ChargebeeInvoiceData> for SubscriptionInvoiceData\n    - impl: impl From<ChargebeeInvoiceStatus> for connector_enums::InvoiceStatus\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionInvoiceData\n\n**secrets_transformers.rs**\n  Modify existing code\n\n**settings.rs**\n  Add:\n    - struct: pub::InternalServicesConfig\n\n**subscription.rs**\n  Remove:\n    - struct: pub::CreateSubscriptionResponse\n  Add:\n    - struct: pub::SubscriptionResponse\n    - struct: pub::CreateSubscriptionPaymentDetails\n    - struct: pub::CreatePaymentsRequestData\n    - struct: pub::ConfirmPaymentsRequestData\n\n**billing_processor_handler.rs**\n  Add:\n    - function: pub::create\n    - function: pub::create_customer_on_connector\n    - function: pub::create_subscription_on_connector\n    - function: private::call_connector\n    - function: private::build_router_data\n    - struct: pub::BillingHandler\n    - impl: impl BillingHandler\n\n**invoice_handler.rs**\n  Add:\n    - function: pub::create_invoice_entry\n    - function: pub::update_invoice\n    - function: pub::get_amount_and_currency\n    - function: pub::create_payment_with_confirm_false\n    - function: pub::get_payment_details\n    - function: pub::create_and_confirm_payment\n    - function: pub::confirm_payment\n    - function: pub::get_latest_invoice\n    - function: pub::create_invoice_record_back_job\n    - struct: pub::InvoiceHandler\n    - impl: impl InvoiceHandler\n\n**payments_api_client.rs**\n  Add:\n    - function: private::get_internal_auth_headers\n    - function: private::make_payment_api_call\n    - function: pub::create_cit_payment\n    - function: pub::create_and_confirm_payment\n    - function: pub::confirm_payment\n    - function: pub::sync_payment\n    - struct: pub::PaymentsApiClient\n    - struct: pub::ErrorResponse\n    - struct: pub::ErrorResponseDetails\n    - impl: impl PaymentsApiClient\n\n**subscription_handler.rs**\n  Add:\n    - function: pub::new\n    - function: pub::create_subscription_entry\n    - function: pub::find_customer\n    - function: pub::find_business_profile\n    - function: pub::find_subscription\n    - function: pub::generate_response\n    - function: pub::to_subscription_response\n    - function: pub::update_subscription\n    - function: pub::get_invoice_handler\n    - struct: pub::SubscriptionHandler\n    - struct: pub::SubscriptionWithHandler\n    - impl: impl SubscriptionHandler<'a>\n    - impl: impl SubscriptionWithHandler<'_>\n\n**invoice.rs**\n  Add:\n    - function: pub::list_invoices_by_subscription_id\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**subscription.rs**\n  Remove:\n    - struct: pub::CreateSubscriptionResponse\n  Add:\n    - struct: pub::SubscriptionResponse\n    - struct: pub::CreateSubscriptionPaymentDetails\n    - struct: pub::CreatePaymentsRequestData\n    - struct: pub::ConfirmPaymentsRequestData\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9590, "pr_title": "feat(subscription): Add support to call payments microservice from subscription service via payments API client", "merged_at": "2025-10-01T19:29:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/query/invoice.rs", "crates/diesel_models/src/query/utils.rs", "crates/diesel_models/src/subscription.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs", "crates/router/src/core/subscription/invoice_handler.rs", "crates/router/src/core/subscription/payments_api_client.rs", "crates/router/src/core/subscription/subscription_handler.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/common_utils/src/id_type/subscription.rs", "crates/router/src/routes/lock_utils.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml", "crates/router/src/configs/secrets_transformers.rs", "crates/router/src/configs/settings.rs"], "other": ["crates/router/src/db/invoice.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs", "crates/router/src/routes/subscription.rs"]}, "change_types": {"structs_added": 16, "functions_added": 43, "enums_added": 1, "fields_added": 352, "imports_added": 36, "conditionals_added": 3, "database_queries": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Add template code for Loonio connector", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 11 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (165 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 5427b07a:\nFiles to modify:\n\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::loonio\n\n**loonio.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Loonio\n    - impl: impl Loonio\n    - impl: impl api::Payment for Loonio\n    - impl: impl api::PaymentSession for Loonio\n    - impl: impl api::ConnectorAccessToken for Loonio\n    - impl: impl api::MandateSetup for Loonio\n    - impl: impl api::PaymentAuthorize for Loonio\n    - impl: impl api::PaymentSync for Loonio\n    - impl: impl api::PaymentCapture for Loonio\n    - impl: impl api::PaymentVoid for Loonio\n    - impl: impl api::Refund for Loonio\n    - impl: impl api::RefundExecute for Loonio\n    - impl: impl api::RefundSync for Loonio\n    - impl: impl api::PaymentToken for Loonio\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Loonio\n    - impl: impl ConnectorCommon for Loonio\n    - impl: impl ConnectorValidation for Loonio\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Loonio\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Loonio\n    - impl: impl webhooks::IncomingWebhook for Loonio\n    - impl: impl ConnectorSpecifications for Loonio\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::LoonioRouterData\n    - struct: pub::LoonioPaymentsRequest\n    - struct: pub::LoonioCard\n    - struct: pub::LoonioAuthType\n    - struct: pub::LoonioPaymentsResponse\n    - struct: pub::LoonioRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::LoonioErrorResponse\n    - enum: pub::LoonioPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(StringMinorUnit, T)> for LoonioRouterData<T>\n    - impl: impl TryFrom<&LoonioRouterData<&PaymentsAuthorizeRouterData>> for LoonioPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for LoonioAuthType\n    - impl: impl From<LoonioPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, LoonioPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&LoonioRouterData<&RefundsRouterData<F>>> for LoonioRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**loonio.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Loonio\n    - impl: impl Loonio\n    - impl: impl api::Payment for Loonio\n    - impl: impl api::PaymentSession for Loonio\n    - impl: impl api::ConnectorAccessToken for Loonio\n    - impl: impl api::MandateSetup for Loonio\n    - impl: impl api::PaymentAuthorize for Loonio\n    - impl: impl api::PaymentSync for Loonio\n    - impl: impl api::PaymentCapture for Loonio\n    - impl: impl api::PaymentVoid for Loonio\n    - impl: impl api::Refund for Loonio\n    - impl: impl api::RefundExecute for Loonio\n    - impl: impl api::RefundSync for Loonio\n    - impl: impl api::PaymentToken for Loonio\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Loonio\n    - impl: impl ConnectorCommon for Loonio\n    - impl: impl ConnectorValidation for Loonio\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Loonio\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Loonio\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Loonio\n    - impl: impl webhooks::IncomingWebhook for Loonio\n    - impl: impl ConnectorSpecifications for Loonio\n    - mod: pub::transformers\n\n**main.rs**\n  Add:\n    - mod: private::loonio\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9586, "pr_title": "feat(connector): [Loonio] Add template code", "merged_at": "2025-09-30T07:43:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/loonio.rs", "crates/hyperswitch_connectors/src/connectors/loonio/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/tests/connectors/loonio.rs", "crates/router/tests/connectors/main.rs", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 165, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR introduces support for Merchant Initiated Transaction (MIT) categories in the PaymentIntent flow. It allows merchants and connectors to identify the specific type of MIT being processed.\r\n\r\n**Changes**\r\n\r\nAdded a new enum MitCategory (mit_category)with values:\r\n```\r\ninstallment – Fixed purchase amount split into multiple payments.\r\n\r\n`unscheduled – Merchant-initiated, not on a fixed schedule (e.g. top-ups).\r\n\r\nrecurring – Regular interval payments (usually same amount).\r\n\r\nresubmission – Retry of a previously failed/declined transaction.\r\n\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_intent.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_intent.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payments/helpers.rs`\n   - `crates/router/src/core/payments/operations/payment_create.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n\n**5. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n   - `crates/router/src/types/api/verify_connector.rs`\n   - ... and 1 more files\n\n**6. Type Definitions**\n   - `crates/router/src/types.rs`\n\n**7. Utils**\n   - `crates/router/src/utils/user/sample_data.rs`\n\n**8. Tests**\n   - `crates/router/tests/payments.rs`\n   - `crates/router/tests/payments2.rs`\n\n**9. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/common_enums/src/enums.rs`\n   - `crates/openapi/src/openapi.rs`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (35 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9585, "pr_title": "feat(core): Add MIT Types in payment Intent ", "merged_at": "2025-10-01T10:44:27Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_intent.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_intent.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/src/types/api/verify_connector.rs", "crates/router/tests/connectors/utils.rs"], "types": ["crates/router/src/types.rs"], "utils": ["crates/router/src/utils/user/sample_data.rs"], "tests": ["crates/router/tests/payments.rs", "crates/router/tests/payments2.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/common_enums/src/enums.rs", "crates/openapi/src/openapi.rs", "crates/router/src/db/events.rs", "migrations/2025-09-25-075008_add_mit_category_in_payment_intnet/down.sql", "migrations/2025-09-25-075008_add_mit_category_in_payment_intnet/up.sql"]}, "change_types": {"functions_added": 1, "enums_added": 1, "fields_added": 35, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- Refunds via authorizedot net are getting into `pending` state where no connector call is made\r\n- This happens when `connector_metadata` is empty in attempt table\r\n- In usual cases `connector_metadata` is not empty but this happened via ucs.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9581, "pr_title": "fix(authorizedotnet): refund via ucs missing connector_metadata", "merged_at": "2025-09-29T18:26:45Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"functions_added": 2, "enums_added": 1, "fields_added": 5, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR fixes the request body order of the TSYS contract for the auth request", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/tsys/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9579, "pr_title": "fix(connectors): [TSYS] change order of order_number in tsys auth request body", "merged_at": "2025-10-08T15:39:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/tsys/transformers.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThere was a trailing whitespace in `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication `. Because of which there was an error when attempting to clone the repo in other systems like Windows etc. Removed this trailing whitespace.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/event.test.js`\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/event.test.js`\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Retrieve after confirm/event.test.js`\n\n**2. Other**\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /.meta.json`\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/.event.meta.json`\n   - `postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/event.prerequest.js`\n   - ... and 9 more files", "metadata": {"pr_number": 9578, "pr_title": "fix(postman): [ARCHIPEL] Remove Trailing Whitespace", "merged_at": "2025-10-07T17:32:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user"]}, "hierarchy": {"tests": ["postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/event.test.js", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/event.test.js", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Retrieve after confirm/event.test.js"], "other": ["postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /.meta.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/.event.meta.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/event.prerequest.js", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/request.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Confirm/response.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/.event.meta.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/event.prerequest.js", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/request.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Create/response.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Retrieve after confirm/.event.meta.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Retrieve after confirm/request.json", "postman/collection-dir/archipel/Flow Testcases/Happy Cases/Scenario10-Create 3DS payment without external 3ds authentication /Payments - Retrieve after confirm/response.json"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded Peachpayments Cypress Test.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments.rs`\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Peachpayments.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n   - `cypress-tests/cypress/e2e/spec/Payment/00009-RefundPayment.cy.js`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (450 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e03c0096:\nFiles to modify:\n\n\n**peachpayments.rs**\n  Add:\n    - function: private::build_request\n\n**transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9573, "pr_title": "feat(connector): Add Peachpayments Cypress", "merged_at": "2025-09-29T09:06:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "refund"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments.rs", "crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Peachpayments.js", "cypress-tests/cypress/e2e/configs/Payment/Utils.js", "cypress-tests/cypress/e2e/spec/Payment/00009-RefundPayment.cy.js"]}, "change_types": {"functions_added": 1, "fields_added": 450, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\ngoogle recently [introduced](https://developers.google.com/pay/api/web/reference/response-objects#CardInfo) new field called `cardFundingSource`. It is an upcoming gpay api change\r\n\r\nit takes an enum:\r\n\r\n- `UNKNOWN`\r\n- `CREDIT`\r\n- `DEBIT`\r\n- `PREPAID`\r\n\r\ngoogle has mentioned it on their api reference that this info will be `none` on production until q4 of 2025.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n   - `crates/router/tests/connectors/payu.rs`\n   - ... and 1 more files\n\n**4. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/common_enums/src/enums.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9571, "pr_title": "refactor(core): introduce new field `cardFundingSource` to `GooglePayPaymentMethodData`", "merged_at": "2025-10-01T09:57:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/payment_method_data.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/tests/connectors/payu.rs", "crates/router/tests/connectors/worldpay.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/common_enums/src/enums.rs", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"enums_added": 1, "fields_added": 9, "imports_added": 5}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nEarlier Limitation:\r\n1. Adding connector to customer create config will trigger customer create for all types of payments where mostly, connectors would require customer create for a specific payment method or customer initiated payment method. \r\n2. This config will not change depending on the environment\r\n\r\nThis pR - adds the ability to call customer create according to the connector need, based on the parameters of payment attempt. \r\n\r\n>Note: This PR only adds the capability to call connector according to the requirement and it is not handled for any connector. This pr is a pre-requisite for Paysafe recurring\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n\r\n1. Authorize.net create a cit with new customer and check if customer call has happened. Customer call is expected to happen\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_5dLbCL5aZt8XTkvr6yuljA1O6yW89oy4AHECe8vp2rDsNcechPyi9uvZd6s6XnCL' \\\r\n--data-raw '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"email\": \"hello@123.com\",\r\n    \"customer_id\": \"cus_001247\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000001091\",\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \r\n            \"card_cvc\": \"111\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"CA\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    }\r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_fLd6FYOYfYOA9bNeKjl1\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_aa704bd6-a15a-4e36-8aa8-14c856f736f7\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_fLd6FYOYfYOA9bNeKjl1_secret_h93kplljoJcUxguJyIpj\",\r\n    \"created\": \"2025-09-26T07:27:51.413Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_001247\",\r\n    \"customer\": {\r\n        \"id\": \"cus_001247\",\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": \"ab\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hello@123.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_001247\",\r\n        \"created_at\": 1758871671,\r\n        \"expires\": 1758875271,\r\n        \"secret\": \"epk_8e029574d35b4424b9ad0ca4bf6df324\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"0\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"0\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_fKWiw0Pbhwo6g8CPBpuE\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_GuStJEZSP9HpoQ5vWhc3\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-26T07:42:51.412Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_2nBdpBO5KXAsojpOdAVK\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-26T07:27:53.974Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n<img width=\"975\" height=\"344\" alt=\"Screenshot 2025-09-26 at 12 58 18 PM\" src=\"https://github.com/user-attachments/assets/8a8fef48-27f4-439a-8336-9f097c5c7d0e\" />\r\n\r\nHyperswitch Vaulting may be affected\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/customers.rs`\n   - `crates/router/src/core/payments/vault_session.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet.rs`\n   - `crates/hyperswitch_connectors/src/connectors/dwolla.rs`\n   - `crates/hyperswitch_connectors/src/connectors/facilitapay.rs`\n   - ... and 5 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 3 more files\n\n**5. Other**\n   - `crates/hyperswitch_interfaces/src/api.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (9 changes)\n- Extend existing types with new fields (11 changes)", "metadata": {"pr_number": 9569, "pr_title": "fix(core): add should_call_connector_customer function to connector specification", "merged_at": "2025-09-30T07:42:14Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/customers.rs", "crates/router/src/core/payments/vault_session.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet.rs", "crates/hyperswitch_connectors/src/connectors/dwolla.rs", "crates/hyperswitch_connectors/src/connectors/facilitapay.rs", "crates/hyperswitch_connectors/src/connectors/gocardless.rs", "crates/hyperswitch_connectors/src/connectors/hyperswitch_vault.rs", "crates/hyperswitch_connectors/src/connectors/stax.rs", "crates/hyperswitch_connectors/src/connectors/stripe.rs", "crates/hyperswitch_interfaces/src/connector_integration_interface.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml", "crates/router/src/configs/settings.rs"], "other": ["crates/hyperswitch_interfaces/src/api.rs"]}, "change_types": {"functions_added": 9, "fields_added": 11, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd api models and openapi changes for payments submit eligibility api", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Other**\n   - `api-reference/docs.json`\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v1/payments/payments--submit-eligibility-data.mdx`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (1 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9568, "pr_title": "feat(router): add api models and openapi changes for payments submit eligibility api", "merged_at": "2025-10-01T13:15:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "other": ["api-reference/docs.json", "api-reference/v1/openapi_spec_v1.json", "api-reference/v1/payments/payments--submit-eligibility-data.mdx", "api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi.rs", "crates/openapi/src/routes/payments.rs"]}, "change_types": {"structs_added": 2, "functions_added": 1, "fields_added": 5}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Implement Interac payouts", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n   - `crates/api_models/src/payments.rs`\n   - `crates/api_models/src/payouts.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/utils.rs`\n\n**4. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 6 more files\n\n**5. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (21 changes)\n- Extend existing types with new fields (102 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit cf30da2d:\nFiles to modify:\n\n\n**enums.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**payouts.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**gigadat.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::PayoutQuote for Gigadat\n    - impl: impl api::PayoutCreate for Gigadat\n    - impl: impl api::PayoutFulfill for Gigadat\n    - impl: impl ConnectorIntegration<PoQuote, PayoutsData, PayoutsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<PoCreate, PayoutsData, PayoutsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<PoFulfill, PayoutsData, PayoutsResponseData> for Gigadat\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::GigadatPayoutQuoteRequest\n    - struct: pub::GigadatPayoutResponse\n    - struct: pub::GigadatPayoutData\n    - impl: impl TryFrom<&GigadatRouterData<&PayoutsRouterData<PoQuote>>> for GigadatPayoutQuoteRequest\n    - impl: impl TryFrom<PayoutsResponseRouterData<F, GigadatPayoutResponse>> for PayoutsRouterData<F>\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_browser_info\n\n**router_request_types.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<api_models::payments::BrowserInformation> for BrowserInformation\n\n**payouts.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_browser_info\n\n**utils.rs**\n  Add:\n    - function: private::get_browser_info", "metadata": {"pr_number": 9566, "pr_title": "feat(connector): [Gigadat] Implement interac payouts", "merged_at": "2025-10-01T09:32:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs", "crates/api_models/src/payments.rs", "crates/api_models/src/payouts.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payouts.rs", "crates/router/src/core/utils.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/gigadat.rs", "crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/tests/connectors/utils.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 3, "functions_added": 21, "fields_added": 102, "imports_added": 7}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Add missing countries and currencies for nuvei", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**2. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files", "metadata": {"pr_number": 9563, "pr_title": "fix(nuvei): Update countries list for nuvei", "merged_at": "2025-09-25T16:22:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR addresses an issue where chat conversation history could not be decrypted in the `chat/ai/list` endpoint. The root cause was an inconsistency between the encryption method used when storing chat interactions (`chat/ai/data`) and the decryption method used when retrieving them (`chat/ai/list`).\r\n\r\nThis change standardizes the encryption process to use the direct `GcmAes256` utility, ensuring compatibility between encryption and decryption, and resolving the data retrieval failures.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Utils**\n   - `crates/router/src/utils/chat.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9562, "pr_title": "fix(chat): alter encryption logic for ai service", "merged_at": "2025-10-01T13:05:25Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant"]}, "hierarchy": {"utils": ["crates/router/src/utils/chat.rs"]}, "change_types": {"fields_added": 2, "imports_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdds support for non threeds card mandates\r\n\r\n> Note:  Multiple mandates cannot be created with the same customer and same payment method. This is also the reason why cypress test is not added - for the same customer id and payment method CIT will fail and hence MITs cannot be tested\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n1. Create a mandate with card non-3ds cards\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KpZNvnar9rCNujQ66e0bg27IPsqiFppklmFtpZ5I4zPeoSBokhD8OmQ7WAmQPRhI' \\\r\n--data-raw '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"email\": \"hello@123.com\",\r\n\r\n    \"customer_id\": \"cus_004\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n        \r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4111111111111111\",\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"737\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"CA\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    }\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_aP1dCSuF2VVucq2xpSoC\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5eb5fcc5-5e2c-4549-b651-332497ec158b\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"paysafe\",\r\n    \"client_secret\": \"pay_aP1dCSuF2VVucq2xpSoC_secret_mUlrShi8maILTM8ZGV3E\",\r\n    \"created\": \"2025-09-25T09:56:29.040Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_004\",\r\n    \"customer\": {\r\n        \"id\": \"cus_004\",\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"CA\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hello@123.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_004\",\r\n        \"created_at\": 1758794189,\r\n        \"expires\": 1758797789,\r\n        \"secret\": \"epk_79b602d671e14c3f9634562bdbb63f2d\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"5a63c4a9-24b7-44cc-96ee-7a83032783c0\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Fa5NR745tv9hvfhGT7rg\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_y1eIRpAWLkFOdwJRlcsw\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-25T10:11:29.040Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_dX6Fbex22SeTGe2szfZo\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-25T09:56:32.860Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"Cmg3jQytsePtAtk--5a63c4a9-24b7-44cc-96ee-7a83032783c0\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nMIT\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KpZNvnar9rCNujQ66e0bg27IPsqiFppklmFtpZ5I4zPeoSBokhD8OmQ7WAmQPRhI' \\\r\n--data '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"off_session\": true,\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"recurring_details\": {\r\n        \"type\": \"payment_method_id\",\r\n        \"data\": \"pm_dX6Fbex22SeTGe2szfZo\"\r\n    },\r\n    \r\n    \"customer_id\": \"cus_004\"\r\n      , \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_rzsYLib6bQj7aJeqfUo5\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5eb5fcc5-5e2c-4549-b651-332497ec158b\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10000,\r\n    \"connector\": \"paysafe\",\r\n    \"client_secret\": \"pay_rzsYLib6bQj7aJeqfUo5_secret_GfXEKY46RvyChm5gBoDl\",\r\n    \"created\": \"2025-09-25T09:59:21.330Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_004\",\r\n    \"customer\": {\r\n        \"id\": \"cus_004\",\r\n        \"name\": null,\r\n        \"email\": \"hello@123.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"Sakil Mostak\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": \"hello@123.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_004\",\r\n        \"created_at\": 1758794361,\r\n        \"expires\": 1758797961,\r\n        \"secret\": \"epk_aa8e9eafc68e4f4c99d72cd9cff2268e\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"a56ab112-ed3e-4bcf-a74d-c12dbed48e56\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Fa5NR745tv9hvfhGT7rg\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_y1eIRpAWLkFOdwJRlcsw\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-25T10:14:21.330Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_dX6Fbex22SeTGe2szfZo\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-25T09:59:23.316Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"Cmg3jQytsePtAtk--5a63c4a9-24b7-44cc-96ee-7a83032783c0\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n<img width=\"613\" height=\"485\" alt=\"Screenshot 2025-10-09 at 12 17 27 PM\" src=\"https://github.com/user-attachments/assets/3c3ed202-d475-4188-845e-0dc6aa7f3013\" />\r\n\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/paysafe.rs`\n   - `crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs`\n   - `crates/hyperswitch_connectors/src/default_implementations.rs`\n   - ... and 2 more files\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n\n**3. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n\n**Code Patterns Applied:**\n- Define new data structures (7 changes)\n- Implement new functions (25 changes)\n- Extend existing types with new fields (99 changes)\n- Add conditional logic for feature flags or filtering (5 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 35a20f8e:\nFiles to modify:\n\n\n**paysafe.rs**\n  Add:\n    - function: private::validate_mandate_payment\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::should_call_connector_customer\n    - impl: impl api::ConnectorCustomer for Paysafe\n    - impl: impl ConnectorIntegration<CreateConnectorCustomer, ConnectorCustomerData, PaymentsResponseData> for Paysafe\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::new_customer_initiated_transaction\n    - function: private::new_merchant_initiated_transaction\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::PaysafeCustomerDetails\n    - struct: pub::PaysafeBillingDetails\n    - struct: pub::PaysafeStoredCredential\n    - struct: pub::PaysafeMandateMetadata\n    - struct: pub::PaysafeCustomerResponse\n    - enum: pub::PaysafeUsage\n    - enum: pub::MandateOccurence\n    - enum: pub::PaysafeStoredCredentialType\n    - impl: impl TryFrom<&ConnectorCustomerRouterData> for PaysafeCustomerDetails\n    - impl: impl PaysafeStoredCredential\n    - impl: impl TryFrom<&PaymentsAuthorizeRouterData> for PaysafeMandateData\n    - impl: impl TryFrom<ResponseRouterData<F, PaysafeCustomerResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_optional_billing_state_code\n    - function: private::get_connector_mandate_data\n    - function: private::get_connector_mandate_id\n    - function: private::is_customer_initiated_mandate_payment\n\n**payment_connector_required_fields.rs**\n  Modify existing code", "metadata": {"pr_number": 9560, "pr_title": "feat(connectors): [Paysafe] implement non-3DS card mandates", "merged_at": "2025-10-09T08:26:14Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/paysafe.rs", "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"]}, "change_types": {"structs_added": 7, "functions_added": 25, "enums_added": 3, "fields_added": 99, "conditionals_added": 5}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR enhances the Unified Connector Service (UCS) by adding profile ID tracking to the lineage system. Previously, the lineage tracking only included merchant IDs, but now it includes both merchant ID and profile ID to provide better traceability and context for payment operations.", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/merchant_context.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/flows.rs`\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - ... and 4 more files\n\n**3. Other**\n   - `crates/external_services/src/grpc_client.rs`\n   - `crates/injector/src/vault_metadata.rs`\n   - `crates/router/src/consts.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (35 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 7654dbf4:\nFiles to modify:\n\n\n**grpc_client.rs**\n  Modify existing code\n\n**merchant_context.rs**\n  Modify existing code\n\n**vault_metadata.rs**\n  Modify existing code\n\n**consts.rs**\n  Add:\n    - function: private::test_profile_id_unavailable_initialization\n    - mod: private::tests\n\n**payments.rs**\n  Modify existing code\n\n**flows.rs**\n  Modify existing code\n\n**authorize_flow.rs**\n  Modify existing code\n\n**external_proxy_flow.rs**\n  Modify existing code\n\n**psync_flow.rs**\n  Modify existing code\n\n**setup_mandate_flow.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code", "metadata": {"pr_number": 9559, "pr_title": "feat(ucs): Add profile ID to lineage tracking in Unified Connector Service", "merged_at": "2025-09-30T07:33:46Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/merchant_context.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/flows.rs", "crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/flows/setup_mandate_flow.rs", "crates/router/src/core/unified_connector_service.rs"], "other": ["crates/external_services/src/grpc_client.rs", "crates/injector/src/vault_metadata.rs", "crates/router/src/consts.rs"]}, "change_types": {"functions_added": 2, "fields_added": 35, "imports_added": 13}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nTemplate Code for Finix\r\n \r\nNo need test cases .", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 11 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (164 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e45bad38:\nFiles to modify:\n\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::finix\n\n**finix.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Finix\n    - impl: impl Finix\n    - impl: impl api::Payment for Finix\n    - impl: impl api::PaymentSession for Finix\n    - impl: impl api::ConnectorAccessToken for Finix\n    - impl: impl api::MandateSetup for Finix\n    - impl: impl api::PaymentAuthorize for Finix\n    - impl: impl api::PaymentSync for Finix\n    - impl: impl api::PaymentCapture for Finix\n    - impl: impl api::PaymentVoid for Finix\n    - impl: impl api::Refund for Finix\n    - impl: impl api::RefundExecute for Finix\n    - impl: impl api::RefundSync for Finix\n    - impl: impl api::PaymentToken for Finix\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Finix\n    - impl: impl ConnectorCommon for Finix\n    - impl: impl ConnectorValidation for Finix\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Finix\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Finix\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Finix\n    - impl: impl webhooks::IncomingWebhook for Finix\n    - impl: impl ConnectorSpecifications for Finix\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::FinixRouterData\n    - struct: pub::FinixPaymentsRequest\n    - struct: pub::FinixCard\n    - struct: pub::FinixAuthType\n    - struct: pub::FinixPaymentsResponse\n    - struct: pub::FinixRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::FinixErrorResponse\n    - enum: pub::FinixPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(MinorUnit, T)> for FinixRouterData<T>\n    - impl: impl TryFrom<&FinixRouterData<&PaymentsAuthorizeRouterData>> for FinixPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for FinixAuthType\n    - impl: impl From<FinixPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, FinixPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&FinixRouterData<&RefundsRouterData<F>>> for FinixRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**finix.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Finix\n    - impl: impl Finix\n    - impl: impl api::Payment for Finix\n    - impl: impl api::PaymentSession for Finix\n    - impl: impl api::ConnectorAccessToken for Finix\n    - impl: impl api::MandateSetup for Finix\n    - impl: impl api::PaymentAuthorize for Finix\n    - impl: impl api::PaymentSync for Finix\n    - impl: impl api::PaymentCapture for Finix\n    - impl: impl api::PaymentVoid for Finix\n    - impl: impl api::Refund for Finix\n    - impl: impl api::RefundExecute for Finix\n    - impl: impl api::RefundSync for Finix\n    - impl: impl api::PaymentToken for Finix\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Finix\n    - impl: impl ConnectorCommon for Finix\n    - impl: impl ConnectorValidation for Finix\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Finix\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Finix\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Finix\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Finix\n    - impl: impl webhooks::IncomingWebhook for Finix\n    - impl: impl ConnectorSpecifications for Finix\n    - mod: pub::transformers\n\n**main.rs**\n  Add:\n    - mod: private::finix\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9557, "pr_title": "feat(finix): template code", "merged_at": "2025-09-26T13:26:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/finix.rs", "crates/hyperswitch_connectors/src/connectors/finix/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/tests/connectors/finix.rs", "crates/router/tests/connectors/main.rs", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 164, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nTemplate for Tesouro integration", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 12 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (165 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 239b6d37:\nFiles to modify:\n\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::tesouro\n\n**tesouro.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Tesouro\n    - impl: impl Tesouro\n    - impl: impl api::Payment for Tesouro\n    - impl: impl api::PaymentSession for Tesouro\n    - impl: impl api::ConnectorAccessToken for Tesouro\n    - impl: impl api::MandateSetup for Tesouro\n    - impl: impl api::PaymentAuthorize for Tesouro\n    - impl: impl api::PaymentSync for Tesouro\n    - impl: impl api::PaymentCapture for Tesouro\n    - impl: impl api::PaymentVoid for Tesouro\n    - impl: impl api::Refund for Tesouro\n    - impl: impl api::RefundExecute for Tesouro\n    - impl: impl api::RefundSync for Tesouro\n    - impl: impl api::PaymentToken for Tesouro\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Tesouro\n    - impl: impl ConnectorCommon for Tesouro\n    - impl: impl ConnectorValidation for Tesouro\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Tesouro\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tesouro\n    - impl: impl webhooks::IncomingWebhook for Tesouro\n    - impl: impl ConnectorSpecifications for Tesouro\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::TesouroRouterData\n    - struct: pub::TesouroPaymentsRequest\n    - struct: pub::TesouroCard\n    - struct: pub::TesouroAuthType\n    - struct: pub::TesouroPaymentsResponse\n    - struct: pub::TesouroRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::TesouroErrorResponse\n    - enum: pub::TesouroPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(FloatMajorUnit, T)> for TesouroRouterData<T>\n    - impl: impl TryFrom<&TesouroRouterData<&PaymentsAuthorizeRouterData>> for TesouroPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for TesouroAuthType\n    - impl: impl From<TesouroPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, TesouroPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&TesouroRouterData<&RefundsRouterData<F>>> for TesouroRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**main.rs**\n  Add:\n    - mod: private::tesouro\n\n**tesouro.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Tesouro\n    - impl: impl Tesouro\n    - impl: impl api::Payment for Tesouro\n    - impl: impl api::PaymentSession for Tesouro\n    - impl: impl api::ConnectorAccessToken for Tesouro\n    - impl: impl api::MandateSetup for Tesouro\n    - impl: impl api::PaymentAuthorize for Tesouro\n    - impl: impl api::PaymentSync for Tesouro\n    - impl: impl api::PaymentCapture for Tesouro\n    - impl: impl api::PaymentVoid for Tesouro\n    - impl: impl api::Refund for Tesouro\n    - impl: impl api::RefundExecute for Tesouro\n    - impl: impl api::RefundSync for Tesouro\n    - impl: impl api::PaymentToken for Tesouro\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Tesouro\n    - impl: impl ConnectorCommon for Tesouro\n    - impl: impl ConnectorValidation for Tesouro\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Tesouro\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tesouro\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tesouro\n    - impl: impl webhooks::IncomingWebhook for Tesouro\n    - impl: impl ConnectorSpecifications for Tesouro\n    - mod: pub::transformers\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9555, "pr_title": "feat(connector): [Tesouro] Add template code", "merged_at": "2025-09-25T18:03:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/tesouro.rs", "crates/hyperswitch_connectors/src/connectors/tesouro/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/tests/connectors/main.rs", "crates/router/tests/connectors/sample_auth.toml", "crates/router/tests/connectors/tesouro.rs", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 165, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nFixed ideal giropay country currency config", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**2. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files", "metadata": {"pr_number": 9552, "pr_title": "Fix: Ideal Giropay Country Currency Config", "merged_at": "2025-09-29T09:09:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request introduces a new authentication mechanism for internal service communication using a shared API key, merchant ID, and profile ID. The changes add configuration options for this authentication method across all environment config files, update the core settings and secrets transformers to support it, and implement the logic for handling requests authenticated via these headers in the payments route and authentication service.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**2. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/deployments/production.toml`\n   - ... and 5 more files\n\n**3. Other**\n   - `crates/router/src/lib.rs`\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/payments.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (27 changes)\n- Add conditional logic for feature flags or filtering (4 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit b8900d00:\nFiles to modify:\n\n\n**secrets_transformers.rs**\n  Modify existing code\n\n**settings.rs**\n  Add:\n    - struct: pub::InternalMerchantIdProfileIdAuthSettings\n\n**lib.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**authentication.rs**\n  Add:\n    - function: private::authenticate_and_fetch\n    - function: pub::is_internal_api_key_merchant_id_profile_id_auth\n    - function: pub::check_internal_api_key_auth\n    - impl: impl AuthenticateAndFetch<AuthenticationData, A> for InternalMerchantIdProfileIdAuth<F>", "metadata": {"pr_number": 9547, "pr_title": "feat(auth): add new authentication to communicate between microservices", "merged_at": "2025-09-29T18:26:45Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml", "crates/router/src/configs/secrets_transformers.rs", "crates/router/src/configs/settings.rs"], "other": ["crates/router/src/lib.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs", "crates/router/src/services/authentication.rs"]}, "change_types": {"structs_added": 2, "functions_added": 6, "fields_added": 27, "conditionals_added": 4}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCurrently normal 3ds payments are failing if we enable a merchant for UAS. This pr fixes that\r\n\r\nhttps://github.com/juspay/hyperswitch/pull/9545", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/unified_authentication_service.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/aci/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9546, "pr_title": "fix(core): fixed ctp bug for confirmation and added multi profile support for modular auth", "merged_at": "2025-09-25T07:45:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/unified_authentication_service.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/aci/transformers.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCurrently normal 3ds payments are failing if we enable a merchant for UAS. This pr fixes that\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n\r\nMCA Nuvei\r\n```\r\ncurl --location 'http://localhost:8080/account/postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data '{\r\n    \"connector_type\": \"payment_processor\",\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"SignatureKey\",\r\n        \"api_key\": \"\",\r\n        \"key1\": \"\",\r\n        \"api_secret\": \"\"\r\n    },\r\n    \"connector_name\": \"nuvei\",\r\n    \"test_mode\": false,\r\n    \"disabled\": false,\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"apple_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                },\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"report_group\": \"\",\r\n        \"merchant_config_currency\": \"\",\r\n        \"merchant_category_code\": \"\",\r\n        \"merchant_country_code\": \"\",\r\n        \"merchant_name\": \"\",\r\n        \"endpoint_prefix\": \"\",\r\n        \"three_ds_requestor_name\": \"juspay-prev\",\r\n        \"three_ds_requestor_id\": \"juspay-prev\",\r\n        \"pull_mechanism_for_external_3ds_enabled\": true,\r\n        \"acquirer_bin\": \"400000\",\r\n        \"acquirer_merchant_id\": \"\",\r\n        \"acquirer_country_code\": \"\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"connector_type\": \"payment_processor\",\r\n    \"connector_name\": \"nuvei\",\r\n    \"connector_label\": \"nuvei_US_default\",\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"SignatureKey\",\r\n        \"api_key\": \"80***************39\",\r\n        \"key1\": \"10***17\",\r\n        \"api_secret\": \"xH************************************************************dZ\"\r\n    },\r\n    \"payment_methods_enabled\": [\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"credit\",\r\n                    \"payment_experience\": null,\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"card\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"debit\",\r\n                    \"payment_experience\": null,\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"apple_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                },\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"payment_method\": \"wallet\",\r\n            \"payment_method_types\": [\r\n                {\r\n                    \"payment_method_type\": \"google_pay\",\r\n                    \"payment_experience\": \"invoke_sdk_client\",\r\n                    \"card_networks\": null,\r\n                    \"accepted_currencies\": null,\r\n                    \"accepted_countries\": null,\r\n                    \"minimum_amount\": 1,\r\n                    \"maximum_amount\": 68607706,\r\n                    \"recurring_enabled\": true,\r\n                    \"installment_payment_enabled\": true\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"connector_webhook_details\": null,\r\n    \"metadata\": {\r\n        \"acquirer_bin\": \"400000\",\r\n        \"report_group\": \"Hello\",\r\n        \"merchant_name\": \"Dummy Merchant\",\r\n        \"endpoint_prefix\": \"\",\r\n        \"acquirer_merchant_id\": \"\",\r\n        \"acquirer_country_code\": \"\",\r\n        \"merchant_country_code\": \"840\",\r\n        \"three_ds_requestor_id\": \"juspay-prev\",\r\n        \"merchant_category_code\": \"\",\r\n        \"three_ds_requestor_name\": \"juspay-prev\",\r\n        \"merchant_config_currency\": \"\",\r\n        \"pull_mechanism_for_external_3ds_enabled\": true\r\n    },\r\n    \"test_mode\": false,\r\n    \"disabled\": false,\r\n    \"frm_configs\": null,\r\n    \"business_country\": \"US\",\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"pm_auth_config\": null,\r\n    \"status\": \"active\",\r\n    \"additional_merchant_data\": null,\r\n    \"connector_wallets_details\": null\r\n}\r\n```\r\nMCA Juspay 3DS Server\r\n```\r\ncurl --location 'http://localhost:8080/account/postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa/connectors' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data '{\r\n    \"connector_type\": \"authentication_processor\",\r\n    \"connector_name\": \"juspaythreedsserver\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"NoKey\"\r\n    },\r\n    \"test_mode\": true,\r\n    \"disabled\": false,\r\n    \"metadata\": {\r\n        \"merchant_category_code\": \"\",\r\n        \"merchant_country_code\": \"\",\r\n        \"merchant_name\": \"Dummy Merchant\",\r\n        \"endpoint_prefix\": \"\",\r\n        \"three_ds_requestor_name\": \"\",\r\n        \"three_ds_requestor_id\": \"\",\r\n        \"pull_mechanism_for_external_3ds_enabled\": true,\r\n        \"acquirer_bin\":\"400000\",\r\n        \"acquirer_merchant_id\":\"\",\r\n\"acquirer_country_code\": \"\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"connector_type\": \"authentication_processor\",\r\n    \"connector_name\": \"juspaythreedsserver\",\r\n    \"connector_label\": \"juspaythreedsserver_US_default\",\r\n    \"merchant_connector_id\": \"mca_t8fUrrgC2L69A0Sn2wOg\",\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"connector_account_details\": {\r\n        \"auth_type\": \"NoKey\"\r\n    },\r\n    \"payment_methods_enabled\": null,\r\n    \"connector_webhook_details\": null,\r\n    \"metadata\": {\r\n        \"acquirer_bin\": \"\",\r\n        \"merchant_name\": \"\",\r\n        \"endpoint_prefix\": \"\",\r\n        \"acquirer_merchant_id\": \"\",\r\n        \"acquirer_country_code\": \"\",\r\n        \"merchant_country_code\": \"\",\r\n        \"three_ds_requestor_id\": \"juspay-prev\",\r\n        \"merchant_category_code\": \"5411\",\r\n        \"three_ds_requestor_name\": \"\",\r\n        \"pull_mechanism_for_external_3ds_enabled\": true\r\n    },\r\n    \"test_mode\": true,\r\n    \"disabled\": false,\r\n    \"frm_configs\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": null,\r\n    \"business_sub_label\": null,\r\n    \"applepay_verified_domains\": null,\r\n    \"pm_auth_config\": null,\r\n    \"status\": \"active\",\r\n    \"additional_merchant_data\": null,\r\n    \"connector_wallets_details\": null\r\n}\r\n```\r\nEnable AuthenticationConfig For Merchant\r\n```\r\ncurl --location 'http://localhost:8080/configs/merchants_eligible_for_authentication_service' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: test_admin' \\\r\n--data '{\r\n    \"key\": \"merchants_eligible_for_authentication_service\",\r\n    \"value\": \"[\\\"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\\\"]\"\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"key\": \"merchants_eligible_for_authentication_service\",\r\n    \"value\": \"[\\\"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\\\"]\"\r\n}\r\n```\r\nPayments Create + ThreeDS \r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data-raw '{\r\n    \"amount\": 15100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\r\n    \r\n    \r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"phone_country_code\": \"+1\",\r\n    \"description\": \"Its my first payment request\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"return_url\": \"https://google.com\",\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"debit\",\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n   \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"2221008123677736\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"setup_future_usage\": \"off_session\"\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_x528QZvoT5MqjgzkqVYb\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\",\r\n    \"status\": \"requires_customer_action\",\r\n    \"amount\": 15100,\r\n    \"net_amount\": 15100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 15100,\r\n    \"amount_received\": null,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_x528QZvoT5MqjgzkqVYb_secret_zjEO4YtDNNAFyIXskzpT\",\r\n    \"created\": \"2025-09-24T13:12:07.493Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"customer\": {\r\n        \"id\": \"BamboraCustomer\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"guest@example.com\",\r\n        \"phone\": \"999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"7736\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"222100\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"avs_description\": null,\r\n                \"card_validation_result\": \"\",\r\n                \"card_validation_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"cReq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6IjZmYzZkM2U3LTY3MjktNGJhZi05ZDRmLTBjODM4ZjNhZjUzNCIsImFjc1RyYW5zSUQiOiI5YTE5OTc0MC00YTlkLTQ2NmEtYTg4ZC1kYTAzMzAxOWFlNjIiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDUiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMi4wIn0\",\r\n                \"flow\": \"challenge\",\r\n                \"acsUrl\": \"https://3dsn.sandbox.safecharge.com/ThreeDSACSEmulatorChallenge/api/ThreeDSACSChallengeController/ChallengePage?eyJub3RpZmljYXRpb25VUkwiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvcGF5bWVudHMvcGF5X3g1MjhRWnZvVDVNcWpnemtxVlliL3Bvc3RtYW5fbWVyY2hhbnRfR0hBY3Rpb25fYmZmYmI2NmQtYjM3ZC00ZmJkLTljZjctZDc5YjhmYWUxM2ZhL3JlZGlyZWN0L2NvbXBsZXRlL251dmVpIiwidGhyZWVEU1NlcnZlclRyYW5zSUQiOiI2ZmM2ZDNlNy02NzI5LTRiYWYtOWQ0Zi0wYzgzOGYzYWY1MzQiLCJhY3NUcmFuc0lEIjoiOWExOTk3NDAtNGE5ZC00NjZhLWE4OGQtZGEwMzMwMTlhZTYyIiwiZHNUcmFuc0lEIjoiNzE5MDU1ZTAtZDRjNS00MGU5LWFmNjQtYjY0YmM2OWM3N2I4IiwiZGF0YSI6bnVsbCwiTWVzc2FnZVZlcnNpb24iOiIyLjIuMCJ9\",\r\n                \"version\": \"2.2.0\",\r\n                \"threeDFlow\": \"1\",\r\n                \"decisionReason\": \"NoPreference\",\r\n                \"threeDReasonId\": \"\",\r\n                \"acquirerDecision\": \"ExemptionRequest\",\r\n                \"challengePreferenceReason\": \"12\",\r\n                \"isExemptionRequestInAuthentication\": \"0\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_Y2zINZ6kChTFVv9dk4Oz\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": {\r\n        \"type\": \"redirect_to_url\",\r\n        \"redirect_to_url\": \"http://localhost:8080/payments/redirect/pay_x528QZvoT5MqjgzkqVYb/postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa/pay_x528QZvoT5MqjgzkqVYb_1\"\r\n    },\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"debit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"BamboraCustomer\",\r\n        \"created_at\": 1758719527,\r\n        \"expires\": 1758723127,\r\n        \"secret\": \"epk_62b1f4961bd24584be423b0fbcaccfb6\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000017363647\",\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"9132534111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-24T13:27:07.493Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-24T13:12:10.955Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\nRedirection\r\n<img width=\"1009\" height=\"629\" alt=\"Screenshot 2025-09-24 at 6 49 55 PM\" src=\"https://github.com/user-attachments/assets/9eb9e1f2-a654-4942-8362-b46134fc3ac8\" />\r\n\r\nRetreive:\r\n```\r\n{\r\n    \"payment_id\": \"pay_x528QZvoT5MqjgzkqVYb\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 15100,\r\n    \"net_amount\": 15100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 15100,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_x528QZvoT5MqjgzkqVYb_secret_zjEO4YtDNNAFyIXskzpT\",\r\n    \"created\": \"2025-09-24T13:12:07.493Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"customer\": {\r\n        \"id\": \"BamboraCustomer\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"guest@example.com\",\r\n        \"phone\": \"999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"7736\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"222100\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"avs_description\": null,\r\n                \"card_validation_result\": \"\",\r\n                \"card_validation_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"flow\": \"challenge\",\r\n                \"version\": \"2.2.0\",\r\n                \"decisionReason\": \"NoPreference\",\r\n                \"threeDReasonId\": \"\",\r\n                \"acquirerDecision\": \"ExemptionRequest\",\r\n                \"isLiabilityOnIssuer\": \"1\",\r\n                \"challengeCancelReason\": \"\",\r\n                \"challengeCancelReasonId\": \"\",\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_Y2zINZ6kChTFVv9dk4Oz\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"debit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000017363885\",\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"9132534111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-24T13:27:07.493Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"480213756166352\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-24T13:14:05.572Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nPayments Create : No 3ds\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data-raw '{\r\n    \"amount\": 15100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\r\n    \r\n    \r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"phone_country_code\": \"+1\",\r\n    \"description\": \"Its my first payment request\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"return_url\": \"https://google.com\",\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"debit\",\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n   \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"2221008123677736\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"setup_future_usage\": \"off_session\"\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_Zm0yWWDJcEndaKQUPQzC\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 15100,\r\n    \"net_amount\": 15100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 15100,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_Zm0yWWDJcEndaKQUPQzC_secret_iPiWmFznasUOY7vOmJLk\",\r\n    \"created\": \"2025-09-24T13:20:39.839Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"customer\": {\r\n        \"id\": \"BamboraCustomer\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"guest@example.com\",\r\n        \"phone\": \"999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"7736\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"222100\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"avs_description\": null,\r\n                \"card_validation_result\": \"\",\r\n                \"card_validation_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_nzGf7vRjyw0qD0AoLVX0\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"debit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"BamboraCustomer\",\r\n        \"created_at\": 1758720039,\r\n        \"expires\": 1758723639,\r\n        \"secret\": \"epk_b9dfe052c3f94a6b88b7734a2b0b4376\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000017364485\",\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"9132955111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-24T13:35:39.839Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"480213756166352\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-24T13:20:43.815Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nPayments Create + External Juspay 3DS \r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data-raw '{\r\n    \"amount\": 15100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\r\n    \r\n    \r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"phone_country_code\": \"+1\",\r\n    \"description\": \"Its my first payment request\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"return_url\": \"https://google.com\",\r\n    \"request_external_three_ds_authentication\":true,\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"debit\",\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n   \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"2221008123677736\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        }\r\n    },\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"setup_future_usage\": \"off_session\"\r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_2CKMzGv6Fn3UBsB9s9tW\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\",\r\n    \"status\": \"requires_customer_action\",\r\n    \"amount\": 15100,\r\n    \"net_amount\": 15100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_2CKMzGv6Fn3UBsB9s9tW_secret_rXSWY1A65ehM14tipPwW\",\r\n    \"created\": \"2025-09-24T13:21:25.664Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"customer\": {\r\n        \"id\": \"BamboraCustomer\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"guest@example.com\",\r\n        \"phone\": \"999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"7736\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"222100\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_mQoCstXPpdPjuecDF4A8\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": {\r\n        \"type\": \"three_ds_invoke\",\r\n        \"three_ds_data\": {\r\n            \"three_ds_authentication_url\": \"http://localhost:8080/payments/pay_2CKMzGv6Fn3UBsB9s9tW/3ds/authentication\",\r\n            \"three_ds_authorize_url\": \"http://localhost:8080/payments/pay_2CKMzGv6Fn3UBsB9s9tW/postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa/authorize/nuvei\",\r\n            \"three_ds_method_details\": {\r\n                \"three_ds_method_data_submission\": false,\r\n                \"three_ds_method_data\": null,\r\n                \"three_ds_method_url\": null,\r\n                \"three_ds_method_key\": null,\r\n                \"consume_post_message_for_three_ds_method_completion\": false\r\n            },\r\n            \"poll_config\": {\r\n                \"poll_id\": \"external_authentication_pay_2CKMzGv6Fn3UBsB9s9tW\",\r\n                \"delay_in_secs\": 2,\r\n                \"frequency\": 5\r\n            },\r\n            \"message_version\": \"2.2.0\",\r\n            \"directory_server_id\": null\r\n        }\r\n    },\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"debit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"BamboraCustomer\",\r\n        \"created_at\": 1758720085,\r\n        \"expires\": 1758723685,\r\n        \"secret\": \"epk_95232ecdaf724adbb42626ce678c0c17\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": null,\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": null,\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"incremental_authorization_allowed\": null,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": {\r\n        \"authentication_flow\": null,\r\n        \"electronic_commerce_indicator\": null,\r\n        \"status\": \"pending\",\r\n        \"ds_transaction_id\": \"8f93298c-b126-4463-ad76-6127dcde2f65\",\r\n        \"version\": \"2.2.0\",\r\n        \"error_code\": null,\r\n        \"error_message\": null\r\n    },\r\n    \"external_3ds_authentication_attempted\": true,\r\n    \"expires_on\": \"2025-09-24T13:36:25.664Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-24T13:21:26.500Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\nAuthenticate\r\n```\r\n\r\ncurl --location 'https://93a6a1e56b62.ngrok-free.app/payments/pay_2CKMzGv6Fn3UBsB9s9tW/3ds/authentication' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: pk_dev_f68a077767f849368ce529ce31efbf1b' \\\r\n--data '{\r\n    \"client_secret\": \"pay_2CKMzGv6Fn3UBsB9s9tW_secret_rXSWY1A65ehM14tipPwW\",\r\n    \"device_channel\": \"BRW\",\r\n    \"threeds_method_comp_ind\": \"N\"\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"trans_status\": \"C\",\r\n    \"acs_url\": \"https://mock-three-ds-server-small-lake-1937.fly.dev/processor/mock/acs/trigger-otp?redirectUrl=http%3A%2F%2Flocalhost%3A8080%2Fpayments%2Fpay_2CKMzGv6Fn3UBsB9s9tW%2Fpostman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa%2Fauthorize%2Fnuvei\",\r\n    \"challenge_request\": \"eyJtZXNzYWdlVHlwZSI6IkNSZXEiLCJ0aHJlZURTU2VydmVyVHJhbnNJRCI6IjhmOTMyOThjLWIxMjYtNDQ2My1hZDc2LTYxMjdkY2RlMmY2NSIsImFjc1RyYW5zSUQiOiIzNDk4YzEyMi1lZmFiLTQyN2ItYmRmNS0wYzUyZmNlODA4NTgiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMi4wIn0=\",\r\n    \"challenge_request_key\": \"creq\",\r\n    \"acs_reference_number\": \"3498c122-efab-427b-bdf5-0c52fce80858\",\r\n    \"acs_trans_id\": \"3498c122-efab-427b-bdf5-0c52fce80858\",\r\n    \"three_dsserver_trans_id\": \"8f93298c-b126-4463-ad76-6127dcde2f65\",\r\n    \"acs_signed_content\": null,\r\n    \"three_ds_requestor_url\": \"https://google.com\",\r\n    \"three_ds_requestor_app_url\": null\r\n}\r\n```\r\n\r\nCall Juspay 3DS Server\r\n```\r\ncurl --location 'https://mock-three-ds-server-small-lake-1937.fly.dev/processor/mock/acs/trigger-otp?redirectUrl=http%3A%2F%2Flocalhost%3A8080%2Fpayments%2Fpay_2CKMzGv6Fn3UBsB9s9tW%2Fpostman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa%2Fauthorize%2Fnuvei' \\\r\n--header 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' \\\r\n--header 'accept-language: en-GB,en-US;q=0.9,en;q=0.8' \\\r\n--header 'cache-control: no-cache' \\\r\n--header 'content-type: application/x-www-form-urlencoded' \\\r\n--header 'origin: https://juspay-3ds-sdk.netlify.app' \\\r\n--header 'pragma: no-cache' \\\r\n--header 'priority: u=0, i' \\\r\n--header 'referer: https://juspay-3ds-sdk.netlify.app/' \\\r\n--header 'sec-ch-ua: \"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"' \\\r\n--header 'sec-ch-ua-mobile: ?0' \\\r\n--header 'sec-ch-ua-platform: \"macOS\"' \\\r\n--header 'sec-fetch-dest: iframe' \\\r\n--header 'sec-fetch-mode: navigate' \\\r\n--header 'sec-fetch-site: cross-site' \\\r\n--header 'sec-fetch-storage-access: active' \\\r\n--header 'upgrade-insecure-requests: 1' \\\r\n--header 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36' \\\r\n--header 'api-key: dev_OLhAtJL71sjBsopNpxv8rRDRUPMsIBtIkIO9IRtKFzZfkyJwCJ9iaImStdtO3OuF' \\\r\n--data-urlencode 'creq={\"messageType\":\"CReq\",\"threeDSServerTransID\":\"8f93298c-b126-4463-ad76-6127dcde2f65\",\"acsTransID\":\"3498c122-efab-427b-bdf5-0c52fce80858\",\"challengeWindowSize\":\"01\",\"messageVersion\":\"2.2.0\"}'\r\n```\r\nResponse\r\n<img width=\"854\" height=\"843\" alt=\"Screenshot 2025-09-24 at 6 54 46 PM\" src=\"https://github.com/user-attachments/assets/4548fffc-00e4-44f3-a0ca-4971fb87aa36\" />\r\n\r\n\r\nRetreive \r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_2CKMzGv6Fn3UBsB9s9tW\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_bffbb66d-b37d-4fbd-9cf7-d79b8fae13fa\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 15100,\r\n    \"net_amount\": 15100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 15100,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_2CKMzGv6Fn3UBsB9s9tW_secret_rXSWY1A65ehM14tipPwW\",\r\n    \"created\": \"2025-09-24T13:21:25.664Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"BamboraCustomer\",\r\n    \"customer\": {\r\n        \"id\": \"BamboraCustomer\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"guest@example.com\",\r\n        \"phone\": \"999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"7736\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"222100\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"CL-BRW2\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"avs_description\": null,\r\n                \"card_validation_result\": \"\",\r\n                \"card_validation_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"version\": \"2.2.0\",\r\n                \"threeDReasonId\": \"\",\r\n                \"isLiabilityOnIssuer\": \"1\",\r\n                \"challengeCancelReason\": \"\",\r\n                \"challengeCancelReasonId\": \"\",\r\n                \"challengePreferenceReason\": \"\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_mQoCstXPpdPjuecDF4A8\",\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"guest@example.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"debit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000017364907\",\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": {\r\n            \"param\": \"\",\r\n            \"json_payload\": {}\r\n        },\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"9133109111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_6ckTHsNzmfCzzRKi2EVD\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_pLp74ti6st6k8YpYKNQu\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": {\r\n        \"authentication_flow\": \"challenge\",\r\n        \"electronic_commerce_indicator\": \"02\",\r\n        \"status\": \"success\",\r\n        \"ds_transaction_id\": \"8f93298c-b126-4463-ad76-6127dcde2f65\",\r\n        \"version\": \"2.2.0\",\r\n        \"error_code\": null,\r\n        \"error_message\": null\r\n    },\r\n    \"external_3ds_authentication_attempted\": true,\r\n    \"expires_on\": \"2025-09-24T13:36:25.664Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"480213756166352\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-24T13:24:39.222Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/unified_authentication_service.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/aci/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9545, "pr_title": "fix(core): fixed ctp bug for confirmation and added multi profile support for modular auth", "merged_at": "2025-09-24T17:21:34Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/unified_authentication_service.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/aci/transformers.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR hides the visible scrollbars on payment link's checkout widget.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payment_link/payment_link_initiate/payment_link.css`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9541, "pr_title": "fix(ui): hide visible scrollbar from checkout widget for windows", "merged_at": "2025-10-01T13:15:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "order"]}, "hierarchy": {"core_business": ["crates/router/src/core/payment_link/payment_link_initiate/payment_link.css"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nEnable L2l3 config for integ\r\n\r\nNO test needed. Just enabling config", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`", "metadata": {"pr_number": 9538, "pr_title": "fix(l2l3): enable l2l3 for integ", "merged_at": "2025-09-25T17:55:49Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"tests": ["config/deployments/integration_test.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR updates the payout MCA creation to use `sepa_bank_transfer` instead of `sepa`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9536, "pr_title": "chore(wasm): update sepa to sepa_bank_transfer for payout MCAs", "merged_at": "2025-09-25T07:49:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9508", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`", "metadata": {"pr_number": 9533, "pr_title": "fix(webhooks): move webhook acknowledge config to cover early deserialization errors", "merged_at": "2025-09-24T07:26:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nPaypal requires creation of access token before payment/payouts in its flow.\r\nIn Access token flow, we do get error response\r\n```\r\nPaypalAccessTokenErrorResponse { error: \\\"invalid_client\\\", error_description: \\\"Client Authentication failed\\\" }\r\n```\r\nThe error response gets updated on router data but we don’t do a early return based on this condition thus this gets overwritten by payout’s response.\r\nIn this case, even if access token is not generated (null), it still goes to payout create flow and fails at connector service with missing value (5xx) (edited)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/payouts/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (1 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9531, "pr_title": "fix(payouts): add should_continue flag for propagating error for each call", "merged_at": "2025-10-10T07:57:50Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payouts.rs", "crates/router/src/core/payouts/helpers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9508", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`", "metadata": {"pr_number": 9530, "pr_title": "fix(webhooks): move webhook acknowledge config to cover early deserialization errors", "merged_at": "2025-09-24T05:41:00Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request introduces a comprehensive set of changes to add invoice management capabilities to the codebase. The changes include new data models and enums for invoices, database schema and query support, and integration with connectors and APIs for invoice-related workflows.\r\n\r\n**Invoice Data Model and Enums**\r\n\r\n- Added the `InvoiceStatus` enum to represent the various states an invoice can be in, such as `InvoiceCreated`, `PaymentPending`, `PaymentSucceeded`, etc. (`crates/common_enums/src/connector_enums.rs`)\r\n- Introduced the `InvoiceRecordBackTrackingData` struct for tracking invoice-related process data, along with a constructor. (`crates/api_models/src/process_tracker/invoice_record_back.rs`)\r\n- Created a new `InvoiceId` type and implemented associated methods and traits, including event metric integration. (`crates/common_utils/src/id_type/invoice.rs`)\r\n- Registered the new `InvoiceId` in the global ID types and exposed it for use. (`crates/common_utils/src/id_type.rs`) [[1]](diffhunk://#diff-d949a6c528436f8ab1a851147e7467d525cba63b395b253d1dec17101a971fa1R10) [[2]](diffhunk://#diff-d949a6c528436f8ab1a851147e7467d525cba63b395b253d1dec17101a971fa1R51)\r\n- Added `Invoice` to the `ApiEventsType` enum for event categorization. (`crates/common_utils/src/events.rs`)\r\n- Extended the `ProcessTrackerRunner` enum to include `InvoiceRecordBackflow`. (`crates/common_enums/src/enums.rs`)\r\n\r\n**Database Schema and Models**\r\n\r\n- Added a new `invoice` table to the Diesel ORM schema (both v1 and v2), including all necessary fields and indices. (`crates/diesel_models/src/schema.rs`, `crates/diesel_models/src/schema_v2.rs`) [[1]](diffhunk://#diff-b3de56db64ac930fe24b6b0acb45282191598a506d20732f70ef00192b4b18d5R718-R751) [[2]](diffhunk://#diff-b3de56db64ac930fe24b6b0acb45282191598a506d20732f70ef00192b4b18d5R1767) [[3]](diffhunk://#diff-22fdeee3005db31c44a9d40cd43c5a244e77a74e17d2e227d4c0b376f133f37eR732-R765) [[4]](diffhunk://#diff-22fdeee3005db31c44a9d40cd43c5a244e77a74e17d2e227d4c0b376f133f37eR1722)\r\n- Implemented the `Invoice`, `InvoiceNew`, and `InvoiceUpdate` structs for ORM mapping, along with constructors and update methods. (`crates/diesel_models/src/invoice.rs`)\r\n- Added query support for inserting, finding, and updating invoices in the database. (`crates/diesel_models/src/query/invoice.rs`)\r\n- Registered the new `invoice` module in the Diesel models and query modules. (`crates/diesel_models/src/lib.rs`, `crates/diesel_models/src/query.rs`) [[1]](diffhunk://#diff-7eb95277f166342b9ffb08398f8165f1498aa8ecb4ac3b967133e4d682c382a3R27) [[2]](diffhunk://#diff-a8ff468e437001f77b303a9f63b47a6204ffc99b25dd4e9d9a122d5093b69f1cR25)\r\n\r\n**Connector and API Integration**\r\n\r\n- Added support for the invoice record backflow in the Chargebee and Recurly connectors, including trait implementations and integration with request/response types. (`crates/hyperswitch_connectors/src/connectors/chargebee.rs`, `crates/hyperswitch_connectors/src/connectors/recurly.rs`) [[1]](diffhunk://#diff-805dd853d554bb072ad3427d6b5ed7dc7b9ed62ee278f5adbf389a08266996b0R688) [[2]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdL12-R34) [[3]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdR151) [[4]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdR162-R171)\r\n- Updated the default connector implementations to support the new invoice record backflow and related API flows. (`crates/hyperswitch_connectors/src/default_implementations.rs`) [[1]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL46-R51) [[2]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL69-R75) [[3]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL133-R135) [[4]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beR6946-R6956)\r\n\r\n**API Models**\r\n\r\n- Added a new module for `invoice_record_back` in the process tracker API models. (`crates/api_models/src/process_tracker.rs`)\r\n\r\n---\r\n\r\n**Summary of Most Important Changes:**\r\n\r\n**Invoice Data Model and Enums**\r\n- Introduced the `InvoiceStatus` enum and the `InvoiceRecordBackTrackingData` struct for invoice state tracking and process workflows. [[1]](diffhunk://#diff-6b571cd80816c7f8efa676e546481b145ab156fe1f76b59a69796f218749aeb1R877-R889) [[2]](diffhunk://#diff-0358abeaeb311c146f922f8915a84016820331754f1e8cb6632dd6b48e3e2fceR1-R44)\r\n- Added a new `InvoiceId` type with associated methods and event metric integration. [[1]](diffhunk://#diff-dbf2199d67bff928fb938c82846a4e4c84e7fa9e077905ca3273556757f2675bR1-R21) [[2]](diffhunk://#diff-d949a6c528436f8ab1a851147e7467d525cba63b395b253d1dec17101a971fa1R10) [[3]](diffhunk://#diff-d949a6c528436f8ab1a851147e7467d525cba63b395b253d1dec17101a971fa1R51) [[4]](diffhunk://#diff-77f0e8abb88015b6a88d517bd4b0eb801b98ed2ac5a4a0fac5be92d4927ee780R89)\r\n- Extended process tracker and event enums for invoice support. [[1]](diffhunk://#diff-955707712c9bdbbd986dc29a9dd001579001580cf0a65e286ac8a2a25a2a49f2R9374) [[2]](diffhunk://#diff-77f0e8abb88015b6a88d517bd4b0eb801b98ed2ac5a4a0fac5be92d4927ee780R89)\r\n\r\n**Database Schema and Models**\r\n- Created a new `invoice` table in the Diesel schema, and implemented corresponding ORM structs and query methods for invoice creation, lookup, and updates. [[1]](diffhunk://#diff-b3de56db64ac930fe24b6b0acb45282191598a506d20732f70ef00192b4b18d5R718-R751) [[2]](diffhunk://#diff-b3de56db64ac930fe24b6b0acb45282191598a506d20732f70ef00192b4b18d5R1767) [[3]](diffhunk://#diff-22fdeee3005db31c44a9d40cd43c5a244e77a74e17d2e227d4c0b376f133f37eR732-R765) [[4]](diffhunk://#diff-22fdeee3005db31c44a9d40cd43c5a244e77a74e17d2e227d4c0b376f133f37eR1722) [[5]](diffhunk://#diff-cc8ce5ad039d65f1b8644286fe6abb6e8fae401fdb8e5f43f3984efdf2803696R1-R108) [[6]](diffhunk://#diff-d2c14bc247ee6cee7d5e45e9e967ff7d1cc3e98b98af02f7e5a4a8c6796f40fbR1-R41) [[7]](diffhunk://#diff-7eb95277f166342b9ffb08398f8165f1498aa8ecb4ac3b967133e4d682c382a3R27) [[8]](diffhunk://#diff-a8ff468e437001f77b303a9f63b47a6204ffc99b25dd4e9d9a122d5093b69f1cR25)\r\n\r\n**Connector and API Integration**\r\n- Added invoice record backflow support to Chargebee and Recurly connectors, and updated default connector implementations for new invoice-related flows. [[1]](diffhunk://#diff-805dd853d554bb072ad3427d6b5ed7dc7b9ed62ee278f5adbf389a08266996b0R688) [[2]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdL12-R34) [[3]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdR151) [[4]](diffhunk://#diff-987be7b07b93a35ac0316f1eb8ad93ece84e5280d37e5566964238d1c969a3fdR162-R171) [[5]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL46-R51) [[6]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL69-R75) [[7]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beL133-R135) [[8]](diffhunk://#diff-ee28a7003b898fbf15bb25eb102e2310a4c52ba46d3961e3f929f4cf6bd1f6beR6946-R6956)\r\n\r\n**API Models**\r\n- Registered a new `invoice_record_back` module in the process tracker API models.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery/types.rs`\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n   - ... and 1 more files\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - `crates/hyperswitch_connectors/src/connectors/stripebilling.rs`\n   - ... and 1 more files\n\n**5. Type Definitions**\n   - `crates/router/src/types/storage.rs`\n   - `crates/router/src/types/storage/invoice_sync.rs`\n   - `crates/scheduler/src/consumer/types/process_data.rs`\n\n**6. Utils**\n   - `crates/scheduler/src/utils.rs`\n\n**7. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Define new data structures (6 changes)\n- Implement new functions (23 changes)\n- Extend existing types with new fields (128 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 0a35c617:\nFiles to modify:\n\n\n**subscription.rs**\n  Modify existing code\n\n**enums.rs**\n  Modify existing code\n\n**chargebee.rs**\n  Add:\n    - impl: impl api::subscriptions::SubscriptionRecordBackFlow for Chargebee\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::SubscriptionRecordBackV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nInvoiceRecordBack,\nInvoiceRecordBackData,\nInvoiceRecordBackRequest,\nInvoiceRecordBackResponse,\n> for Recurly\n\n**stripebilling.rs**\n  Add:\n    - impl: impl subscriptions_api::Subscriptions for Stripebilling\n    - impl: impl subscriptions_api::GetSubscriptionPlansFlow for Stripebilling\n    - impl: impl subscriptions_api::SubscriptionRecordBackFlow for Stripebilling\n    - impl: impl subscriptions_api::SubscriptionCreate for Stripebilling\n    - impl: impl ConnectorIntegration<\nsubscription_flow_types::GetSubscriptionPlans,\nsubscription_request_types::GetSubscriptionPlansRequest,\nsubscription_response_types::GetSubscriptionPlansResponse,\n> for Stripebilling\n    - impl: impl subscriptions_api::GetSubscriptionPlanPricesFlow for Stripebilling\n    - impl: impl ConnectorIntegration<\nsubscription_flow_types::GetSubscriptionPlanPrices,\nsubscription_request_types::GetSubscriptionPlanPricesRequest,\nsubscription_response_types::GetSubscriptionPlanPricesResponse,\n> for Stripebilling\n    - impl: impl ConnectorIntegration<\nsubscription_flow_types::SubscriptionCreate,\nsubscription_request_types::SubscriptionCreateRequest,\nsubscription_response_types::SubscriptionCreateResponse,\n> for Stripebilling\n    - impl: impl subscriptions_api::GetSubscriptionEstimateFlow for Stripebilling\n    - impl: impl ConnectorIntegration<\nsubscription_flow_types::GetSubscriptionEstimate,\nsubscription_request_types::GetSubscriptionEstimateRequest,\nsubscription_response_types::GetSubscriptionEstimateResponse,\n> for Stripebilling\n    - impl: impl ConnectorIntegration<\nrecovery_router_flows::InvoiceRecordBack,\nrecovery_request_types::InvoiceRecordBackRequest,\nrecovery_response_types::InvoiceRecordBackResponse,\n> for Stripebilling\n\n**default_implementations.rs**\n  Remove:\n    - impl: impl ConnectorIntegration<\nInvoiceRecordBack,\nInvoiceRecordBackRequest,\nInvoiceRecordBackResponse\n> for $connector\n  Add:\n    - impl: impl SubscriptionRecordBackFlow for $connector\n    - impl: impl ConnectorIntegration<InvoiceRecordBack, InvoiceRecordBackRequest, InvoiceRecordBackResponse> for $path::$connector\n\n#[cfg(feature = \"dummy_connector\")]\nimpl<const T: u8> SubscriptionRecordBackFlow for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<InvoiceRecordBack, InvoiceRecordBackRequest, InvoiceRecordBackResponse> for connectors::DummyConnector<T>\n\n**flow_common_types.rs**\n  Remove:\n    - struct: pub::InvoiceRecordBackData\n  Add:\n    - struct: pub::InvoiceRecordBackData\n\n**subscriptions.rs**\n  Remove:\n    - trait: pub::GetSubscriptionPlansFlow\n    - trait: pub::GetSubscriptionPlanPricesFlow\n    - trait: pub::ConnectorCustomer\n    - trait: pub::SubscriptionCreate\n    - trait: pub::GetSubscriptionEstimateFlow\n  Add:\n    - trait: pub::SubscriptionRecordBackFlow\n\n**subscriptions_v2.rs**\n  Add:\n    - trait: private::SubscriptionRecordBackV2\n\n**conversion_impls.rs**\n  Modify existing code\n\n**scheduler.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**subscription.rs**\n  Modify existing code\n\n**billing_processor_handler.rs**\n  Add:\n    - function: pub::record_back_to_billing_processor\n\n**invoice_handler.rs**\n  Add:\n    - function: pub::new\n    - function: pub::get_invoice_by_id\n\n**storage.rs**\n  Add:\n    - mod: pub::invoice_sync\n\n**invoice_sync.rs**\n  Add:\n    - function: private::from\n    - function: pub::new\n    - function: pub::new\n    - function: private::from\n    - function: private::from\n    - struct: pub::InvoiceSyncTrackingData\n    - struct: pub::InvoiceSyncRequest\n    - enum: pub::InvoiceSyncPaymentStatus\n    - impl: impl From<InvoiceSyncRequest> for InvoiceSyncTrackingData\n    - impl: impl InvoiceSyncRequest\n    - impl: impl InvoiceSyncTrackingData\n    - impl: impl From<common_enums::IntentStatus> for InvoiceSyncPaymentStatus\n    - impl: impl From<InvoiceSyncPaymentStatus> for common_enums::connector_enums::InvoiceStatus\n\n**workflows.rs**\n  Add:\n    - mod: pub::invoice_sync\n\n**invoice_sync.rs**\n  Add:\n    - function: private::from\n    - function: pub::new\n    - function: pub::new\n    - function: private::from\n    - function: private::from\n    - struct: pub::InvoiceSyncTrackingData\n    - struct: pub::InvoiceSyncRequest\n    - enum: pub::InvoiceSyncPaymentStatus\n    - impl: impl From<InvoiceSyncRequest> for InvoiceSyncTrackingData\n    - impl: impl InvoiceSyncRequest\n    - impl: impl InvoiceSyncTrackingData\n    - impl: impl From<common_enums::IntentStatus> for InvoiceSyncPaymentStatus\n    - impl: impl From<InvoiceSyncPaymentStatus> for common_enums::connector_enums::InvoiceStatus\n\n**process_data.rs**\n  Add:\n    - function: private::default\n    - struct: pub::SubscriptionInvoiceSyncPTMapping\n    - impl: impl Default for SubscriptionInvoiceSyncPTMapping\n\n**utils.rs**\n  Add:\n    - function: pub::get_subscription_invoice_sync_retry_schedule_time", "metadata": {"pr_number": 9529, "pr_title": "feat(subscriptions): Invoice record back workflow", "merged_at": "2025-10-03T19:49:18Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs"], "core_business": ["crates/router/src/core/revenue_recovery/types.rs", "crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs", "crates/router/src/core/subscription/invoice_handler.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/connectors/stripebilling.rs", "crates/hyperswitch_connectors/src/default_implementations.rs"], "types": ["crates/router/src/types/storage.rs", "crates/router/src/types/storage/invoice_sync.rs", "crates/scheduler/src/consumer/types/process_data.rs"], "utils": ["crates/scheduler/src/utils.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/bin/scheduler.rs", "crates/router/src/workflows.rs", "crates/router/src/workflows/invoice_sync.rs"]}, "change_types": {"structs_added": 6, "functions_added": 23, "enums_added": 1, "fields_added": 128, "imports_added": 14, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\ndata in tokenize flow for tokenex accepts only length of 13-19 chars,  we are sending complete card data.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n   - `crates/hyperswitch_domain_models/src/vault.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n   - `crates/router/src/core/payment_methods/vault.rs`\n   - `crates/router/src/core/payments/helpers.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/tokenex.rs`\n   - `crates/hyperswitch_connectors/src/connectors/tokenex/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (64 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 84f3013c:\nFiles to modify:\n\n\n**tokenex.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payment_method_data.rs**\n  Add:\n    - function: pub::get_card_details\n    - function: private::try_from\n    - impl: impl TryFrom<(\ncards::CardNumber,\nOption<&CardToken>,\nOption<payment_methods::CoBadgedCardData>,\nCardDetailsPaymentMethod,\n)> for Card\n\n**vault.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Modify existing code\n\n**vault.rs**\n  Modify existing code\n\n**helpers.rs**\n  Modify existing code", "metadata": {"pr_number": 9528, "pr_title": "fix(connector): [Tokenex] fix tokenize flow response handling for tokenex", "merged_at": "2025-09-25T16:22:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payment_method_data.rs", "crates/hyperswitch_domain_models/src/vault.rs"], "core_business": ["crates/router/src/core/payment_methods.rs", "crates/router/src/core/payment_methods/vault.rs", "crates/router/src/core/payments/helpers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/tokenex.rs", "crates/hyperswitch_connectors/src/connectors/tokenex/transformers.rs"]}, "change_types": {"functions_added": 2, "fields_added": 64, "imports_added": 3, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Implement payments, psync and refunds flow for Gigadat", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/common_config.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - ... and 9 more files\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**5. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n   - ... and 1 more files\n\n**6. Other**\n   - `.github/CODEOWNERS`\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (7 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (87 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 93b97ef5:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**common_config.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**gigadat.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - struct: pub::GigadatConnectorMetadataObject\n    - impl: impl TryFrom<&Option<pii::SecretSerdeValue>> for GigadatConnectorMetadataObject\n\n**payment_connector_required_fields.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9525, "pr_title": "feat(connector): [Gigadat] integrate interac bank redirect payment method", "merged_at": "2025-09-25T07:17:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/common_config.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/gigadat.rs", "crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/test_utils/src/connector_auth.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"], "other": [".github/CODEOWNERS", "api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 7, "functions_added": 4, "enums_added": 1, "fields_added": 87, "imports_added": 9}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd wasm field to collect merchant secret for payout webhook integration", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9524, "pr_title": "feat(euclid_wasm): add wasm changes for payout webhooks", "merged_at": "2025-09-24T06:58:53Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "webhook"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd a validation to check if payment method data passed in the request, if not passed decryption flow will be skipped\r\n\r\nmain branch pr: https://github.com/juspay/hyperswitch/pull/9521", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`", "metadata": {"pr_number": 9522, "pr_title": "fix(router): check payment_method_data before the decryption flow", "merged_at": "2025-09-24T08:06:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd a validation to check if payment method data passed in the request, if not passed decryption flow will be skipped", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`", "metadata": {"pr_number": 9521, "pr_title": "fix(router): check payment_method_data before the decryption flow", "merged_at": "2025-09-23T20:19:02Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nEarlier, the `additional_payment_method_data` was not being updated in the psync call because the check was applied on `payment_data.payment_method_data`, which at the time of the psync call was not populated.\r\nIn this PR, we have updated the logic to apply the check on the `payment_method_data` field of the `payment_attempt` table instead. This ensures that the `additional_payment_method_data` is correctly populated during the psync call.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_response.rs`", "metadata": {"pr_number": 9519, "pr_title": "feat(core): update additional payment method data in psync response", "merged_at": "2025-09-26T08:26:11Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/payment_response.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for https://github.com/juspay/hyperswitch/pull/9459\r\n\r\nMandatorily send cvv to nexixpay card payments.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9517, "pr_title": "fix(connectors): [Nexixpay] send cvv in nexixpay requests", "merged_at": "2025-09-24T05:46:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for this [PR](https://github.com/juspay/hyperswitch/pull/9476)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (10 changes)", "metadata": {"pr_number": 9516, "pr_title": "fix(connector): [NEXIXPAY] Updated the Api Response Schema", "merged_at": "2025-09-24T05:53:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"structs_added": 1, "enums_added": 1, "fields_added": 10, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nConnectors like Nuvei requires a field called as `storedCredentialMode` which represents if the merchant is using a card details which they previously used for same connector or any other PSP. This is used for risk lowering based on PSP's.\r\n\r\n- Make a `is_stored_credential` in payment request if the merchant knows this is stored_credential. ( in this case merchant stores the card in his server . No way hyperswitch knows if this is stored or not)\r\n- if `is_stored_credential` = false but using payment token or mandate or recurring flow  : throw error.\r\n- if `is_stored_credential` = None but using payment token or mandate or recurring flow : make the is_stored_credential as true in core", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - ... and 1 more files\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payment_methods/cards.rs`\n   - `crates/router/src/core/payments/helpers.rs`\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n   - ... and 4 more files\n\n**5. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n   - `crates/router/src/types/api/verify_connector.rs`\n   - ... and 1 more files\n\n**6. Type Definitions**\n   - `crates/router/src/types.rs`\n   - `crates/router/src/types/storage/payment_attempt.rs`\n\n**7. Utils**\n   - `crates/router/src/utils/user/sample_data.rs`\n\n**8. Tests**\n   - `crates/router/tests/payments.rs`\n   - `crates/router/tests/payments2.rs`\n\n**9. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/router/src/db/events.rs`\n   - `crates/storage_impl/src/mock_db/payment_attempt.rs`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (7 changes)\n- Extend existing types with new fields (92 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit b776f92e:\nFiles to modify:\n\n\n**payments.rs**\n  Add:\n    - function: pub::validate_stored_credential\n\n**payment_attempt.rs**\n  Modify existing code\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**sample_data.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: private::get_is_stored_credential\n    - function: private::get_is_stored_credential\n    - function: private::get_is_stored_credential\n    - function: pub::get_optional_stored_credential\n    - struct: pub::StoredCredentialMode\n    - enum: pub::StoredCredentialModeType\n    - impl: impl StoredCredentialMode\n\n**utils.rs**\n  Modify existing code\n\n**payment_attempt.rs**\n  Modify existing code\n\n**router_request_types.rs**\n  Modify existing code\n\n**cards.rs**\n  Modify existing code\n\n**helpers.rs**\n  Add:\n    - function: pub::is_stored_credential\n\n**payment_confirm.rs**\n  Modify existing code\n\n**payment_create.rs**\n  Modify existing code\n\n**payment_update.rs**\n  Modify existing code\n\n**retry.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: private::get_is_stored_credential\n    - function: private::get_is_stored_credential\n    - function: private::get_is_stored_credential\n    - function: pub::get_optional_stored_credential\n    - struct: pub::StoredCredentialMode\n    - enum: pub::StoredCredentialModeType\n    - impl: impl StoredCredentialMode\n\n**events.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**verify_connector.rs**\n  Modify existing code\n\n**payment_attempt.rs**\n  Modify existing code\n\n**sample_data.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - function: pub::validate_stored_credential\n\n**payments2.rs**\n  Modify existing code\n\n**payment_attempt.rs**\n  Modify existing code\n\n**payment_attempt.rs**\n  Modify existing code", "metadata": {"pr_number": 9515, "pr_title": "feat(core): [Nuvei] add stored credentials flag ", "merged_at": "2025-09-30T12:33:11Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_attempt.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/user/sample_data.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments/payment_attempt.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payment_methods/cards.rs", "crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/operations/payment_update.rs", "crates/router/src/core/payments/retry.rs", "crates/router/src/core/payments/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/src/types/api/verify_connector.rs", "crates/router/tests/connectors/utils.rs"], "types": ["crates/router/src/types.rs", "crates/router/src/types/storage/payment_attempt.rs"], "utils": ["crates/router/src/utils/user/sample_data.rs"], "tests": ["crates/router/tests/payments.rs", "crates/router/tests/payments2.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/router/src/db/events.rs", "crates/storage_impl/src/mock_db/payment_attempt.rs", "crates/storage_impl/src/payments/payment_attempt.rs", "migrations/2025-09-22-084821_add_stored_credentials_payment_intent/down.sql", "migrations/2025-09-22-084821_add_stored_credentials_payment_intent/up.sql"]}, "change_types": {"structs_added": 1, "functions_added": 7, "enums_added": 1, "fields_added": 92, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9426", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (11 changes)", "metadata": {"pr_number": 9514, "pr_title": "fix(payouts): populate additional payout method data during recurring payouts", "merged_at": "2025-09-23T17:50:58Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payment_method_data.rs"], "core_business": ["crates/router/src/core/payouts.rs"]}, "change_types": {"functions_added": 1, "fields_added": 11}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nCUG Hotfix for [9444](https://github.com/juspay/hyperswitch/pull/9444)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9513, "pr_title": "fix(connector): [CYBERSOURCE] Pass transaction type for only wallet MITs", "merged_at": "2025-09-23T11:32:36Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR addresses the clippy lints occurring due to new rust version 1.90.0", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/fraud_check/operation.rs`\n   - `crates/router/src/core/fraud_check/operation/fraud_check_post.rs`\n   - `crates/router/src/core/fraud_check/operation/fraud_check_pre.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/globalpay/requests.rs`\n   - `crates/hyperswitch_connectors/src/connectors/globalpay/response.rs`\n   - ... and 5 more files\n\n**3. Other**\n   - `crates/analytics/src/sqlx.rs`\n   - `crates/router/src/db.rs`\n   - `crates/router/src/db/kafka_store.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Implement new functions (14 changes)", "metadata": {"pr_number": 9511, "pr_title": "chore: address Rust 1.90.0 clippy lints", "merged_at": "2025-09-25T19:13:45Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"core_business": ["crates/router/src/core/fraud_check/operation.rs", "crates/router/src/core/fraud_check/operation/fraud_check_post.rs", "crates/router/src/core/fraud_check/operation/fraud_check_pre.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs", "crates/hyperswitch_connectors/src/connectors/globalpay/requests.rs", "crates/hyperswitch_connectors/src/connectors/globalpay/response.rs", "crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs", "crates/hyperswitch_connectors/src/connectors/payload/responses.rs", "crates/hyperswitch_connectors/src/connectors/signifyd/transformers/api.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/requests.rs", "crates/hyperswitch_connectors/src/connectors/worldpay/response.rs"], "other": ["crates/analytics/src/sqlx.rs", "crates/router/src/db.rs", "crates/router/src/db/kafka_store.rs", "crates/router/src/routes/app.rs", "crates/router/src/services/api/client.rs"]}, "change_types": {"functions_added": 14}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nSome cards have optional `eci_provider` which causes 4xx missing  field error. Make that optional.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9509, "pr_title": "fix(nuvei): make `eci_provider` in applepay decrypt flow non mandatory field", "merged_at": "2025-09-24T16:51:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR includes changes to make incoming webhooks respect the acknowledge config\r\n\r\n- Wrapped both UCS and non-UCS webhook processing in unified error handling\r\n- Applied `handle_incoming_webhook_error` to catch deserialization failures before they propagate\r\n- Ensured config check covers `decode_webhook_body` errors and `get_webhook_event_type` failures", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`", "metadata": {"pr_number": 9508, "pr_title": "fix(webhooks): move webhook acknowledge config to cover early deserialization errors", "merged_at": "2025-09-23T20:19:02Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "user", "webhook"]}, "hierarchy": {"core_business": ["crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis feature add connector-level tokenization to Hyperswitch V2, allowing secure storage of card data as tokens at payment connectors like Braintree.\r\nAdditionally Tokenization in router is not implemented, because of temp locker mechanism which is still pending.  \r\n\r\nFor connector-level tokenization:\r\n1.When a payment comes with raw card data and the connector supports tokenization, send the card details to the connector’s tokenization API.\r\n2. Receive the tokenized payment method ID.\r\n3. Use the token for the subsequent payment call.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/operations.rs`\n   - `crates/router/src/core/payments/operations/payment_confirm_intent.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (4 changes)\n- Extend existing types with new fields (13 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit efab34f0:\nFiles to modify:\n\n\n**payments.rs**\n  Add:\n    - function: private::is_payment_method_tokenization_enabled_for_connector\n    - function: private::is_payment_flow_allowed_for_connector\n    - enum: pub::TokenizationAction\n\n**operations.rs**\n  Add:\n    - function: private::get_connector_tokenization_action\n\n**payment_confirm_intent.rs**\n  Add:\n    - function: private::get_connector_tokenization_action", "metadata": {"pr_number": 9506, "pr_title": "feat(payments): add tokenization action handling to payment flow for braintree", "merged_at": "2025-09-30T08:07:13Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/operations.rs", "crates/router/src/core/payments/operations/payment_confirm_intent.rs"]}, "change_types": {"functions_added": 4, "enums_added": 1, "fields_added": 13, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdd happy cases + variation cases for manual retry feature", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Commons.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Cybersource.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (166 changes)\n- Add conditional logic for feature flags or filtering (15 changes)", "metadata": {"pr_number": 9505, "pr_title": "feat(cypress): add cypress test-cases for manual retry", "merged_at": "2025-09-26T09:01:20Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"tests": ["cypress-tests/cypress/e2e/configs/Payment/Commons.js", "cypress-tests/cypress/e2e/configs/Payment/Cybersource.js", "cypress-tests/cypress/e2e/configs/Payment/Utils.js", "cypress-tests/cypress/e2e/spec/Payment/00032-ManualRetry.cy.js"]}, "change_types": {"fields_added": 166, "conditionals_added": 15}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAllow accepting liability when the dispute stage is Arbitration\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\nCannot be tested \r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/utils.rs`", "metadata": {"pr_number": 9504, "pr_title": "fix(core): allow accepting liability during arbitration stage", "merged_at": "2025-09-24T06:25:18Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/utils.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR adds support for partial auth in proxy payments which is triggered in revenue recovery workflow. \r\n`enable_partial_authorization` is passed in `/recovery` flow, which update payment intent with enable_partial_authorization to true. Proxy(authorize) will gets triggered by recovery execute workflow, which will then send the same to connector. Based on `amount_captured` send by connector we either move the payment to success/ PartialCharged. \r\n\r\nNOTE : changes are still pending for normal payments partial auth. \r\n\r\nThis PR also contains few changes regarding revenue recovery workflow where we consider PartialCharged payments as Succeeded. We will the resume later when auto retries system is enabled for partial charged payments.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_intent.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_intent.rs`\n   - `crates/hyperswitch_domain_models/src/revenue_recovery.rs`\n   - ... and 2 more files\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n   - `crates/router/src/core/payments/operations/payment_update_intent.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n   - ... and 1 more files\n\n**5. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/stripebilling/transformers.rs`\n   - ... and 2 more files\n\n**6. Type Definitions**\n   - `crates/common_types/src/primitive_wrappers.rs`\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/services/kafka/payment_intent.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (66 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c90744a6:\nFiles to modify:\n\n\n**payments.rs**\n  Modify existing code\n\n**primitive_wrappers.rs**\n  Add:\n    - function: private::deref\n    - function: private::from\n    - function: pub::is_true\n    - function: private::to_sql\n    - function: private::from_sql\n    - struct: pub::EnablePartialAuthorizationBool\n    - impl: impl Deref for EnablePartialAuthorizationBool\n    - impl: impl From<bool> for EnablePartialAuthorizationBool\n    - impl: impl EnablePartialAuthorizationBool\n    - impl: impl diesel::serialize::ToSql<diesel::sql_types::Bool, DB> for EnablePartialAuthorizationBool\n    - impl: impl diesel::deserialize::FromSql<diesel::sql_types::Bool, DB> for EnablePartialAuthorizationBool\n\n**payment_intent.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**payment_intent.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**router_data.rs**\n  Modify existing code\n\n**router_request_types.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Modify existing code\n\n**payment_update_intent.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payment_intent.rs**\n  Modify existing code\n\n**payment_intent_event.rs**\n  Modify existing code", "metadata": {"pr_number": 9503, "pr_title": "feat(core): Add support for partial auth in proxy payments [V2]", "merged_at": "2025-09-30T07:14:23Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_intent.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_intent.rs", "crates/hyperswitch_domain_models/src/revenue_recovery.rs", "crates/hyperswitch_domain_models/src/router_data.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payment_methods.rs", "crates/router/src/core/payments/operations/payment_update_intent.rs", "crates/router/src/core/payments/transformers.rs", "crates/router/src/core/revenue_recovery/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripebilling/transformers.rs", "crates/hyperswitch_connectors/src/connectors/worldpayvantiv/transformers.rs", "crates/router/src/connector/utils.rs"], "types": ["crates/common_types/src/primitive_wrappers.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/services/kafka/payment_intent.rs", "crates/router/src/services/kafka/payment_intent_event.rs"]}, "change_types": {"structs_added": 1, "functions_added": 6, "fields_added": 66, "imports_added": 8, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdded cypress for ACI.\r\n\r\nFollowing bugs were detected while adding cypress, this PR includes the fix for those as well:\r\n\r\n1. `card_network` is required field only for network_token and not for normal card_payment, so made the field optional and populated missing error only for network_token flow.\r\n2. When clicked technical_error after redirection, on returning back server was throwing 500 because the code for technical_error was not included in `aci/aci_result_codes.rs`.\r\n3. Some fields are optional in capture response, handled it by making them optional.\r\n4. For Void flow, separate `try_from` was not there previously and one for `Capture` was getting used up. This was causing incorrect status mapping for `Void`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/aci/aci_result_codes.rs`\n   - `crates/hyperswitch_connectors/src/connectors/aci/transformers.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Aci.js`\n   - `cypress-tests/cypress/support/redirectionHandler.js`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (235 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 1c52f699:\nFiles to modify:\n\n\n**aci_result_codes.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9502, "pr_title": "feat(connector): [ACI] cypress added", "merged_at": "2025-09-29T09:09:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "token"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/aci/aci_result_codes.rs", "crates/hyperswitch_connectors/src/connectors/aci/transformers.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Aci.js", "cypress-tests/cypress/support/redirectionHandler.js"]}, "change_types": {"structs_added": 1, "functions_added": 3, "enums_added": 1, "fields_added": 235}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9497, "pr_title": "refactor(connector): [Paysafe] populate error code and message for 200 errors", "merged_at": "2025-09-23T19:41:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs"]}, "change_types": {"fields_added": 9, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nConnectors which accept FormData type request, their `raw_connector_request` weren't being logged. Added masking support and logging form-data type requests.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout.rs`\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/fiuu.rs`\n   - ... and 3 more files\n\n**3. Utils**\n   - `crates/common_utils/src/request.rs`\n\n**4. Other**\n   - `crates/external_services/src/http_client.rs`\n   - `crates/injector/src/vault_metadata.rs`\n   - `crates/router/src/services/api.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (18 changes)", "metadata": {"pr_number": 9496, "pr_title": "feat(core): Add masking support for form-data types request", "merged_at": "2025-10-07T17:32:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payment_methods.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/checkout.rs", "crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs", "crates/hyperswitch_connectors/src/connectors/fiuu.rs", "crates/hyperswitch_connectors/src/connectors/hipay.rs", "crates/hyperswitch_connectors/src/connectors/stripe.rs", "crates/hyperswitch_connectors/src/connectors/stripe/transformers.rs"], "utils": ["crates/common_utils/src/request.rs"], "other": ["crates/external_services/src/http_client.rs", "crates/injector/src/vault_metadata.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 2, "functions_added": 4, "fields_added": 18, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nWith this PR, whether extended_authorization is requested or not is stored will be stored in the payment_attempt and this value will be populated to a request_extended_authorization field of payments response.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n\n**5. Tests**\n   - `crates/router/tests/payments.rs`\n   - `crates/router/tests/payments2.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/router/src/db/events.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (33 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9492, "pr_title": "fix(core): add request_extended_authorization in the payment attempt and populate it in the payment response", "merged_at": "2025-09-26T08:02:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_attempt.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_attempt.rs"], "core_business": ["crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/payments/transformers.rs"], "tests": ["crates/router/tests/payments.rs", "crates/router/tests/payments2.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/router/src/db/events.rs"]}, "change_types": {"fields_added": 33, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This pull request introduces a new strongly-typed `InvoiceId` identifier and integrates it throughout the codebase to improve type safety and consistency for invoice-related operations. The changes affect both the common utilities and the invoice models, updating struct fields and constructors to use the new type instead of raw strings.", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n\n**2. Utils**\n   - `crates/common_utils/src/events.rs`\n   - `crates/common_utils/src/id_type.rs`\n   - `crates/common_utils/src/id_type/invoice.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9488, "pr_title": "refactor(subscription): make invoice as an id type", "merged_at": "2025-09-24T13:09:43Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": []}, "hierarchy": {"database": ["crates/diesel_models/src/invoice.rs"], "utils": ["crates/common_utils/src/events.rs", "crates/common_utils/src/id_type.rs", "crates/common_utils/src/id_type/invoice.rs"]}, "change_types": {"functions_added": 1, "fields_added": 5, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Adds a new API endpoint GET /user/role/v3 that returns user role permissions using parent group information with resource details.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/user_role/role.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/user_role.rs`\n   - `crates/router/src/core/user_role/role.rs`\n\n**3. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n   - `crates/router/src/utils/user_role.rs`\n\n**5. Other**\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/user_role.rs`\n   - `crates/router/src/services/authorization/permission_groups.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (5 changes)\n- Extend existing types with new fields (24 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (8 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c44c3ed2:\nFiles to modify:\n\n\n**role.rs**\n  Remove:\n    - struct: pub::ParentGroupInfo\n  Add:\n    - struct: pub::ParentGroupDescription\n\n**user_role.rs**\n  Modify existing code\n\n**role.rs**\n  Remove:\n    - struct: pub::ParentGroupInfo\n  Add:\n    - struct: pub::ParentGroupDescription\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**user_role.rs**\n  Modify existing code\n\n**permission_groups.rs**\n  Modify existing code\n\n**permissions.rs**\n  Add:\n    - function: pub::filter_resources_by_entity_type\n\n**user_role.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9487, "pr_title": "feat(user_roles): add parent group info based API to fetch permissions for user role", "merged_at": "2025-10-07T15:25:25Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/user_role/role.rs"], "core_business": ["crates/router/src/core/user_role.rs", "crates/router/src/core/user_role/role.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs", "crates/router/src/utils/user_role.rs"], "other": ["crates/router/src/routes/app.rs", "crates/router/src/routes/user_role.rs", "crates/router/src/services/authorization/permission_groups.rs", "crates/router/src/services/authorization/permissions.rs"]}, "change_types": {"structs_added": 2, "functions_added": 5, "fields_added": 24, "imports_added": 1, "conditionals_added": 1, "database_queries": 8}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- Fixed 3DS payments for Shift4.\r\n- Updated shift4 authentication to use the direct secret key from shift4 dashboard, removing the need for manual Base64 encoding.\r\n- Updated error messages for unsupported flows like Void and Partial Captures.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/shift4.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Shift4.js`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (12 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9480, "pr_title": "fix(connector): [SHIFT4] Fix 3DS payments and api key", "merged_at": "2025-09-24T14:07:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "card"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/shift4.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Shift4.js"]}, "change_types": {"functions_added": 1, "fields_added": 12, "imports_added": 2, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nWe were getting a 500 in prod primarily for a `warnings` field which was incorrectly mapped type. \r\nAlso, we were sending country as alpha2, should be sent as Alpha3.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (10 changes)", "metadata": {"pr_number": 9476, "pr_title": "fix(connector): [NEXIXPAY] Updated the Api Response Schema", "merged_at": "2025-09-23T08:41:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"structs_added": 1, "enums_added": 1, "fields_added": 10, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "add client_secret auth auth type for list_blocked_payment_methods", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/blocklist.rs`\n\n**2. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/routes/blocklist.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9475, "pr_title": "feat(core): add client_auth auth type for list_blocked_payment_methods", "merged_at": "2025-09-22T18:44:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "card"]}, "hierarchy": {"api_models": ["crates/api_models/src/blocklist.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/routes/blocklist.rs", "crates/router/src/services/authentication.rs"]}, "change_types": {"functions_added": 1, "fields_added": 3, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR adds a referer field to the BrowserInformation struct to capture the HTTP Referer header value from client requests.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/unified_connector_service/transformers.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/trustpay/transformers.rs`\n   - `crates/router/tests/connectors/trustpay.rs`\n   - `crates/router/tests/connectors/utils.rs`\n\n**4. Type Definitions**\n   - `crates/common_utils/src/types.rs`\n\n**5. Utils**\n   - `crates/router/src/routes/payments/helpers.rs`\n\n**6. Configuration Files**\n   - `crates/external_services/Cargo.toml`\n   - `crates/router/Cargo.toml`\n\n**7. Other**\n   - `Cargo.lock`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/services/api.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (13 changes)", "metadata": {"pr_number": 9474, "pr_title": "feat(core): add referer field to browser_info", "merged_at": "2025-09-24T16:51:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/unified_connector_service/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/trustpay/transformers.rs", "crates/router/tests/connectors/trustpay.rs", "crates/router/tests/connectors/utils.rs"], "types": ["crates/common_utils/src/types.rs"], "utils": ["crates/router/src/routes/payments/helpers.rs"], "config": ["crates/external_services/Cargo.toml", "crates/router/Cargo.toml"], "other": ["Cargo.lock", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/services/api.rs"]}, "change_types": {"fields_added": 13}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nShow Error Message during 3ds un-sussessful error redirection", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9471, "pr_title": "Fix(connector): [NUVEI] 3ds unsuccessful redirection error msg", "merged_at": "2025-09-23T16:31:06Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd external vault insert - tokenize and retrieve - detokenize flows for tokenex vault connector", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n   - `crates/router/src/core/unified_connector_service.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 7 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**5. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (34 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 62b64d84:\nFiles to modify:\n\n\n**enums.rs**\n  Modify existing code\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**tokenex.rs**\n  Remove:\n    - function: pub::new\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_content_type\n    - struct: pub::Tokenex\n    - impl: impl Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n  Add:\n    - struct: pub::Tokenex\n    - impl: impl api::ExternalVaultInsert for Tokenex\n    - impl: impl api::ExternalVault for Tokenex\n    - impl: impl api::ExternalVaultRetrieve for Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<ExternalVaultInsertFlow, VaultRequestData, VaultResponseData> for tokenex::TokenexInsertRequest::try_from(req)\n    - mod: pub::auth_headers\n\n**transformers.rs**\n  Remove:\n    - struct: pub::TokenexPaymentsRequest\n  Add:\n    - struct: pub::TokenexInsertRequest\n\n**default_implementations.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code\n\n**tokenex.rs**\n  Remove:\n    - function: pub::new\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_content_type\n    - struct: pub::Tokenex\n    - impl: impl Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n  Add:\n    - struct: pub::Tokenex\n    - impl: impl api::ExternalVaultInsert for Tokenex\n    - impl: impl api::ExternalVault for Tokenex\n    - impl: impl api::ExternalVaultRetrieve for Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<ExternalVaultInsertFlow, VaultRequestData, VaultResponseData> for tokenex::TokenexInsertRequest::try_from(req)\n    - mod: pub::auth_headers\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9470, "pr_title": "feat(connector): [Tokenex]Add external vault insert and retrieve flows ", "merged_at": "2025-09-23T08:38:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector", "token"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs"], "core_business": ["crates/router/src/core/connector_validation.rs", "crates/router/src/core/unified_connector_service.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/hyperswitch_connectors/src/connectors/tokenex.rs", "crates/hyperswitch_connectors/src/connectors/tokenex/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/router/tests/connectors/tokenex.rs", "crates/test_utils/src/connector_auth.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 5, "functions_added": 3, "fields_added": 34, "imports_added": 5}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Added `split_payment_method_data` field to `confirm-intent` call to accept a `Vec` of payment methods\r\n\r\n<img width=\"502\" height=\"763\" alt=\"image\" src=\"https://github.com/user-attachments/assets/69ae3cc4-3d06-4980-b2d9-52b489aa98ad\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/openapi/src/openapi_v2.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9469, "pr_title": "feat(router): Add Confirm-Intent API contract changes for split payments (v2)", "merged_at": "2025-09-25T17:56:40Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"structs_added": 1, "fields_added": 5}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (12 changes)", "metadata": {"pr_number": 9468, "pr_title": "feat(connector): [Nuvei] Add Support for External 3DS Auth ", "merged_at": "2025-09-22T18:35:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"structs_added": 1, "functions_added": 2, "fields_added": 12}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdded DB changes for split payments\r\n\r\nIn PaymentIntent:\r\n- Add `active_attempts_group_id` column\r\n- Add `active_attempt_id_type` column\r\n\r\nIn PaymentAttempt:\r\n- Add `attempts_group_id` column\r\n\r\nWhile currently a payment_intent can have only a single active_attempt, For split payments case, a payment_intent will have a group of active attempts. These attempts will be linked together by the `attempts_group_id`.\r\n\r\nThis `attempts_group_id` will be stored in the payment intent as the `active_attempts_group_id`. The active_attempt_id will be ignored in split payments case.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n   - `crates/diesel_models/src/payment_intent.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_intent.rs`\n\n**3. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/router/src/services/kafka/payment_attempt.rs`\n   - `crates/router/src/services/kafka/payment_attempt_event.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (32 changes)", "metadata": {"pr_number": 9466, "pr_title": "feat(router): Add attempts_group DB changes for split payments (v2)", "merged_at": "2025-09-24T08:41:25Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment"]}, "hierarchy": {"database": ["crates/diesel_models/src/payment_attempt.rs", "crates/diesel_models/src/payment_intent.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_attempt.rs", "crates/hyperswitch_domain_models/src/payments/payment_intent.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/router/src/services/kafka/payment_attempt.rs", "crates/router/src/services/kafka/payment_attempt_event.rs", "crates/router/src/services/kafka/payment_intent.rs", "crates/router/src/services/kafka/payment_intent_event.rs", "v2_compatible_migrations/2025-09-19-061700-0000_add-group-id-in-payment-intent-and-attempt/down.sql", "v2_compatible_migrations/2025-09-19-061700-0000_add-group-id-in-payment-intent-and-attempt/up.sql"]}, "change_types": {"enums_added": 1, "fields_added": 32}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Add resume api to resume/continue the tasks in process tracker for revenue_recovery. This PR enables us to resume the EXECUTE and CALCULATE  that are stuck in an intermediate state .", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/events/revenue_recovery.rs`\n   - `crates/api_models/src/process_tracker/revenue_recovery.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery.rs`\n\n**3. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**5. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/process_tracker/revenue_recovery.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (28 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit a4b6df08:\nFiles to modify:\n\n\n**revenue_recovery.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for RevenueRecoveryRetriggerRequest\n\n**revenue_recovery.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for RevenueRecoveryRetriggerRequest\n\n**revenue_recovery.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for RevenueRecoveryRetriggerRequest\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for RevenueRecoveryRetriggerRequest\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9461, "pr_title": "feat(process_tracker): Add resume api to resume the tasks in process tracker for revenue_recovery", "merged_at": "2025-09-24T13:26:06Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"api_models": ["crates/api_models/src/events/revenue_recovery.rs", "crates/api_models/src/process_tracker/revenue_recovery.rs"], "core_business": ["crates/router/src/core/revenue_recovery.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/router/src/routes/app.rs", "crates/router/src/routes/process_tracker/revenue_recovery.rs"]}, "change_types": {"structs_added": 1, "functions_added": 3, "fields_added": 28, "imports_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis is PR is fixing the external vault proxy URL addition to the request being sent to the PSP/Internet, which is being used in the connector-service", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Type Definitions**\n   - `crates/injector/src/types.rs`\n\n**2. Other**\n   - `crates/injector/src/injector.rs`\n   - `crates/injector/src/vault_metadata.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (8 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 97d034a2:\nFiles to modify:\n\n\n**injector.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**vault_metadata.rs**\n  Modify existing code", "metadata": {"pr_number": 9460, "pr_title": "chore(injector): injector change for proxy", "merged_at": "2025-09-23T19:41:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"types": ["crates/injector/src/types.rs"], "other": ["crates/injector/src/injector.rs", "crates/injector/src/vault_metadata.rs"]}, "change_types": {"fields_added": 8, "imports_added": 2, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nMandatorily send cvv to nexixpay card payments.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9459, "pr_title": "fix(connectors): [Nexixpay] send cvv in nexixpay requests", "merged_at": "2025-09-21T17:12:17Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Add wasm changes for , interac , skrill and paysafe card", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9455, "pr_title": "feat(connector): [Paysafe] add wasm changes", "merged_at": "2025-09-19T14:25:22Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["card"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd `consume_post_message_for_three_ds_method_completion` to three_ds_method_data for the three_ds_invoke next action in Payments Confirm\r\n\r\n`consume_post_message_for_three_ds_method_completion` - indicates whether to wait for a post message on client after 3DS method data submission", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/authentication.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payments/transformers.rs`\n\n**4. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/common_enums/src/enums.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (7 changes)", "metadata": {"pr_number": 9454, "pr_title": "feat(router): add flag to wait for post message in `threeDSMethodData` for `three_ds_invoke` next action in Payments Confirm", "merged_at": "2025-09-20T07:38:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/authentication.rs"], "core_business": ["crates/router/src/core/payments/transformers.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/common_enums/src/enums.rs", "crates/openapi/src/openapi.rs", "crates/openapi/src/openapi_v2.rs"]}, "change_types": {"functions_added": 2, "enums_added": 1, "fields_added": 7, "imports_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR updates the dynamic routing logic to ensure that update_gateway_score_helper_with_open_router is invoked only when the payment_attempt.routing_approach is either:\r\n\r\nSuccessRateExploitation or SuccessRateExploration.\r\n\r\nThis updates the routing logic and the payment response tracker to improve how routing approaches are interpreted and when gateway scores are updated. The main changes clarify the mapping of routing approaches and ensure that gateway score updates are only triggered for specific routing strategies.\r\n\r\nRouting approach mapping improvements:\r\n* Added support for `\"DEFAULT\"` to map to `SuccessRateExploration` in `RoutingApproach::from_decision_engine_approach`, making the handling of default approaches more consistent. (`crates/common_enums/src/enums.rs`)\r\n\r\nPayment response update logic:\r\n* Changed the gateway score update condition in `payment_response_update_tracker` to require both dynamic routing to be enabled and the routing approach to be success-rate based, preventing updates for approaches that do not use success rate logic. (`crates/router/src/core/payments/operations/payment_response.rs`)\r\n\r\nThis pull request updates routing logic to ensure that gateway score updates via Open Router only occur for success rate-based routing approaches. It also refines the mapping from decision engine approaches to routing approaches, making the behavior for the `\"DEFAULT\"` case more consistent.\r\n\r\nRouting logic improvements:\r\n\r\n* In `payment_response_update_tracker`, gateway score updates using Open Router are now restricted to cases where the routing approach is either `SuccessRateExploitation` or `SuccessRateExploration`, instead of being applied for all dynamic routing.\r\n\r\nRouting approach mapping changes:\r\n\r\n* In `RoutingApproach::from_decision_engine_approach`, the `\"DEFAULT\"` case is now mapped to `SuccessRateExploration` (alongside `\"SR_V3_HEDGING\"`), and is no longer mapped to `StraightThroughRouting`, improving consistency in approach selection.\r\n\r\n\r\n\r\n<!--\r\nProvide links to the files with corresponding changes.\r\n\r\nFollowing are the paths where you can find config files:\r\n1. `config`\r\n2. `crates/router/src/configs`\r\n3. `loadtest/config`\r\n-->\r\n\r\n\r\n\r\n\r\n## How did you test it?\r\n\r\nsr_based\r\n\r\n```\r\ncurl --location 'http://localhost:8080/account/merchant_1758275545/business_profile/pro_RiCX7Rsxbd4WReAR9TEh/dynamic_routing/success_based/create?enable=dynamic_connector_selection' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: *****' \\\r\n--data '{\r\n    \"decision_engine_configs\": {\r\n        \"defaultBucketSize\": 200,\r\n        \"defaultHedgingPercent\": 5\r\n    }\r\n}'\r\n```\r\n\r\n```\r\n{\r\n    \"id\": \"routing_S27CKCr6Mp8e3VmUnGf0\",\r\n    \"profile_id\": \"pro_RiCX7Rsxbd4WReAR9TEh\",\r\n    \"name\": \"Success rate based dynamic routing algorithm\",\r\n    \"kind\": \"dynamic\",\r\n    \"description\": \"\",\r\n    \"created_at\": 1758275557,\r\n    \"modified_at\": 1758275557,\r\n    \"algorithm_for\": \"payment\",\r\n    \"decision_engine_routing_id\": null\r\n}\r\n```\r\n\r\nactivate\r\n\r\n```\r\ncurl --location 'http://localhost:8080/routing/routing_S27CKCr6Mp8e3VmUnGf0/activate' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'api-key: *****' \\\r\n--data '{}'\r\n\r\n```\r\n```\r\n{\r\n    \"id\": \"routing_S27CKCr6Mp8e3VmUnGf0\",\r\n    \"profile_id\": \"pro_RiCX7Rsxbd4WReAR9TEh\",\r\n    \"name\": \"Success rate based dynamic routing algorithm\",\r\n    \"kind\": \"dynamic\",\r\n    \"description\": \"\",\r\n    \"created_at\": 1758275557,\r\n    \"modified_at\": 1758275557,\r\n    \"algorithm_for\": \"payment\",\r\n    \"decision_engine_routing_id\": null\r\n}\r\n```\r\n\r\nvolume split\r\n\r\n```\r\ncurl --location --request POST 'http://localhost:8080/account/merchant_1758275545/business_profile/pro_RiCX7Rsxbd4WReAR9TEh/dynamic_routing/set_volume_split?split=20' \\\r\n--header 'api-key: *****'\r\n\r\n```\r\n```\r\n{\r\n    \"routing_type\": \"dynamic\",\r\n    \"split\": 20\r\n}\r\n\r\n```\r\npayment\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: *****' \\\r\n--data-raw '{\r\n    \"amount\": 6540,\r\n    \"currency\": \"USD\",\r\n    \"amount_to_capture\": 6540,\r\n    \"confirm\": true,\r\n    \"profile_id\": \"pro_RiCX7Rsxbd4WReAR9TEh\",\r\n    \"capture_method\": \"automatic\",\r\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"setup_future_usage\": \"on_session\", \r\n    \"customer\": {\r\n        \"id\": \"customer123\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"customer@gmail.com\",\r\n        \"phone\": \"9999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"customer_id\": \"customer123\",\r\n    \r\n    \r\n    \r\n    \"phone_country_code\": \"+1\",\r\n    \r\n    \r\n    \r\n    \r\n    \"description\": \"Its my first payment request\",\r\n    \"return_url\": \"https://google.com\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"payment_method_data\": { \r\n        \"card\": {\r\n            \"card_number\": \"4242424242424242\",\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": \"joseph Doe\",\r\n            \"card_cvc\": \"123\"\r\n        }\r\n    },\r\n    \r\n    \"billing\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"guest@example.com\"\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"city\": \"San Fransico\",\r\n            \"state\": \"California\",\r\n            \"zip\": \"94122\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\"\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"guest@example.com\"\r\n    },\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"order_details\": [\r\n        {\r\n            \"product_name\": \"Apple iphone 15\",\r\n            \"quantity\": 1,\r\n            \"amount\": 6540,\r\n            \"account_name\": \"transaction_processing\"\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/70.0.3538.110 Safari\\/537.36\",\r\n        \"accept_header\": \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,image\\/webp,image\\/apng,*\\/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"128.0.0.1\"\r\n    },\r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"offline\",\r\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n        \"online\": {\r\n            \"ip_address\": \"125.0.0.1\",\r\n            \"user_agent\": \"amet irure esse\"\r\n        }\r\n    },\r\n    \r\n    \"connector_metadata\": {\r\n        \"noon\": {\r\n            \"order_category\": \"pay\"\r\n        }\r\n    },\r\n    \"payment_link\": false,\r\n    \"payment_link_config\": {\r\n        \"theme\": \"\",\r\n        \"logo\": \"\",\r\n        \"seller_name\": \"\",\r\n        \"sdk_layout\": \"\",\r\n        \"display_sdk_only\": false,\r\n        \"enabled_saved_payment_method\": false\r\n    },\r\n    \"payment_type\": \"normal\", \r\n    \"request_incremental_authorization\": false,\r\n    \"merchant_order_reference_id\": \"test_ord\",\r\n    \"session_expiry\": 900 \r\n}'\r\n```\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_QifEdH91f7xnl124ICdD\",\r\n    \"merchant_id\": \"merchant_1758275545\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 6540,\r\n    \"net_amount\": 6540,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 6540,\r\n    \"amount_received\": 6540,\r\n    \"connector\": \"stripe\",\r\n    \"client_secret\": \"pay_QifEdH91f7xnl124ICdD\",\r\n    \"created\": \"2025-09-19T10:16:18.704Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"customer123\",\r\n    \"customer\": {\r\n        \"id\": \"customer123\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"customer@gmail.com\",\r\n        \"phone\": \"9999999999\",\r\n        \"phone_country_code\": \"+1\"\r\n    },\r\n    \"description\": \"Its my first payment request\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"4242\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"424242\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"10\",\r\n            \"card_exp_year\": \"25\",\r\n            \"card_holder_name\": \"joseph Doe\",\r\n            \"payment_checks\": {\r\n                \"cvc_check\": \"pass\",\r\n                \"address_line1_check\": \"pass\",\r\n                \"address_postal_code_check\": \"pass\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"guest@example.com\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"California\",\r\n            \"first_name\": \"joseph\",\r\n            \"last_name\": \"Doe\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": {\r\n            \"number\": \"8056594427\",\r\n            \"country_code\": \"+91\"\r\n        },\r\n        \"email\": \"guest@example.com\"\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"sku\": null,\r\n            \"upc\": null,\r\n            \"brand\": null,\r\n            \"amount\": 6540,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": null,\r\n            \"product_id\": null,\r\n            \"description\": null,\r\n            \"product_name\": \"Apple iphone 15\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": null,\r\n            \"unit_of_measure\": null,\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": null,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": null\r\n        }\r\n    ],\r\n    \"email\": \"customer@gmail.com\",\r\n    \"name\": \"John Doe\",\r\n    \"phone\": \"9999999999\",\r\n    \"return_url\": \"https://google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": \"joseph\",\r\n    \"statement_descriptor_suffix\": \"JS\",\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"customer123\",\r\n        \"created_at\": 1758276978,\r\n        \"expires\": 1758280578,\r\n        \"secret\": \"epk_721a0329318e4cb4bc8075b73c371a07\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"pi_3S91MVD5R7gDAGff06OHFTNL\",\r\n    \"frm_message\": null,\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\",\r\n        \"new_customer\": \"true\"\r\n    },\r\n    \"connector_metadata\": {\r\n        \"apple_pay\": null,\r\n        \"airwallex\": null,\r\n        \"noon\": {\r\n            \"order_category\": \"pay\"\r\n        },\r\n        \"braintree\": null,\r\n        \"adyen\": null\r\n    },\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"pi_3S91MVD5R7gDAGff06OHFTNL\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_RiCX7Rsxbd4WReAR9TEh\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_4NgqlrfFxugpnylD8XPF\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-19T10:31:18.704Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"128.0.0.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"104557651805572\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-19T10:16:20.099Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": false,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": \"test_ord\",\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": false,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n## Screenshot\r\n\r\n\r\n<img width=\"1319\" height=\"326\" alt=\"Screenshot 2025-09-19 at 7 09 13 PM\" src=\"https://github.com/user-attachments/assets/d0c17cc5-f3cb-41bf-af65-212f9e36af41\" />\r\n\r\n<img width=\"1326\" height=\"311\" alt=\"Screenshot 2025-09-19 at 7 06 13 PM\" src=\"https://github.com/user-attachments/assets/2ef8bd31-fd08-4441-9a80-2c201d008b35\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_response.rs`\n\n**2. Other**\n   - `crates/common_enums/src/enums.rs`\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (1 changes)", "metadata": {"pr_number": 9452, "pr_title": "fix(routing): update_gateway_score_condition", "merged_at": "2025-09-25T18:03:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/payment_response.rs"], "other": ["crates/common_enums/src/enums.rs"]}, "change_types": {"conditionals_added": 1, "database_queries": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Connector Template code", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 11 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (165 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 1ae6c209:\nFiles to modify:\n\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::gigadat\n\n**gigadat.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Gigadat\n    - impl: impl Gigadat\n    - impl: impl api::Payment for Gigadat\n    - impl: impl api::PaymentSession for Gigadat\n    - impl: impl api::ConnectorAccessToken for Gigadat\n    - impl: impl api::MandateSetup for Gigadat\n    - impl: impl api::PaymentAuthorize for Gigadat\n    - impl: impl api::PaymentSync for Gigadat\n    - impl: impl api::PaymentCapture for Gigadat\n    - impl: impl api::PaymentVoid for Gigadat\n    - impl: impl api::Refund for Gigadat\n    - impl: impl api::RefundExecute for Gigadat\n    - impl: impl api::RefundSync for Gigadat\n    - impl: impl api::PaymentToken for Gigadat\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Gigadat\n    - impl: impl ConnectorCommon for Gigadat\n    - impl: impl ConnectorValidation for Gigadat\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Gigadat\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Gigadat\n    - impl: impl webhooks::IncomingWebhook for Gigadat\n    - impl: impl ConnectorSpecifications for Gigadat\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::GigadatRouterData\n    - struct: pub::GigadatPaymentsRequest\n    - struct: pub::GigadatCard\n    - struct: pub::GigadatAuthType\n    - struct: pub::GigadatPaymentsResponse\n    - struct: pub::GigadatRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::GigadatErrorResponse\n    - enum: pub::GigadatPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(StringMinorUnit, T)> for GigadatRouterData<T>\n    - impl: impl TryFrom<&GigadatRouterData<&PaymentsAuthorizeRouterData>> for GigadatPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for GigadatAuthType\n    - impl: impl From<GigadatPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, GigadatPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&GigadatRouterData<&RefundsRouterData<F>>> for GigadatRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**gigadat.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Gigadat\n    - impl: impl Gigadat\n    - impl: impl api::Payment for Gigadat\n    - impl: impl api::PaymentSession for Gigadat\n    - impl: impl api::ConnectorAccessToken for Gigadat\n    - impl: impl api::MandateSetup for Gigadat\n    - impl: impl api::PaymentAuthorize for Gigadat\n    - impl: impl api::PaymentSync for Gigadat\n    - impl: impl api::PaymentCapture for Gigadat\n    - impl: impl api::PaymentVoid for Gigadat\n    - impl: impl api::Refund for Gigadat\n    - impl: impl api::RefundExecute for Gigadat\n    - impl: impl api::RefundSync for Gigadat\n    - impl: impl api::PaymentToken for Gigadat\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Gigadat\n    - impl: impl ConnectorCommon for Gigadat\n    - impl: impl ConnectorValidation for Gigadat\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Gigadat\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Gigadat\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Gigadat\n    - impl: impl webhooks::IncomingWebhook for Gigadat\n    - impl: impl ConnectorSpecifications for Gigadat\n    - mod: pub::transformers\n\n**main.rs**\n  Add:\n    - mod: private::gigadat\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9450, "pr_title": "feat(connector): [Gigadat] Connector Template code", "merged_at": "2025-09-22T18:39:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/gigadat.rs", "crates/hyperswitch_connectors/src/connectors/gigadat/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/tests/connectors/gigadat.rs", "crates/router/tests/connectors/main.rs", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 165, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Add NTID flow for checkout connector.\r\nFor mandate payment, changed payment type from `Recurring` to `Unscheduled`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout.rs`\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n   - `loadtest/config/development.toml`\n\n**3. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (27 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit d6929280:\nFiles to modify:\n\n\n**checkout.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code", "metadata": {"pr_number": 9449, "pr_title": "feat(connector): [checkout] Add NTID flow", "merged_at": "2025-09-24T14:07:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/checkout.rs", "crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs"], "tests": ["config/deployments/integration_test.toml", "cypress-tests/cypress/e2e/configs/Payment/Utils.js", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"fields_added": 27, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "- Add l2l3 data for checkout\r\n- Note : checkout recommends some checks like line_items should sum up proper total and discount amount. But it doesn't throw any errors for this. Hence in this pr we are not adding any such validations .\r\n\r\n## Request\r\n\r\n```json\r\n{\r\n    \"amount\": 30000,\r\n    \"capture_method\": \"automatic\",\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"AT\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000009995\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    },\r\n\r\n    //l2l3 data\r\n    \"merchant_order_reference_id\":\"fasdfasfasf\",\r\n    \"customer_id\": \"nithxxinn\",\r\n    \"order_tax_amount\": 10000,\r\n    \"shipping_cost\": 21,\r\n    \"discount_amount\": 1,\r\n    \"duty_amount\": 2,\r\n    \"shipping_amount_tax\":22,\r\n    \"order_details\": [ //l2 l3data\r\n        {\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_discount_amount\": 1200,\r\n            \"product_name\": \"Laptop\",\r\n            \"quantity\": 1,\r\n            \"product_id\":\"fafasdfasdfdasdfsadfsadfrewfdscrwefdscerwfdasewfdsacxzfdsasdf\",\r\n            \"total_tax_amount\": 5000,\r\n            \"amount\": 8000,\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 8000\r\n        },\r\n            {\r\n            \"commodity_code\": \"471\",\r\n            \"unit_discount_amount\": 34,\r\n            \"product_name\": \"Laptop\",\r\n            \"quantity\": 1,\r\n            \"product_id\":\"fas22df\",\r\n            \"total_tax_amount\": 3000,\r\n            \"amount\": 4000,\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 8500\r\n        }\r\n        \r\n    ]\r\n}\r\n```\r\n\r\n## Response\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_v01RncbYqwx0ZtB6x7yV\",\r\n    \"merchant_id\": \"merchant_1758258316\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 30000,\r\n    \"net_amount\": 40021,\r\n    \"shipping_cost\": 21,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 40021,\r\n    \"connector\": \"checkout\",\r\n    \"client_secret\": \"pay_v01RncbYqwx0ZtB6x7yV_secret_iolJ5SxVFNsQljPaO42C\",\r\n    \"created\": \"2025-09-19T06:18:02.547Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"nithxxinn\",\r\n    \"customer\": {\r\n        \"id\": \"nithxxinn\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"9995\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"G\",\r\n                \"card_validation_result\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"AT\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"sku\": null,\r\n            \"upc\": null,\r\n            \"brand\": null,\r\n            \"amount\": 8000,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": null,\r\n            \"product_id\": \"fafasdfasdfdasdfsadfsadfrewfdscrwefdscerwfdasewfdsacxzfdsasdf\",\r\n            \"description\": null,\r\n            \"product_name\": \"Laptop\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 5000,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 1200\r\n        },\r\n        {\r\n            \"sku\": null,\r\n            \"upc\": null,\r\n            \"brand\": null,\r\n            \"amount\": 4000,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": null,\r\n            \"product_id\": \"fas22df\",\r\n            \"description\": null,\r\n            \"product_name\": \"Laptop\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 3000,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 34\r\n        }\r\n    ],\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"nithxxinn\",\r\n        \"created_at\": 1758262682,\r\n        \"expires\": 1758266282,\r\n        \"secret\": \"epk_e62d911ac98c4ccea72189e40ad83af4\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"pay_2667htrzd3qu7bx4fk36nkiva4\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"pay_v01RncbYqwx0ZtB6x7yV_1\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_tqppxjNXH3TckLuEmhDJ\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_z4uydERX9Y3VqfGMXeuh\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-19T06:33:02.547Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"716806996896398\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-19T06:18:04.255Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": \"fasdfasfasf\",\r\n    \"order_tax_amount\": 10000,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n## connector mapping\r\n\r\n```json\r\n{\r\n  \"source\": {\r\n    \"type\": \"card\",\r\n    \"number\": \"4000000000009995\",\r\n    \"expiry_month\": \"01\",\r\n    \"expiry_year\": \"2026\",\r\n    \"cvv\": \"100\"\r\n  },\r\n  \"amount\": 40021,\r\n  \"currency\": \"USD\",\r\n  \"processing_channel_id\": \"pc_jx5lvimg4obe7nhoqnhptm6xoq\",\r\n  \"3ds\": {\r\n    \"enabled\": false,\r\n    \"force_3ds\": false,\r\n    \"eci\": null,\r\n    \"cryptogram\": null,\r\n    \"xid\": null,\r\n    \"version\": null,\r\n    \"challenge_indicator\": \"no_preference\"\r\n  },\r\n  \"success_url\": \"http://localhost:8080/payments/pay_v01RncbYqwx0ZtB6x7yV/merchant_1758258316/redirect/response/checkout?status=success\",\r\n  \"failure_url\": \"http://localhost:8080/payments/pay_v01RncbYqwx0ZtB6x7yV/merchant_1758258316/redirect/response/checkout?status=failure\",\r\n  \"capture\": true,\r\n  \"reference\": \"pay_v01RncbYqwx0ZtB6x7yV_1\",\r\n  \"payment_type\": \"Regular\",\r\n  \"merchant_initiated\": false,\r\n  \"customer\": {\r\n    \"name\": \"nithxxinn\"\r\n  },\r\n  \"processing\": {\r\n    \"order_id\": \"fasdfasfasf\",\r\n    \"tax_amount\": 10000,\r\n    \"discount_amount\": 1,\r\n    \"duty_amount\": 2,\r\n    \"shipping_amount\": 21,\r\n    \"shipping_tax_amount\": 22\r\n  },\r\n  \"shipping\": {\r\n    \"address\": {}\r\n  },\r\n  \"items\": [\r\n    {\r\n      \"commodity_code\": \"8471\",\r\n      \"discount_amount\": 1200,\r\n      \"name\": \"Laptop\",\r\n      \"quantity\": 1,\r\n      \"reference\": \"fafasdfasdfdasdfsadfsadfrewfdscrwefdscerwfdasewfdsacxzfdsasdf\",\r\n      \"tax_amount\": 5000,\r\n      \"unit_of_measure\": \"EA\",\r\n      \"unit_price\": 8000\r\n    },\r\n    {\r\n      \"commodity_code\": \"471\",\r\n      \"discount_amount\": 34,\r\n      \"name\": \"Laptop\",\r\n      \"quantity\": 1,\r\n      \"reference\": \"fas22df\",\r\n      \"tax_amount\": 3000,\r\n      \"unit_of_measure\": \"EA\",\r\n      \"unit_price\": 4000\r\n    }\r\n  ]\r\n}\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Extend existing types with new fields (48 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9446, "pr_title": "feat(Connector): [checkout] l2l3 data ", "merged_at": "2025-09-19T12:29:00Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs"]}, "change_types": {"structs_added": 5, "fields_added": 48, "imports_added": 2, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nIn UCS when we get None as attempt status we map it to `payments_grpc::PaymentStatus::AttemptStatusUnspecified`.\r\n\r\nIn payments via Unified Connector Service  path, when for error responses it returned `attempt_status_unspecified`, it was being mapped to `AttemptStatus::Unresolved` instead of `None`. This prevented the proper failure handling logic from executing, causing payments that should fail to not return the expected failure status.\r\n\r\nFIX:\r\n- Changed the mapping of `payments_grpc::PaymentStatus::AttemptStatusUnspecified` from `Ok(Self::Unresolved)` to `Ok(None)` in case of Errorresponse.\r\n- Wrapped Attemptstatus in Ok response and router_data.status is updated in case of Ok response only.\r\n- Allows proper failure logic to execute instead of forcing payments to Unresolved state", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - `crates/router/src/core/payments/flows/external_proxy_flow.rs`\n   - `crates/router/src/core/payments/flows/psync_flow.rs`\n   - ... and 3 more files\n\n**2. Other**\n   - `crates/router/src/services/api.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (15 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e0fa7e9b:\nFiles to modify:\n\n\n**authorize_flow.rs**\n  Modify existing code\n\n**external_proxy_flow.rs**\n  Modify existing code\n\n**psync_flow.rs**\n  Modify existing code\n\n**setup_mandate_flow.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code", "metadata": {"pr_number": 9445, "pr_title": "fix: Map attempt_status_unspecified to None instead of Unresolved for HS<>UCS ErrorResponse", "merged_at": "2025-09-24T16:51:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/flows/setup_mandate_flow.rs", "crates/router/src/core/unified_connector_service.rs", "crates/router/src/core/unified_connector_service/transformers.rs"], "other": ["crates/router/src/services/api.rs"]}, "change_types": {"fields_added": 15}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR introduces the following fix:\r\nHS should pass `paymentInformation.tokenizedCard.transactionType`  for only wallet MITs. Presently `paymentInformation.tokenizedCard.transactionType` is being passed for card MITs as well, which is incorrect according to cybersource docs.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9444, "pr_title": "fix(connector): [CYBERSOURCE] Pass transaction type for only wallet MITs", "merged_at": "2025-09-19T13:08:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "connector"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCreate an API for Network Token Status Check.\r\nAPI Doc: [doc](https://docs.google.com/document/d/1MZoq2C9NsZYBhvfqwVb3nPPTtufBlE1FE41r2MARc9Y/edit?tab=t.0)\r\n\r\nCurl: \r\n```\r\ncurl --location 'http://localhost:8080/v2/payment-methods/12345_pm_019959146f92737389eb6927ce1eb7dc/check-network-token-status' \\\r\n--header 'X-Profile-Id: pro_wK6tlmyhh3I77DGoKn8T' \\\r\n--header 'Authorization: api-key=abc'\r\n```\r\n\r\nResponse:\r\n```\r\n{\r\n    \"status\": \"ACTIVE\",\r\n    \"token_expiry_month\": \"12\",\r\n    \"token_expiry_year\": \"2026\",\r\n    \"card_last_four\": \"1234\",\r\n    \"token_last_four\": \"0787\",\r\n    \"card_expiry\": \"08/2031\"\r\n    \"payment_method_id\": \"12345_pm_019959146f92737389eb6927ce1eb7dc\",\r\n    \"customer_id\": \"12345_cus_0195dc62bb8e7312a44484536da76aef\",\r\n}\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n   - `crates/router/src/core/payment_methods/network_tokenization.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/payment_methods.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**5. Other**\n   - `api-reference/docs.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/openapi/src/openapi_v2.rs`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (5 changes)\n- Extend existing types with new fields (41 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit d9d4b2e5:\nFiles to modify:\n\n\n**enums.rs**\n  Add:\n    - enum: pub::TokenStatus\n\n**payment_methods.rs**\n  Add:\n    - struct: pub::NetworkTokenStatusCheckSuccessResponse\n    - struct: pub::NetworkTokenStatusCheckFailureResponse\n    - enum: pub::NetworkTokenStatusCheckResponse\n    - impl: impl common_utils::events::ApiEventMetric for NetworkTokenStatusCheckResponse\n\n**openapi_v2.rs**\n  Modify existing code\n\n**payment_method.rs**\n  Add:\n    - function: pub::network_token_status_check_api\n\n**payment_methods.rs**\n  Add:\n    - struct: pub::NetworkTokenStatusCheckSuccessResponse\n    - struct: pub::NetworkTokenStatusCheckFailureResponse\n    - enum: pub::NetworkTokenStatusCheckResponse\n    - impl: impl common_utils::events::ApiEventMetric for NetworkTokenStatusCheckResponse\n\n**network_tokenization.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Add:\n    - struct: pub::NetworkTokenStatusCheckSuccessResponse\n    - struct: pub::NetworkTokenStatusCheckFailureResponse\n    - enum: pub::NetworkTokenStatusCheckResponse\n    - impl: impl common_utils::events::ApiEventMetric for NetworkTokenStatusCheckResponse\n\n**payment_methods.rs**\n  Add:\n    - struct: pub::NetworkTokenStatusCheckSuccessResponse\n    - struct: pub::NetworkTokenStatusCheckFailureResponse\n    - enum: pub::NetworkTokenStatusCheckResponse\n    - impl: impl common_utils::events::ApiEventMetric for NetworkTokenStatusCheckResponse\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9443, "pr_title": "feat(core): [NETWORK TOKENIZATION] Check Network Token Status API", "merged_at": "2025-10-10T12:36:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs", "crates/api_models/src/payment_methods.rs"], "core_business": ["crates/router/src/core/payment_methods.rs", "crates/router/src/core/payment_methods/network_tokenization.rs"], "types": ["crates/router/src/types/payment_methods.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["api-reference/docs.json", "api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi_v2.rs", "crates/openapi/src/routes/payment_method.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/payment_methods.rs"]}, "change_types": {"structs_added": 3, "functions_added": 5, "enums_added": 2, "fields_added": 41, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for https://github.com/juspay/hyperswitch/pull/9372\r\n\r\nAdd acknowledgement in adyen for incoming webhooks by sending status 200.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`", "metadata": {"pr_number": 9442, "pr_title": "feat(router): Handle adyen webhook issue", "merged_at": "2025-09-18T12:33:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAs part of the subscription, a billing processor need to be configured at profile level to route the subscription creation and other related activities.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/business_profile.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n\n**5. Type Definitions**\n   - `crates/router/src/types/api/admin.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/db/events.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (52 changes)", "metadata": {"pr_number": 9438, "pr_title": "feat(billing): add support to configure billing processor in profile", "merged_at": "2025-09-23T19:41:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs"], "database": ["crates/diesel_models/src/business_profile.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs"], "core_business": ["crates/router/src/core/admin.rs"], "types": ["crates/router/src/types/api/admin.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/router/src/db/events.rs", "migrations/2025-09-18-063125_add_billing_processor_id_to_business_profile/down.sql", "migrations/2025-09-18-063125_add_billing_processor_id_to_business_profile/up.sql"]}, "change_types": {"fields_added": 52}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Fix save card flow for braintree , earlier we were passing on_session for off_session flow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Braintree.js`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (11 changes)", "metadata": {"pr_number": 9435, "pr_title": "ci(cypress): fix braintree connector", "merged_at": "2025-09-18T11:59:06Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "session", "card"]}, "hierarchy": {"tests": ["cypress-tests/cypress/e2e/configs/Payment/Braintree.js"]}, "change_types": {"fields_added": 11}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded validation check for amount in capture flow.\r\nFixed WASM for Peachpayments", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/helpers.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (7 changes)", "metadata": {"pr_number": 9434, "pr_title": "fix(core): Add Validation Check for Amount in Capture Flow", "merged_at": "2025-09-19T07:35:05Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/helpers.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {"fields_added": 7}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdded Support for External Auth( Juspay 3ds Server ) via Payments API", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n\n**2. Other**\n   - `crates/router/src/routes/app.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9433, "pr_title": "feat(core): Juspay 3DS Server via Payments API", "merged_at": "2025-09-19T07:37:59Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/payment_confirm.rs"], "other": ["crates/router/src/routes/app.rs"]}, "change_types": {"fields_added": 9}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdd support for hyperswitch side decrypt flow for applepay in Nuvei\r\n\r\n- Hyperswitch can decrypt applepay token without involvement of connector if it has Apple pay processing certificate and private key.\r\n\r\n# how did i test\r\n\r\nPayment Request\r\n\r\n```json\r\n{\r\n    \"amount\": 6500,\r\n    \"currency\": \"USD\",\r\n    \"email\": \"email4@gmail.com\",\r\n    \"customer_id\": \"hello5\",\r\n    \"capture_method\": \"automatic\",\r\n    \"confirm\": true,\r\n    \"return_url\": \"https://hyperswitch-demo-store.netlify.app/?isTestingMode=true&hyperswitchClientUrl=https://beta.hyperswitch.io/v1&hyperswitchCustomPodUri=&hyperswitchCustomBackendUrl=&publishableKey=pk_snd_e6c328fa58824247865647d532583e66&secretKey=snd_H0f0rZqfaXlv6kz81O6tQptd2e250u5vlFsA1L50ogMglapamZmDzJ7qRlj4mNlM&profileId=pro_PxNHqEwbZM6rbIfgClSg&environment=Sandbox\",\r\n     \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"apple_pay\": {\r\n                \"payment_data\": \"eyJkYXRhIjoiSWRNbUFu***************d****************2NDQ5NDlmMWUxNGZiYmM4NTdiNjk5N2NkYWJlMzczZGEyOTI3ZmU5NzcifSwidmVyc2lvbiI6IkVDX3YxIn0=\",\r\n                \"payment_method\": {\r\n                    \"display_name\": \"Visa 0492\",\r\n                    \"network\": \"Visa\",\r\n                    \"type\": \"debit\"\r\n                },\r\n                \"transaction_identifier\": \"85ea39d59610a6860eb723644949f1e14fbbc857b6997cdabe373da2927fe977\"\r\n            }\r\n        }\r\n    },\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_type\": \"apple_pay\",\r\n    \"connector\": [\r\n        \"nuvei\"\r\n    ],\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.6 Safari/605.1.15\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1117,\r\n        \"screen_width\": 1728,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"time_zone\": -330,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"device_model\": \"Macintosh\",\r\n        \"os_type\": \"macOS\",\r\n        \"os_version\": \"10.15.7\"\r\n    },\r\n    \"payment_type\": \"normal\"\r\n}\r\n```\r\n\r\n## Response\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_7wu0YSHTd8LFDE8KD2UN\",\r\n    \"merchant_id\": \"merchant_1758115709\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 6500,\r\n    \"net_amount\": 6500,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 6500,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_7wu0YSHTd8LFDE8KD2UN_secret_kIWxoLIlS4kexcOCmHz1\",\r\n    \"created\": \"2025-09-18T07:35:21.765Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"hello5\",\r\n    \"customer\": {\r\n        \"id\": \"hello5\",\r\n        \"name\": null,\r\n        \"email\": \"email4@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"apple_pay\": {\r\n                \"last4\": \"0492\",\r\n                \"card_network\": \"Visa\",\r\n                \"type\": \"debit\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"email4@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://hyperswitch-demo-store.netlify.app/?isTestingMode=true&hyperswitchClientUrl=https://beta.hyperswitch.io/v1&hyperswitchCustomPodUri=&hyperswitchCustomBackendUrl=&publishableKey=pk_snd_e6c328fa58824247865647d532583e66&secretKey=snd_H0f0rZqfaXlv6kz81O6tQptd2e250u5vlFsA1L50ogMglapamZmDzJ7qRlj4mNlM&profileId=pro_PxNHqEwbZM6rbIfgClSg&environment=Sandbox\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"apple_pay\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"hello5\",\r\n        \"created_at\": 1758180921,\r\n        \"expires\": 1758184521,\r\n        \"secret\": \"epk_228ed6b0222a461b9497d73df63c5e11\"\r\n    },\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"7110000000017082220\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8937234111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_G0scDt6GAZBxs3brIkts\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_4ioDaxsfaPf9R3aZCrE6\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-18T07:50:21.765Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"os_type\": \"macOS\",\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": -330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"os_version\": \"10.15.7\",\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.6 Safari/605.1.15\",\r\n        \"color_depth\": 24,\r\n        \"device_model\": \"Macintosh\",\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1728,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 1117,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-18T07:35:25.366Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\n\r\n<img width=\"1478\" height=\"714\" alt=\"Screenshot 2025-09-18 at 1 24 08 PM\" src=\"https://github.com/user-attachments/assets/2711bf06-f543-40bd-bd08-159920b60be3\" />\r\n\r\n## Similarly for manual capture\r\n\r\n<img width=\"1531\" height=\"861\" alt=\"Screenshot 2025-09-18 at 1 25 41 PM\" src=\"https://github.com/user-attachments/assets/4984713a-8837-4d8a-9783-37cefedb17d7\" />\r\n\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Implement new functions (3 changes)\n- Extend existing types with new fields (29 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c59a66a5:\nFiles to modify:\n\n\n**transformers.rs**\n  Add:\n    - function: private::get_google_pay_decrypt_data\n\n**payment_connector_required_fields.rs**\n  Modify existing code", "metadata": {"pr_number": 9431, "pr_title": "feat(nuvei): applepay decrypt at hyperswitch flow", "merged_at": "2025-09-19T12:22:52Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs"]}, "change_types": {"functions_added": 3, "fields_added": 29, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd `challenge_request_key` in authentication response and add support for cardinal authentication processor", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/authentication.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types/authentication.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/authentication/utils.rs`\n   - `crates/router/src/core/connector_validation.rs`\n   - `crates/router/src/core/payments.rs`\n   - ... and 2 more files\n\n**5. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 9 more files\n\n**6. Type Definitions**\n   - `crates/router/src/types/api/authentication.rs`\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/common_enums/src/enums.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (34 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9429, "pr_title": "feat(router): add `challenge_request_key` in authentication response and add support for cardinal authentication processor", "merged_at": "2025-09-18T15:40:57Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "card"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/authentication.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs", "crates/hyperswitch_domain_models/src/router_request_types/authentication.rs"], "core_business": ["crates/router/src/core/authentication/utils.rs", "crates/router/src/core/connector_validation.rs", "crates/router/src/core/payments.rs", "crates/router/src/core/unified_authentication_service.rs", "crates/router/src/core/unified_authentication_service/utils.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/gpayments/transformers.rs", "crates/hyperswitch_connectors/src/connectors/netcetera/transformers.rs", "crates/hyperswitch_connectors/src/connectors/threedsecureio/transformers.rs", "crates/hyperswitch_connectors/src/connectors/unified_authentication_service/transformers.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/test_utils/src/connector_auth.rs"], "types": ["crates/router/src/types/api/authentication.rs", "crates/router/src/types/api/feature_matrix.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json", "crates/common_enums/src/enums.rs", "crates/router/src/consts.rs", "crates/router/src/db/authentication.rs", "migrations/2025-09-15-065211_add-challenge-request-key-in-authentication/down.sql", "migrations/2025-09-15-065211_add-challenge-request-key-in-authentication/up.sql"]}, "change_types": {"functions_added": 1, "fields_added": 34, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR fixes the missing additional payout method details in the response when using stored payment methods (via PSP tokens) for processing payouts.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (11 changes)", "metadata": {"pr_number": 9426, "pr_title": "fix(payouts): populate additional payout method data during recurring payouts", "merged_at": "2025-09-18T14:29:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payment_method_data.rs"], "core_business": ["crates/router/src/core/payouts.rs"]}, "change_types": {"functions_added": 1, "fields_added": 11}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for https://github.com/juspay/hyperswitch/pull/9372\r\n\r\nAdd acknowledgement in adyen for incoming webhooks by sending status 200.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`", "metadata": {"pr_number": 9425, "pr_title": "feat(router): Handle incoming webhooks adyen", "merged_at": "2025-09-17T18:56:54Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nDuring the recurring payout transaction, if confirm false is being explicitly sent in the request - throw a Bad Request Error.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payouts/validator.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9424, "pr_title": "feat(core): Confirm true mandatory when using stored payment method id in payouts", "merged_at": "2025-09-25T07:15:42Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"core_business": ["crates/router/src/core/payouts/validator.rs"]}, "change_types": {"fields_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR introduces the following changes\r\n1. In CIT flows, if card vaulting step fails but connector event was successful instead of sending back a 5XX send back a 2XX.\r\n2. Suppress card vaulting error, and log it.\r\n\r\nCargo clippy output\r\n<img width=\"895\" height=\"508\" alt=\"Screenshot 2025-09-17 at 7 49 23 PM\" src=\"https://github.com/user-attachments/assets/59c9c2c4-982f-416e-8f7e-66de9cace8ec\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_response.rs`", "metadata": {"pr_number": 9423, "pr_title": "fix(payments): suppress card vaulting error for CIT flows", "merged_at": "2025-09-17T14:30:27Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "connector"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/payment_response.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- when webhook url is configured in psp's dashboard, some psp send a sample webhook for acknowledgement.\r\n- this feature helps in bypassing business logic in case of an setup webhook and send 200 ok status\r\n- the setup webhook is triggered if the IncomingWebhookEvent type is SetupWebhook (which is dependent on each psp's integration", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/webhooks.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`\n   - `crates/router/src/core/webhooks/incoming_v2.rs`\n   - `crates/router/src/core/webhooks/recovery_incoming.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/wise.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Add conditional logic for feature flags or filtering (3 changes)", "metadata": {"pr_number": 9420, "pr_title": "feat(core): add webhook setup event handler", "merged_at": "2025-09-22T07:58:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"api_models": ["crates/api_models/src/webhooks.rs"], "core_business": ["crates/router/src/core/webhooks/incoming.rs", "crates/router/src/core/webhooks/incoming_v2.rs", "crates/router/src/core/webhooks/recovery_incoming.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/wise.rs"]}, "change_types": {"functions_added": 1, "conditionals_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdding a new `dockerfile` for building a `hyperswitch-migration-runner` image.\r\nThis dockerfile, `docker/migration-runner.Dockerfile`, contains the respective router version's:\r\n1. Migration files\r\n2. diesel.toml\r\nalong with diesel cli installed. This helps us run db migrations inside `air-gapped` clusters without the need to pull the migration files from github.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `docker-compose-development.yml`\n   - `docker-compose.yml`\n\n**2. Other**\n   - `docker/migration-runner.Dockerfile`\n   - `scripts/migration_runner_entrypoint.sh`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (8 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9417, "pr_title": "feat: dockerfile for building migration runner image", "merged_at": "2025-10-01T13:05:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"config": ["docker-compose-development.yml", "docker-compose.yml"], "other": ["docker/migration-runner.Dockerfile", "scripts/migration_runner_entrypoint.sh"]}, "change_types": {"fields_added": 8, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\ntemplate for Tokenex integration", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 12 more files\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (165 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 40357ae2:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::tokenex\n\n**tokenex.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Tokenex\n    - impl: impl Tokenex\n    - impl: impl api::Payment for Tokenex\n    - impl: impl api::PaymentSession for Tokenex\n    - impl: impl api::ConnectorAccessToken for Tokenex\n    - impl: impl api::MandateSetup for Tokenex\n    - impl: impl api::PaymentAuthorize for Tokenex\n    - impl: impl api::PaymentSync for Tokenex\n    - impl: impl api::PaymentCapture for Tokenex\n    - impl: impl api::PaymentVoid for Tokenex\n    - impl: impl api::Refund for Tokenex\n    - impl: impl api::RefundExecute for Tokenex\n    - impl: impl api::RefundSync for Tokenex\n    - impl: impl api::PaymentToken for Tokenex\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Tokenex\n    - impl: impl ConnectorCommon for Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Tokenex\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl webhooks::IncomingWebhook for Tokenex\n    - impl: impl ConnectorSpecifications for Tokenex\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::TokenexRouterData\n    - struct: pub::TokenexPaymentsRequest\n    - struct: pub::TokenexCard\n    - struct: pub::TokenexAuthType\n    - struct: pub::TokenexPaymentsResponse\n    - struct: pub::TokenexRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::TokenexErrorResponse\n    - enum: pub::TokenexPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(StringMinorUnit, T)> for TokenexRouterData<T>\n    - impl: impl TryFrom<&TokenexRouterData<&PaymentsAuthorizeRouterData>> for TokenexPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for TokenexAuthType\n    - impl: impl From<TokenexPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, TokenexPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&TokenexRouterData<&RefundsRouterData<F>>> for TokenexRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**main.rs**\n  Add:\n    - mod: private::tokenex\n\n**tokenex.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Tokenex\n    - impl: impl Tokenex\n    - impl: impl api::Payment for Tokenex\n    - impl: impl api::PaymentSession for Tokenex\n    - impl: impl api::ConnectorAccessToken for Tokenex\n    - impl: impl api::MandateSetup for Tokenex\n    - impl: impl api::PaymentAuthorize for Tokenex\n    - impl: impl api::PaymentSync for Tokenex\n    - impl: impl api::PaymentCapture for Tokenex\n    - impl: impl api::PaymentVoid for Tokenex\n    - impl: impl api::Refund for Tokenex\n    - impl: impl api::RefundExecute for Tokenex\n    - impl: impl api::RefundSync for Tokenex\n    - impl: impl api::PaymentToken for Tokenex\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Tokenex\n    - impl: impl ConnectorCommon for Tokenex\n    - impl: impl ConnectorValidation for Tokenex\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Tokenex\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Tokenex\n    - impl: impl webhooks::IncomingWebhook for Tokenex\n    - impl: impl ConnectorSpecifications for Tokenex\n    - mod: pub::transformers\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9416, "pr_title": "feat(connector): [Tokenex] add template code", "merged_at": "2025-09-22T10:01:50Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["token"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/tokenex.rs", "crates/hyperswitch_connectors/src/connectors/tokenex/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/tests/connectors/main.rs", "crates/router/tests/connectors/tokenex.rs", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 165, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Moved required fields for `givex` gift card for `Adyen` from `non-mandate` to `common`", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `config/payment_required_fields_v2.toml`", "metadata": {"pr_number": 9414, "pr_title": "fix(config): Set common required fields for Givex (v2)", "merged_at": "2025-09-18T08:51:00Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "user"]}, "hierarchy": {"config": ["config/payment_required_fields_v2.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR assigns the code owner to relevant modules for `hyperswitch-payouts`.\r\n\r\n## Motivation and Context\r\n- Helps offload PR review tasks for payout related modules to the respective team.\r\n\r\n## How did you test it?\r\nNot needed", "response": "To implement this **unknown** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `.github/CODEOWNERS`", "metadata": {"pr_number": 9411, "pr_title": "chore(git): add code owner for payout modules", "merged_at": "2025-09-17T17:59:19Z", "intent": {"feature_type": "unknown", "action": "add_feature", "entities": []}, "hierarchy": {"other": [".github/CODEOWNERS"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis change updates the idempotent_event_id generation to first hash the base string with SHA256 and then encode it using URL-safe Base64 without padding. By doing this, the generated IDs are guaranteed to be short and deterministic, ensuring they always fit within the 64-character database column limit. This fix addresses the issue where long payment_ids combined with event types were exceeding the DB constraint and breaking the outgoing webhooks flow.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/errors.rs`\n   - `crates/router/src/core/webhooks/outgoing.rs`\n   - `crates/router/src/core/webhooks/outgoing_v2.rs`\n   - ... and 2 more files\n\n**2. Utils**\n   - `crates/common_utils/src/consts.rs`\n\n**3. Other**\n   - `crates/router/src/workflows/outgoing_webhook_retry.rs`\n\n**Code Patterns Applied:**", "metadata": {"pr_number": 9405, "pr_title": "fix(webhooks): add idempotent_event_id generation using URL-safe Base64 (no padding) and SHA256 digest", "merged_at": "2025-09-22T08:30:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"core_business": ["crates/router/src/core/errors.rs", "crates/router/src/core/webhooks/outgoing.rs", "crates/router/src/core/webhooks/outgoing_v2.rs", "crates/router/src/core/webhooks/utils.rs", "crates/router/src/core/webhooks/webhook_events.rs"], "utils": ["crates/common_utils/src/consts.rs"], "other": ["crates/router/src/workflows/outgoing_webhook_retry.rs"]}, "change_types": {"imports_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nFor Razorpay (RZP) integration, the `connector_request_reference_id` will now be set as follows:\r\n\r\n- If `merchant_reference_id` is available, use it directly.\r\n- If not available, generate a UUID instead.\r\n\r\nThis ensures compliance with Razorpay’s constraint that the reference ID length must not exceed **40 characters**.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/razorpay.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9404, "pr_title": "refactor(connector): [RAZORPAY] update generate_connector_request_reference_id to consume merchant_reference_id", "merged_at": "2025-09-18T07:18:58Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/razorpay.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis API updates the lock status of customer token to unlock in revenue recovery.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/revenue_recovery_data_backfill.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery_data_backfill.rs`\n\n**3. Other**\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/revenue_recovery_data_backfill.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (6 changes)", "metadata": {"pr_number": 9403, "pr_title": "feat(revenue_recovery): Implement redis API to update the lock status for connector customer id", "merged_at": "2025-09-18T15:34:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "user", "token"]}, "hierarchy": {"api_models": ["crates/api_models/src/revenue_recovery_data_backfill.rs"], "core_business": ["crates/router/src/core/revenue_recovery_data_backfill.rs"], "other": ["crates/router/src/routes/app.rs", "crates/router/src/routes/revenue_recovery_data_backfill.rs"]}, "change_types": {"structs_added": 1, "functions_added": 4, "fields_added": 6}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR fixes an issue where internal user roles were being displayed in the dashboard.  \r\nWith this change, all internal roles are filtered out, ensuring only relevant user-facing roles are visible.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/user_role/role.rs`\n\n**Code Patterns Applied:**\n- Modify database queries (1 changes)", "metadata": {"pr_number": 9402, "pr_title": "fix(user_role): Filter out internal roles in list roles API", "merged_at": "2025-09-22T18:36:13Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/user_role/role.rs"]}, "change_types": {"imports_added": 1, "database_queries": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis pr adds support for the invoice-generated event type for the incoming webhook for Chargebee and creates a process tracker entry that will trigger a S2S call and invoice sync.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/webhooks.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs`\n   - `crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/subscription_handler.rs`\n   - `crates/router/src/core/webhooks/incoming.rs`\n   - ... and 1 more files\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_interfaces/src/connector_integration_interface.rs`\n\n**5. Utils**\n   - `crates/router/src/utils.rs`\n\n**6. Other**\n   - `crates/hyperswitch_interfaces/src/webhooks.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (9 changes)\n- Extend existing types with new fields (56 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 32dd9e10:\nFiles to modify:\n\n\n**webhooks.rs**\n  Modify existing code\n\n**chargebee.rs**\n  Add:\n    - function: private::get_subscription_mit_payment_data\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - struct: pub::ChargebeeMitPaymentData\n    - impl: impl TryFrom<ChargebeeInvoiceBody> for ChargebeeMitPaymentData\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionMitPaymentData\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionMitPaymentData\n\n**connector_integration_interface.rs**\n  Add:\n    - function: private::get_subscription_mit_payment_data\n\n**webhooks.rs**\n  Modify existing code\n\n**subscription.rs**\n  Modify existing code\n\n**subscription_handler.rs**\n  Add:\n    - function: pub::new\n    - function: pub::get_invoice_handler\n\n**incoming.rs**\n  Modify existing code\n\n**recovery_incoming.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code", "metadata": {"pr_number": 9400, "pr_title": "feat: Implement subscriptions workflow and incoming webhook support", "merged_at": "2025-10-03T16:39:11Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/webhooks.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/subscription_handler.rs", "crates/router/src/core/webhooks/incoming.rs", "crates/router/src/core/webhooks/recovery_incoming.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_interfaces/src/connector_integration_interface.rs"], "utils": ["crates/router/src/utils.rs"], "other": ["crates/hyperswitch_interfaces/src/webhooks.rs"]}, "change_types": {"structs_added": 2, "functions_added": 9, "fields_added": 56, "imports_added": 4, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "implement Skrill, interac and paysafecard Payment Method", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/Cargo.toml`\n   - `crates/connector_configs/src/common_config.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - ... and 6 more files\n\n**2. Other**\n   - `Cargo.lock`\n\n**Code Patterns Applied:**\n- Define new data structures (6 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (67 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 85bc733d:\nFiles to modify:\n\n\n**common_config.rs**\n  Modify existing code\n\n**connector.rs**\n  Add:\n    - struct: pub::AccountIdConfigForRedirect\n\n**paysafe.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: pub::get_interac_account_id\n    - function: pub::get_paysafe_gift_card_account_id\n    - struct: pub::RedirectAccountId\n    - struct: pub::PaysafeProfile\n    - struct: pub::SkrillWallet\n    - struct: pub::InteracBankRedirect\n    - struct: pub::PaysafeGiftCard\n\n**payment_connector_required_fields.rs**\n  Modify existing code", "metadata": {"pr_number": 9396, "pr_title": "feat(connector): [Paysafe] implement Skrill, interac and paysafecard Payment Method", "merged_at": "2025-09-18T08:54:42Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/connector_configs/Cargo.toml", "crates/connector_configs/src/common_config.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/paysafe.rs", "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs"], "other": ["Cargo.lock"]}, "change_types": {"structs_added": 6, "functions_added": 3, "fields_added": 67}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n As requested by connector we need to send recurrence object in connector requests of init and payments call for non cit payment with action as NoRecurring.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (14 changes)", "metadata": {"pr_number": 9395, "pr_title": "fix(connectors): [Nexixpay] send recurrence obj in non cit payments", "merged_at": "2025-09-16T09:30:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nexixpay/transformers.rs"]}, "change_types": {"fields_added": 14}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nFixed bugs and added cypress test\r\n\r\n1. Made sensitive informations as Secret.\r\n2. Resolved Deserialization error in Payments Response\r\n3. Removed unnecessary structs", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs`\n   - `crates/payment_methods/src/configs/payment_connector_required_fields.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (55 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit a8aaffc6:\nFiles to modify:\n\n\n**transformers.rs**\n  Remove:\n    - function: private::from\n    - struct: pub::CardDetails\n    - struct: pub::ThreeDSData\n    - enum: pub::ResponseCodeValue\n    - impl: impl From<&str> for AuthenticationStatus\n  Add:\n    - function: private::get_error_code\n    - enum: pub::MerchantType\n    - enum: pub::Route\n\n**payment_connector_required_fields.rs**\n  Modify existing code", "metadata": {"pr_number": 9393, "pr_title": "fix(connector): [Peachpayments] Fix Bugs", "merged_at": "2025-09-16T18:02:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs"]}, "change_types": {"structs_added": 1, "functions_added": 4, "enums_added": 2, "fields_added": 55, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR bumps the Minimum Supported Rust Version (MSRV) from Rust 1.80 to 1.85.\r\nClippy Warning Fixes:\r\n    1. Replace repeat().take() with repeat_n() - More concise iterator creation\r\n    2. Replace map_or(true, ...) with is_none_or(...) - Modern idiomatic Option handling", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/merchant_connector_account.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payment_methods/cards.rs`\n   - `crates/router/src/core/payments/payment_methods.rs`\n   - `crates/router/src/core/payments/routing.rs`\n   - ... and 2 more files\n\n**3. Utils**\n   - `crates/router/src/utils/user_role.rs`\n   - `crates/storage_impl/src/utils.rs`\n\n**4. Configuration Files**\n   - `.deepsource.toml`\n   - `Cargo.toml`\n\n**5. Other**\n   - `INSTALL_dependencies.sh`\n   - `crates/analytics/src/search.rs`\n   - `crates/euclid/src/backend/vir_interpreter.rs`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (21 changes)", "metadata": {"pr_number": 9390, "pr_title": "build: bump MSRV to 1.85.0", "merged_at": "2025-09-16T07:03:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/merchant_connector_account.rs"], "core_business": ["crates/router/src/core/payment_methods/cards.rs", "crates/router/src/core/payments/payment_methods.rs", "crates/router/src/core/payments/routing.rs", "crates/router/src/core/user_role/role.rs", "crates/router/src/core/webhooks/incoming.rs"], "utils": ["crates/router/src/utils/user_role.rs", "crates/storage_impl/src/utils.rs"], "config": [".deepsource.toml", "Cargo.toml"], "other": ["INSTALL_dependencies.sh", "crates/analytics/src/search.rs", "crates/euclid/src/backend/vir_interpreter.rs", "crates/euclid/src/dssa/state_machine.rs", "crates/router/src/db/dispute.rs", "crates/router/src/db/refund.rs"]}, "change_types": {"conditionals_added": 1, "database_queries": 21}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd avs_check and cvv_check in the response.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Checkout.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Modifiers.js`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (17 changes)", "metadata": {"pr_number": 9389, "pr_title": "fix(connector): [checkout] Add AVS, CVV check in the response", "merged_at": "2025-09-18T07:32:25Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Checkout.js", "cypress-tests/cypress/e2e/configs/Payment/Modifiers.js"]}, "change_types": {"functions_added": 1, "fields_added": 17}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- `diesel_cli` version `2.3.0` expects to call `rustfmt` to format its output. If `rustfmt` is not installed on the system it will give an error.\r\n- Added a step to install `rustfmt` to fix the workflow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `.github/workflows/migration-check.yaml`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9386, "pr_title": "ci(migration-check): install rustfmt to address migration run failures", "merged_at": "2025-09-15T12:52:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"other": [".github/workflows/migration-check.yaml"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR fixes two critical issues in Adyen Platform connector and payout core flow error handling:\r\n\r\n1. **Enhanced error message construction**: Modified `build_error_response` in `crates/hyperswitch_connectors/src/connectors/adyenplatform.rs` to include the `detail` field when `invalid_fields` is not present. This provides users with comprehensive error information, especially for business logic errors where Adyen provides detailed explanations.\r\n\r\n2. **Fixed improper PayoutFailed usage**: Removed multiple instances of `PayoutFailed` from core payouts flow that were being thrown after connector calls. This was bypassing proper connector error handling and preventing detailed error messages from reaching the API response.", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform.rs`\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (19 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9384, "pr_title": "fix(connector): [adyenplatform] update error mapping", "merged_at": "2025-09-18T14:31:52Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "merchant", "user"]}, "hierarchy": {"core_business": ["crates/router/src/core/payouts.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/adyenplatform.rs", "crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {"fields_added": 19, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Wasm changes for paysafe card 3ds", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Extend existing types with new fields (4 changes)", "metadata": {"pr_number": 9380, "pr_title": "refactor(connector): wasm changes", "merged_at": "2025-09-16T07:22:05Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "card"]}, "hierarchy": {"connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {"structs_added": 2, "fields_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nFix Nuvei payments and chargeback webhooks\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n\r\nTested it by configuring payments, refunds and chargeback Webhooks at Nuvei\r\n\r\n<details>\r\n<summary>1.Test manual failure case </summary>\r\n1. Create a manual payment with failure card\r\n\r\n```sh\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_1GzDDtw7u8wOD5LgwtaSVe9S6ycpAy73s9BPr72X3mCpSLmE1oA1bWmQgDUjfmGx' \\\r\n--data-raw '{\r\n    \"amount\": 30030,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \r\n    \r\n    \"capture_method\": \"manual\",\r\n       \"billing\": {\r\n       \r\n        \"address\": {\r\n            \"line1\": \"3 Main St.\",\r\n            \r\n            \r\n            \"city\": \"Bloomfield\",\r\n            \"state\": \"CT\",\r\n            \"zip\": \"06002\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Eileen Jones\"\r\n            \r\n        }\r\n    },\r\n  \r\n     \"email\": \"email16@here.com\",\r\n    \r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n   \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4008370896662369\",\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"50\",\r\n            \r\n            \"card_cvc\": \"758\"\r\n            \r\n        }\r\n    }\r\n   \r\n    ,\"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n\r\n    \r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_MklD1Rd6goefCSNRpl7G\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_cf8f5ac7-8547-418b-a12e-1451b474ac8a\",\r\n    \"status\": \"failed\",\r\n    \"amount\": 30030,\r\n    \"net_amount\": 30030,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 30030,\r\n    \"amount_received\": null,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_MklD1Rd6goefCSNRpl7G_secret_bQViOfLwoapfPsIUonTt\",\r\n    \"created\": \"2025-09-17T08:21:18.431Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"email16@here.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"2369\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400837\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"50\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"cvv_2_reply\": \"\",\r\n                \"avs_description\": null,\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_uCdvPzx1vBfDH4ifrStG\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Bloomfield\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"3 Main St.\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"06002\",\r\n            \"state\": \"CT\",\r\n            \"first_name\": \"Eileen Jones\",\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": \"-1\",\r\n    \"error_message\": \"Decline\",\r\n    \"unified_code\": \"UE_9000\",\r\n    \"unified_message\": \"Something went wrong\",\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"8110000000014575811\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Y0YKlaXCpv5VLrjGwNLm\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_Hv2lKARGaUwIrhXxAXH8\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-17T08:36:18.431Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-17T08:21:19.815Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": \"-1\",\r\n    \"issuer_error_message\": \"Decline\",\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": {\r\n        \"network_advice_code\": \"\"\r\n    }\r\n}\r\n```\r\n\r\nWebhook from the connector should show 2xx response\r\n\r\n</details>\r\n<details>\r\n<summary>2. Create a payment and do a refund</summary>\r\nCreate a payment\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_1GzDDtw7u8wOD5LgwtaSVe9S6ycpAy73s9BPr72X3mCpSLmE1oA1bWmQgDUjfmGx' \\\r\n--data-raw '{\r\n    \"amount\": 30030,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \r\n    \r\n    \"capture_method\": \"automatic\",\r\n       \"billing\": {\r\n       \r\n        \"address\": {\r\n            \"line1\": \"3 Main St.\",\r\n            \r\n            \r\n            \"city\": \"Bloomfield\",\r\n            \"state\": \"CT\",\r\n            \"zip\": \"06002\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Eileen Jones\"\r\n            \r\n        }\r\n    },\r\n     \"email\": \"email16@here.com\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4111111111111111\",\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"50\",\r\n            \r\n            \"card_cvc\": \"758\"\r\n            \r\n        }\r\n    }\r\n    \r\n    ,\"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_cK62pqa8F4P32DqPGwf1\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_cf8f5ac7-8547-418b-a12e-1451b474ac8a\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 30030,\r\n    \"net_amount\": 30030,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 30030,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_cK62pqa8F4P32DqPGwf1_secret_Dvc0djCVscjQY1BcDt9x\",\r\n    \"created\": \"2025-09-17T08:23:51.019Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"email16@here.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1111\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"411111\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"03\",\r\n            \"card_exp_year\": \"50\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"cvv_2_reply\": \"\",\r\n                \"avs_description\": null,\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_Bu1xBMepQFrpomazI8VC\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Bloomfield\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"3 Main St.\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"06002\",\r\n            \"state\": \"CT\",\r\n            \"first_name\": \"Eileen Jones\",\r\n            \"last_name\": null,\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": null,\r\n    \"connector_transaction_id\": \"8110000000014576020\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8894221111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_Y0YKlaXCpv5VLrjGwNLm\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_Hv2lKARGaUwIrhXxAXH8\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-17T08:38:51.019Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"480213756277396\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-17T08:23:52.744Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null,\r\n    \"enable_overcapture\": null,\r\n    \"is_overcapture_enabled\": null,\r\n    \"network_details\": null\r\n}\r\n```\r\nWebhook from connector should have a 200 response\r\n\r\nCreate a Refund\r\n\r\n```sh\r\n\r\ncurl --location 'http://localhost:8080/refunds' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_1GzDDtw7u8wOD5LgwtaSVe9S6ycpAy73s9BPr72X3mCpSLmE1oA1bWmQgDUjfmGx' \\\r\n--data '{\r\n    \"payment_id\": \"pay_cK62pqa8F4P32DqPGwf1\",\r\n    \r\n    \"reason\": \"Customer returned product\",\r\n    \"refund_type\": \"instant\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"refund_id\": \"ref_OIrC7kZAkOw8f98fIau7\",\r\n    \"payment_id\": \"pay_hesMmqr4ErioGWSfQ6Yu\",\r\n    \"amount\": 30030,\r\n    \"currency\": \"USD\",\r\n    \"status\": \"succeeded\",\r\n    \"reason\": \"Customer returned product\",\r\n    \"metadata\": {\r\n        \"udf1\": \"value1\",\r\n        \"new_customer\": \"true\",\r\n        \"login_date\": \"2019-09-10T10:11:12Z\"\r\n    },\r\n    \"error_message\": null,\r\n    \"error_code\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"created_at\": \"2025-09-17T09:54:52.906Z\",\r\n    \"updated_at\": \"2025-09-17T09:54:54.027Z\",\r\n    \"connector\": \"nuvei\",\r\n    \"profile_id\": \"pro_Y0YKlaXCpv5VLrjGwNLm\",\r\n    \"merchant_connector_id\": \"mca_Hv2lKARGaUwIrhXxAXH8\",\r\n    \"split_refunds\": null,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null\r\n}\r\n```\r\nCheck for successful response to the web hook \r\n\r\n</details>\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei.rs`\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (8 changes)\n- Extend existing types with new fields (92 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 9654d18d:\nFiles to modify:\n\n\n**nuvei.rs**\n  Remove:\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Nuvei\n  Add:\n    - function: private::handle_response\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Nuvei\n\n**transformers.rs**\n  Remove:\n    - function: private::from\n    - enum: pub::PaymentTransactionType\n    - impl: impl clone()\n    - impl: impl From<&NuveiWebhook> for NuveiWebhookTransactionId\n  Add:\n    - function: private::from\n    - function: pub::map_dispute_notification_to_event\n    - function: private::from\n    - struct: pub::ChargebackData\n    - struct: pub::ChargebackTransactionDetails\n    - enum: pub::NuveiPaymentSyncResponse\n    - enum: pub::DisputeUnifiedStatusCode\n    - enum: pub::ChargebackType\n    - enum: pub::ChargebackStatusCategory\n    - enum: pub::DmnApiTransactionStatus\n    - impl: impl From<NuveiPaymentSyncResponse> for NuveiTransactionSyncResponse\n    - impl: impl From<DisputeUnifiedStatusCode> for common_enums::DisputeStage", "metadata": {"pr_number": 9378, "pr_title": "fix(connectors): [Nuvei] payments, refunds and chargeback webhooks", "merged_at": "2025-09-19T12:17:17Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"structs_added": 2, "functions_added": 8, "enums_added": 5, "fields_added": 92, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nremoving changes for injector check of proxy and certificate", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `crates/injector/src/vault_metadata.rs`", "metadata": {"pr_number": 9373, "pr_title": "chore(injector): removing changes for injector check of proxy and certificate", "merged_at": "2025-09-16T10:09:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"other": ["crates/injector/src/vault_metadata.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd acknowledgement in adyen for incoming webhooks by sending status 200.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs`", "metadata": {"pr_number": 9372, "pr_title": "feat(router): Handle incoming webhooks adyen", "merged_at": "2025-09-17T18:54:57Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/common_enums/src/connector_enums.rs", "crates/hyperswitch_connectors/src/connectors/adyenplatform/transformers/payouts.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n1. For different creds, ACI sends different redirection_data (for default account setting and the one with proper 3DS configuration). This PR handles both types of responses.\r\n2. `connector_mandate_id` is populated.\r\n3. Error handling added for payments that failed in redirection page.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/aci/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (58 changes)\n- Add conditional logic for feature flags or filtering (4 changes)", "metadata": {"pr_number": 9367, "pr_title": "fix(connector): [ACI] 3DS, connector mandate id, error handling fixed", "merged_at": "2025-09-17T17:59:19Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/aci/transformers.rs"]}, "change_types": {"functions_added": 1, "enums_added": 1, "fields_added": 58, "conditionals_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded Peachpayments Template Code", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/connector_endpoints.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**3. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - ... and 15 more files\n\n**4. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**5. Utils**\n   - `crates/test_utils/tests/sample_auth.toml`\n\n**6. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**7. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (83 changes)\n- Extend existing types with new fields (166 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 0873d930:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**connectors.rs**\n  Add:\n    - mod: pub::peachpayments\n\n**peachpayments.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Peachpayments\n    - impl: impl Peachpayments\n    - impl: impl api::Payment for Peachpayments\n    - impl: impl api::PaymentSession for Peachpayments\n    - impl: impl api::ConnectorAccessToken for Peachpayments\n    - impl: impl api::MandateSetup for Peachpayments\n    - impl: impl api::PaymentAuthorize for Peachpayments\n    - impl: impl api::PaymentSync for Peachpayments\n    - impl: impl api::PaymentCapture for Peachpayments\n    - impl: impl api::PaymentVoid for Peachpayments\n    - impl: impl api::Refund for Peachpayments\n    - impl: impl api::RefundExecute for Peachpayments\n    - impl: impl api::RefundSync for Peachpayments\n    - impl: impl api::PaymentToken for Peachpayments\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Peachpayments\n    - impl: impl ConnectorCommon for Peachpayments\n    - impl: impl ConnectorValidation for Peachpayments\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Peachpayments\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Peachpayments\n    - impl: impl webhooks::IncomingWebhook for Peachpayments\n    - impl: impl ConnectorSpecifications for Peachpayments\n    - mod: pub::transformers\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::PeachpaymentsRouterData\n    - struct: pub::PeachpaymentsPaymentsRequest\n    - struct: pub::PeachpaymentsCard\n    - struct: pub::PeachpaymentsAuthType\n    - struct: pub::PeachpaymentsPaymentsResponse\n    - struct: pub::PeachpaymentsRefundRequest\n    - struct: pub::RefundResponse\n    - struct: pub::PeachpaymentsErrorResponse\n    - enum: pub::PeachpaymentsPaymentStatus\n    - enum: pub::RefundStatus\n    - impl: impl From<(MinorUnit, T)> for PeachpaymentsRouterData<T>\n    - impl: impl TryFrom<&PeachpaymentsRouterData<&PaymentsAuthorizeRouterData>> for PeachpaymentsPaymentsRequest\n    - impl: impl TryFrom<&ConnectorAuthType> for PeachpaymentsAuthType\n    - impl: impl From<PeachpaymentsPaymentStatus> for common_enums::AttemptStatus\n    - impl: impl TryFrom<ResponseRouterData<F, PeachpaymentsPaymentsResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&PeachpaymentsRouterData<&RefundsRouterData<F>>> for PeachpaymentsRefundRequest\n    - impl: impl From<RefundStatus> for enums::RefundStatus\n    - impl: impl TryFrom<RefundsResponseRouterData<Execute, RefundResponse>> for RefundsRouterData<Execute>\n    - impl: impl TryFrom<RefundsResponseRouterData<RSync, RefundResponse>> for RefundsRouterData<RSync>\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**connector_endpoints.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code\n\n**main.rs**\n  Add:\n    - mod: private::peachpayments\n\n**peachpayments.rs**\n  Add:\n    - function: pub::new\n    - function: private::build_headers\n    - function: private::id\n    - function: private::get_currency_unit\n    - function: private::common_get_content_type\n    - function: private::base_url\n    - function: private::get_auth_header\n    - function: private::build_error_response\n    - function: private::validate_mandate_payment\n    - function: private::validate_psync_reference_id\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_webhook_object_reference_id\n    - function: private::get_webhook_event_type\n    - function: private::get_webhook_resource_object\n    - function: private::get_connector_about\n    - function: private::get_supported_payment_methods\n    - function: private::get_supported_webhook_flows\n    - struct: pub::Peachpayments\n    - impl: impl Peachpayments\n    - impl: impl api::Payment for Peachpayments\n    - impl: impl api::PaymentSession for Peachpayments\n    - impl: impl api::ConnectorAccessToken for Peachpayments\n    - impl: impl api::MandateSetup for Peachpayments\n    - impl: impl api::PaymentAuthorize for Peachpayments\n    - impl: impl api::PaymentSync for Peachpayments\n    - impl: impl api::PaymentCapture for Peachpayments\n    - impl: impl api::PaymentVoid for Peachpayments\n    - impl: impl api::Refund for Peachpayments\n    - impl: impl api::RefundExecute for Peachpayments\n    - impl: impl api::RefundSync for Peachpayments\n    - impl: impl api::PaymentToken for Peachpayments\n    - impl: impl ConnectorIntegration<PaymentMethodToken, PaymentMethodTokenizationData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorCommonExt<Flow, Request, Response> for Peachpayments\n    - impl: impl ConnectorCommon for Peachpayments\n    - impl: impl ConnectorValidation for Peachpayments\n    - impl: impl ConnectorIntegration<Session, PaymentsSessionData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<AccessTokenAuth, AccessTokenRequestData, AccessToken> for Peachpayments\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<PSync, PaymentsSyncData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Capture, PaymentsCaptureData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<Execute, RefundsData, RefundsResponseData> for Peachpayments\n    - impl: impl ConnectorIntegration<RSync, RefundsData, RefundsResponseData> for Peachpayments\n    - impl: impl webhooks::IncomingWebhook for Peachpayments\n    - impl: impl ConnectorSpecifications for Peachpayments\n    - mod: pub::transformers\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9363, "pr_title": "feat(connector): Add Peachpayments Template Code", "merged_at": "2025-09-11T16:22:51Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/connector_endpoints.rs"], "core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors.rs", "crates/hyperswitch_connectors/src/connectors/peachpayments.rs", "crates/hyperswitch_connectors/src/connectors/peachpayments/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs", "crates/router/src/connector.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/router/tests/connectors/main.rs", "crates/router/tests/connectors/peachpayments.rs", "crates/router/tests/connectors/sample_auth.toml", "crates/test_utils/src/connector_auth.rs", "scripts/add_connector.sh"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "utils": ["crates/test_utils/tests/sample_auth.toml"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 10, "functions_added": 83, "enums_added": 2, "fields_added": 166, "imports_added": 22}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nIn certain card networks like Amex and Visa, the `refusal_reason_raw` field inside `AdditionalData` comes as `51 : Insufficient funds/over credit limit`. In that case, we map `51` to `network_decline_code` and `Insufficient funds/over credit limit` to `network_error_message`", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (7 changes)", "metadata": {"pr_number": 9361, "pr_title": "fix(connector): [ADYEN] Add fallback parsing for refusal codes and messages", "merged_at": "2025-09-19T11:35:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs"]}, "change_types": {"fields_added": 7}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nthis pr adds comprehensive apple pay support to the paysafe connector, enabling merchants to process apple pay transactions through paysafe's payment gateway\r\n\r\n- dynamic account id detection for apple pay for both encrypt and decrypt flows\r\n- payment via apple pay in paysafe happens in 2 steps:\r\n  - payment initiate: hits `/paymenthandles` endpoint (happens in preprocessing step) with all the necessary apple data\r\n  - payment confirm: hits `/payments` endpoint with the payment handle token to complete the payment", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n\n**2. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - ... and 4 more files\n\n**3. Type Definitions**\n   - `crates/common_types/src/payments.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**5. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (14 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (143 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 2e0da5c0:\nFiles to modify:\n\n\n**payments.rs**\n  Add:\n    - function: pub::get_expiry_date_as_yymm\n\n**connector.rs**\n  Add:\n    - struct: pub::AccountIdConfigForApplePay\n\n**paysafe.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - struct: pub::ApplePayAccountDetails\n    - struct: pub::PaysafeApplepayPayment\n    - struct: pub::PaysafeApplePayPaymentToken\n    - struct: pub::PaysafeApplePayToken\n    - struct: pub::PaysafeApplePayEncryptedData\n    - struct: pub::PaysafeApplePayDecryptedDataWrapper\n    - struct: pub::PaysafeApplePayDecryptedData\n    - struct: pub::PaysafeApplePayDecryptedPaymentData\n    - struct: pub::PaysafeApplePayHeader\n    - struct: pub::PaysafeApplePayPaymentMethod\n    - enum: pub::PaysafeApplePayPaymentData\n\n**payment_connector_required_fields.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - function: pub::get_expiry_date_as_yymm", "metadata": {"pr_number": 9358, "pr_title": "feat(connector): [paysafe] introduce applepay encrypt and predecrypt flow", "merged_at": "2025-09-24T16:58:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"], "connectors": ["crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/paysafe.rs", "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs", "crates/payment_methods/src/configs/payment_connector_required_fields.rs"], "types": ["crates/common_types/src/payments.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 14, "functions_added": 6, "enums_added": 1, "fields_added": 143, "imports_added": 2, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n\n**3. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (13 changes)", "metadata": {"pr_number": 9356, "pr_title": "fix(connector): [checkout] Add US Support for Apple Pay and Google Pay + Enhanced Checkout Response Data", "merged_at": "2025-09-11T13:22:02Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"]}, "change_types": {"structs_added": 1, "fields_added": 13}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n   - `crates/hyperswitch_domain_models/src/errors/api_error_response.rs`\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - ... and 1 more files\n\n**4. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n\n**5. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 3 more files\n\n**6. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**7. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**8. Other**\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - `crates/router/src/compatibility/stripe/errors.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (13 changes)\n- Implement new functions (19 changes)\n- Extend existing types with new fields (213 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit f02d1803:\nFiles to modify:\n\n\n**subscription.rs**\n  Add:\n    - function: pub::get_item_price_id\n    - function: pub::get_billing_address\n    - struct: pub::PaymentDetails\n    - struct: pub::PaymentResponseData\n    - struct: pub::ConfirmSubscriptionRequest\n    - struct: pub::ConfirmSubscriptionResponse\n    - struct: pub::Invoice\n    - impl: impl ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionResponse\n\n**invoice.rs**\n  Modify existing code\n\n**chargebee.rs**\n  Add:\n    - impl: impl ConnectorIntegrationV2<\nCreateConnectorCustomer,\nSubscriptionCustomerData,\nConnectorCustomerData,\nPaymentsResponseData,\n> for Chargebee\n\n**transformers.rs**\n  Modify existing code\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::SubscriptionConnectorCustomerV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nCreateConnectorCustomer,\nSubscriptionCustomerData,\nConnectorCustomerData,\nPaymentsResponseData,\n> for Recurly\n\n**business_profile.rs**\n  Add:\n    - function: pub::get_billing_processor_id\n\n**api_error_response.rs**\n  Modify existing code\n\n**flow_common_types.rs**\n  Remove:\n    - struct: pub::SubscriptionCreateData\n    - struct: pub::GetSubscriptionPlansData\n    - struct: pub::GetSubscriptionPlanPricesData\n  Add:\n    - struct: pub::SubscriptionCustomerData\n    - struct: pub::SubscriptionCreateData\n    - struct: pub::GetSubscriptionPlansData\n    - struct: pub::GetSubscriptionPlanPricesData\n\n**subscriptions.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<SubscriptionStatus> for api_models::subscription::SubscriptionStatus\n\n**subscriptions_v2.rs**\n  Add:\n    - trait: private::SubscriptionConnectorCustomerV2\n\n**conversion_impls.rs**\n  Modify existing code\n\n**errors.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::get_item_price_id\n    - function: pub::get_billing_address\n    - struct: pub::PaymentDetails\n    - struct: pub::PaymentResponseData\n    - struct: pub::ConfirmSubscriptionRequest\n    - struct: pub::ConfirmSubscriptionResponse\n    - struct: pub::Invoice\n    - impl: impl ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionResponse\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::get_item_price_id\n    - function: pub::get_billing_address\n    - struct: pub::PaymentDetails\n    - struct: pub::PaymentResponseData\n    - struct: pub::ConfirmSubscriptionRequest\n    - struct: pub::ConfirmSubscriptionResponse\n    - struct: pub::Invoice\n    - impl: impl ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionRequest\n    - impl: impl ApiEventMetric for ConfirmSubscriptionResponse\n\n**utils.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9353, "pr_title": "feat(subscriptions): Add Subscription confirm handler", "merged_at": "2025-09-25T16:22:29Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/invoice.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs", "crates/hyperswitch_domain_models/src/errors/api_error_response.rs", "crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs"], "core_business": ["crates/router/src/core/subscription.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/router/tests/connectors/utils.rs", "migrations/2025-09-23-112547_add_billing_processor_in_connector_type/down.sql", "migrations/2025-09-23-112547_add_billing_processor_in_connector_type/up.sql"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/compatibility/stripe/errors.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/subscription.rs"]}, "change_types": {"structs_added": 13, "functions_added": 19, "fields_added": 213, "imports_added": 8, "conditionals_added": 2, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR introduces the capability to send the Merchant Order Reference ID to the Unified Connector Service (UCS) as part of gRPC request headers. This enhancement allows the UCS to be aware of the merchant's original identifier for a transaction, which can be crucial for tracking, reconciliation, and reporting purposes.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - `crates/router/src/core/payments/flows/external_proxy_flow.rs`\n   - ... and 5 more files\n\n**3. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n\n**4. Type Definitions**\n   - `crates/common_utils/src/ucs_types.rs`\n   - `crates/router/src/types/transformers.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/lib.rs`\n\n**6. Other**\n   - `crates/external_services/src/grpc_client.rs`\n   - `crates/external_services/src/lib.rs`\n   - `crates/router/src/lib.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (7 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9352, "pr_title": "feat(ucs): transmit merchant order reference id to unified connector service", "merged_at": "2025-09-18T08:51:58Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/flows/setup_mandate_flow.rs", "crates/router/src/core/payments/transformers.rs", "crates/router/src/core/unified_connector_service.rs", "crates/router/src/core/unified_connector_service/transformers.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs"], "types": ["crates/common_utils/src/ucs_types.rs", "crates/router/src/types/transformers.rs"], "utils": ["crates/common_utils/src/lib.rs"], "other": ["crates/external_services/src/grpc_client.rs", "crates/external_services/src/lib.rs", "crates/router/src/lib.rs"]}, "change_types": {"functions_added": 1, "enums_added": 1, "fields_added": 7, "imports_added": 12, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nPR has the following fix : \r\n\r\n-  mapping for states supported by Nuvei has been added. If we receive a value beyond the list we send None to the connector(since it is an optional field)\r\n-  Card network handling for Proxy flow\r\n- Removing MAC from payment checks (as this will be handled in the network_details field)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/multisafepay/transformers.rs`\n   - ... and 4 more files\n\n**2. Other**\n   - `crates/common_enums/src/enums.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (11 changes)\n- Extend existing types with new fields (19 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 1b8cd9db:\nFiles to modify:\n\n\n**enums.rs**\n  Add:\n    - enum: pub::AustraliaStatesAbbreviation\n    - enum: pub::JapanStatesAbbreviation\n    - enum: pub::NewZealandStatesAbbreviation\n    - enum: pub::SingaporeStatesAbbreviation\n    - enum: pub::ThailandStatesAbbreviation\n    - enum: pub::PhilippinesStatesAbbreviation\n    - enum: pub::IndiaStatesAbbreviation\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::foreign_try_from\n    - function: private::normalize_state\n    - function: pub::parse_state_enum\n    - impl: impl ForeignTryFrom<String> for AustraliaStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for JapanStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for ThailandStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for NewZealandStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for SingaporeStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for PhilippinesStatesAbbreviation\n    - impl: impl ForeignTryFrom<String> for IndiaStatesAbbreviation", "metadata": {"pr_number": 9351, "pr_title": "fix(connector): [nuvei] pass state field in the request, network handling for proxy flow", "merged_at": "2025-09-17T17:59:19Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs", "crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs", "crates/hyperswitch_connectors/src/connectors/multisafepay/transformers.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs", "crates/hyperswitch_connectors/src/connectors/payeezy/transformers.rs", "crates/hyperswitch_connectors/src/connectors/payone/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs"], "other": ["crates/common_enums/src/enums.rs"]}, "change_types": {"functions_added": 11, "enums_added": 8, "fields_added": 19, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Fix type account_id for ConfigMetadata", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/src/connector.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9349, "pr_title": "refactor(connector): [Paysafe] fix wasm", "merged_at": "2025-09-10T17:22:46Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"connectors": ["crates/connector_configs/src/connector.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n<img width=\"539\" height=\"305\" alt=\"Screenshot 2025-09-18 at 22 35 30\" src=\"https://github.com/user-attachments/assets/6ef6a861-7bb8-459e-9ac2-99791ec94c21\" />\r\n\r\n\r\n## Description\r\nThis PR introduces the **`invoice` table** along with supporting models, queries, schema definitions, and storage interfaces.  \r\nThe goal is to enable **subscription billing and payment tracking** by storing invoices linked to merchants, customers, subscriptions, and connectors.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/invoice.rs`\n   - `crates/diesel_models/src/lib.rs`\n   - `crates/diesel_models/src/query.rs`\n   - ... and 3 more files\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/storage.rs`\n   - `crates/router/src/types/storage/invoice.rs`\n\n**4. Other**\n   - `crates/router/src/db.rs`\n   - `crates/router/src/db/invoice.rs`\n   - `migrations/2025-09-10-101514_add_invoice_table/down.sql`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (17 changes)\n- Extend existing types with new fields (72 changes)\n- Modify database queries (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 61949c55:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Add:\n    - enum: pub::InvoiceStatus\n\n**invoice.rs**\n  Add:\n    - function: pub::new\n    - function: pub::new\n    - struct: pub::InvoiceNew\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - impl: impl InvoiceNew\n    - impl: impl InvoiceUpdate\n\n**lib.rs**\n  Add:\n    - mod: pub::invoice\n\n**query.rs**\n  Add:\n    - mod: pub::invoice\n\n**invoice.rs**\n  Add:\n    - function: pub::new\n    - function: pub::new\n    - struct: pub::InvoiceNew\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - impl: impl InvoiceNew\n    - impl: impl InvoiceUpdate\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**db.rs**\n  Add:\n    - mod: pub::invoice\n\n**invoice.rs**\n  Add:\n    - function: pub::new\n    - function: pub::new\n    - struct: pub::InvoiceNew\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - impl: impl InvoiceNew\n    - impl: impl InvoiceUpdate\n\n**storage.rs**\n  Add:\n    - mod: pub::invoice\n\n**invoice.rs**\n  Add:\n    - function: pub::new\n    - function: pub::new\n    - struct: pub::InvoiceNew\n    - struct: pub::Invoice\n    - struct: pub::InvoiceUpdate\n    - impl: impl InvoiceNew\n    - impl: impl InvoiceUpdate", "metadata": {"pr_number": 9348, "pr_title": "feat: add invoice table", "merged_at": "2025-09-23T16:29:59Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"database": ["crates/diesel_models/src/invoice.rs", "crates/diesel_models/src/lib.rs", "crates/diesel_models/src/query.rs", "crates/diesel_models/src/query/invoice.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs"], "types": ["crates/router/src/types/storage.rs", "crates/router/src/types/storage/invoice.rs"], "other": ["crates/router/src/db.rs", "crates/router/src/db/invoice.rs", "migrations/2025-09-10-101514_add_invoice_table/down.sql", "migrations/2025-09-10-101514_add_invoice_table/up.sql"]}, "change_types": {"structs_added": 3, "functions_added": 17, "enums_added": 1, "fields_added": 72, "imports_added": 17, "database_queries": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nFor iDEAL, Adyen sends the recurringDetailReference in the webhook with event_code: RECURRING_CONTRACT, instead of including it in the Authorize response. Since we currently don’t process this webhook, MIT transactions were failing. \r\n\r\nThis PR adds support to consume the required webhook and populate the mandate_reference for the connector.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (12 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9347, "pr_title": "feat(connector): [ADYEN] Add support to ideal Mandate Webhook", "merged_at": "2025-09-11T14:32:09Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs"]}, "change_types": {"fields_added": 12, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nUpdated quarterly roadmap and slack invite URL's in `welcome_to_community.html` file which is sent as the email body whenever a user signs up.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `crates/router/src/services/email/assets/welcome_to_community.html`", "metadata": {"pr_number": 9341, "pr_title": "refactor(users): update url and text in welcome email", "merged_at": "2025-09-16T17:53:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"other": ["crates/router/src/services/email/assets/welcome_to_community.html"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nWe need to start sending execute_three_d as false in adyen no3ds payments request to skip 3ds auth at adyen ends.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (4 changes)", "metadata": {"pr_number": 9339, "pr_title": "feat(connector): [ADYEN ]: send execute_three_d in no3ds adyen", "merged_at": "2025-09-23T14:51:38Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs"]}, "change_types": {"fields_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR enables reading NTI from Novalnet's payments response. And also updates the integration for raw card + NTI flow.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/novalnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (5 changes)", "metadata": {"pr_number": 9337, "pr_title": "feat(connector): [Novalnet] read and send scheme_tid for NTI flows", "merged_at": "2025-09-16T12:08:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/novalnet/transformers.rs"]}, "change_types": {"fields_added": 5}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis pull request introduces support for fetching subscription estimates from Chargebee, alongside the existing subscription plans functionality. It adds new data structures, request/response types, and integration logic to handle the \"Get Subscription Estimate\" flow end-to-end. The changes span the domain models, interface types, and the Chargebee connector implementation.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs`\n   - ... and 2 more files\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 1 more files\n\n**3. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**4. Other**\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - `crates/router/src/services/api.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (11 changes)\n- Implement new functions (9 changes)\n- Extend existing types with new fields (89 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit a7518373:\nFiles to modify:\n\n\n**chargebee.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_content_type\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::subscriptions::GetSubscriptionEstimateFlow for Chargebee\n    - impl: impl ConnectorIntegration<\nGetSubscriptionEstimate,\nGetSubscriptionEstimateRequest,\nGetSubscriptionEstimateResponse,\n> for Chargebee\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::ChargebeeSubscriptionEstimateRequest\n    - struct: pub::SubscriptionEstimateResponse\n    - struct: pub::ChargebeeEstimate\n    - struct: pub::SubscriptionEstimate\n    - struct: pub::InvoiceEstimate\n    - struct: pub::LineItem\n    - impl: impl TryFrom<ResponseRouterData<F, SubscriptionEstimateResponse, T, GetSubscriptionEstimateResponse>> for RouterData<F, T, GetSubscriptionEstimateResponse>\n    - impl: impl TryFrom<&GetSubscriptionEstimateRouterData> for ChargebeeSubscriptionEstimateRequest\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::GetSubscriptionEstimateV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nGetSubscriptionEstimate,\nGetSubscriptionEstimateData,\nGetSubscriptionEstimateRequest,\nGetSubscriptionEstimateResponse,\n> for Recurly\n\n**default_implementations.rs**\n  Add:\n    - impl: impl GetSubscriptionEstimateFlow for $connector\n    - impl: impl ConnectorIntegration<\nGetSubscriptionEstimate,\nGetSubscriptionEstimateRequest,\nGetSubscriptionEstimateResponse\n> for $connector\n    - impl: impl GetSubscriptionEstimateFlow for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<\nGetSubscriptionEstimate,\nGetSubscriptionEstimateRequest,\nGetSubscriptionEstimateResponse,\n> for connectors::DummyConnector<T>\n\n**flow_common_types.rs**\n  Add:\n    - struct: pub::GetSubscriptionEstimateData\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionEstimate\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionEstimate\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionEstimate\n\n**types.rs**\n  Modify existing code\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionEstimate\n\n**subscriptions_v2.rs**\n  Add:\n    - trait: private::GetSubscriptionEstimateV2\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code", "metadata": {"pr_number": 9336, "pr_title": "feat(subscription): Add support to estimate for a subscription in chargebee", "merged_at": "2025-09-24T16:58:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/default_implementations.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 11, "functions_added": 9, "fields_added": 89}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis pull request updates the API endpoint configuration in the `dashboard.toml` file. The only change is the `api_url` value, which now points to port 8080 instead of 9000.\r\n\r\nEarlier PR for reference : https://github.com/juspay/hyperswitch/pull/9243", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `config/dashboard.toml`", "metadata": {"pr_number": 9334, "pr_title": "fix: fix api url in dashboard configuration", "merged_at": "2025-09-10T10:38:50Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"config": ["config/dashboard.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR adds the following rule to `.gitattributes` to ensure `.patch` files always use LF line endings, regardless of developer OS:\r\n\r\n```gitattributes\r\n*.patch text eol=lf\r\n```\r\n\r\nThis rule overrides Windows’ default `core.autocrlf` behavior and prevents errors during migration when Diesel’s patch parser encounters CRLF line endings.\r\n\r\n**Additionally**: For developers who have already cloned the repository and whose `.patch` files may still have CRLF endings, a workaround :\r\n\r\n```bash\r\ngit checkout -- crates/diesel_models/drop_id.patch\r\n```\r\n\r\nThis ensures the `.patch` file is re-checked-out with the correct LF line endings, without requiring a full reclone.\r\n\r\nCloses: #9120", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `.gitattributes`", "metadata": {"pr_number": 9333, "pr_title": "fix(gitattributes): enforce LF for `.patch` files to avoid CRLF parsing errors on Windows", "merged_at": "2025-09-17T10:03:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"other": [".gitattributes"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nintroduces cutoff limit for manual retry\r\n- after the creation of intent, if the cutoff duration is expired, don't allow any payment through manual retry\r\n- cutoff duration is 50% of session expiry set in profile or default (50% of 15 minutes)\r\n- this only happens in case of manual retry i.e doesn't affect the first confirm", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/helpers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9330, "pr_title": "feat(core): add manual retry cutoff duration", "merged_at": "2025-09-18T08:40:02Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/helpers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nSupport MOTO payments for checkout.\r\nUpdated status flag - if capture method is Automatic, we can map the Authorized status received from the connector to Charged.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Checkout.js`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (210 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 3f8943bd:\nFiles to modify:\n\n\n**transformers.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code", "metadata": {"pr_number": 9327, "pr_title": "feat(connector): [checkout] add support for MOTO payments", "merged_at": "2025-09-10T14:18:55Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Checkout.js"]}, "change_types": {"fields_added": 210, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nBumped up the UCS Client dependency in order to bring in the latest changes of having first_name and last_name as SecretString types.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/unified_connector_service/transformers.rs`\n\n**2. Configuration Files**\n   - `crates/external_services/Cargo.toml`\n   - `crates/router/Cargo.toml`\n\n**3. Other**\n   - `Cargo.lock`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9326, "pr_title": "feat(core): Add first_name and last_name as Secret<String> Types. ", "merged_at": "2025-09-11T12:14:35Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/unified_connector_service/transformers.rs"], "config": ["crates/external_services/Cargo.toml", "crates/router/Cargo.toml"], "other": ["Cargo.lock"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadded delay between api-locking retries for HoldMultiple locking mechanism.\r\nThis was missed during development before.\r\nThis is already available for Single id locking.\r\n\r\nMain pr: https://github.com/juspay/hyperswitch/pull/9308", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/api_locking.rs`", "metadata": {"pr_number": 9325, "pr_title": "fix(api_locking): add delay between api-locking retries", "merged_at": "2025-09-09T13:10:04Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"core_business": ["crates/router/src/core/api_locking.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nMake the RevenueRecoveryRecordBack functionality generic to make it usable by subscription after making a successful payment.\r\nThis pull request refactors the \"record back\" functionality in the revenue recovery flow by renaming types and data structures from RevenueRecoveryRecordBack* and RecoveryRecordBack to InvoiceRecordBack* and InvoiceRecordBack. This change is applied consistently across domain models, connector implementations, interfaces, and transformers, improving clarity and aligning naming with their purpose (handling invoice record backs).", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/revenue_recovery.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types/revenue_recovery.rs`\n   - ... and 2 more files\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/flows.rs`\n   - `crates/router/src/core/revenue_recovery/types.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 5 more files\n\n**4. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n   - `crates/router/src/types.rs`\n\n**5. Other**\n   - `crates/hyperswitch_interfaces/src/api/revenue_recovery.rs`\n   - `crates/hyperswitch_interfaces/src/api/revenue_recovery_v2.rs`\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (1 changes)\n- Extend existing types with new fields (24 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit ea2fd1d4:\nFiles to modify:\n\n\n**chargebee.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**recurly.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**stripebilling.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**default_implementations.rs**\n  Modify existing code\n\n**default_implementations_v2.rs**\n  Modify existing code\n\n**flow_common_types.rs**\n  Remove:\n    - struct: pub::RevenueRecoveryRecordBackData\n  Add:\n    - struct: pub::InvoiceRecordBackData\n\n**revenue_recovery.rs**\n  Remove:\n    - struct: pub::RecoveryRecordBack\n  Add:\n    - struct: pub::InvoiceRecordBack\n\n**revenue_recovery.rs**\n  Remove:\n    - struct: pub::RecoveryRecordBack\n  Add:\n    - struct: pub::InvoiceRecordBack\n\n**revenue_recovery.rs**\n  Remove:\n    - struct: pub::RecoveryRecordBack\n  Add:\n    - struct: pub::InvoiceRecordBack\n\n**types.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Remove:\n    - struct: pub::RecoveryRecordBack\n  Add:\n    - struct: pub::InvoiceRecordBack\n\n**revenue_recovery_v2.rs**\n  Modify existing code\n\n**conversion_impls.rs**\n  Remove:\n    - impl: impl RouterDataConversion<T, Req, Resp> for RevenueRecoveryRecordBackData\n  Add:\n    - impl: impl RouterDataConversion<T, Req, Resp> for InvoiceRecordBackData\n\n**types.rs**\n  Modify existing code\n\n**flows.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9321, "pr_title": "refactor(connector): rename RevenueRecoveryRecordBack as InvoiceRecordBack", "merged_at": "2025-09-10T14:50:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/revenue_recovery.rs", "crates/hyperswitch_domain_models/src/router_request_types/revenue_recovery.rs", "crates/hyperswitch_domain_models/src/router_response_types/revenue_recovery.rs", "crates/hyperswitch_domain_models/src/types.rs"], "core_business": ["crates/router/src/core/payments/flows.rs", "crates/router/src/core/revenue_recovery/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/connectors/recurly/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripebilling.rs", "crates/hyperswitch_connectors/src/connectors/stripebilling/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs", "crates/router/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api/revenue_recovery.rs", "crates/hyperswitch_interfaces/src/api/revenue_recovery_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 4, "functions_added": 1, "fields_added": 24, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for [PR](https://github.com/juspay/hyperswitch/pull/9262)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`", "metadata": {"pr_number": 9318, "pr_title": "feat(payouts): Mapped Default Values to  Unified Error Code and Message", "merged_at": "2025-09-09T11:58:51Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"core_business": ["crates/router/src/core/payouts.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9283", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9312, "pr_title": "fix(payout): send latest status in outgoing webhook notifications during IncomingWebhook flow", "merged_at": "2025-09-09T11:52:57Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Hotfix for https://github.com/juspay/hyperswitch/pull/9277", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/routing.rs`\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/payouts/helpers.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9311, "pr_title": "fix(payout): use billing address in payment_methods", "merged_at": "2025-09-09T11:27:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/payments/routing.rs", "crates/router/src/core/payouts.rs", "crates/router/src/core/payouts/helpers.rs", "crates/router/src/core/utils.rs"]}, "change_types": {"functions_added": 1, "fields_added": 9, "imports_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadded delay between api-locking retries for `HoldMultiple` locking mechanism.\r\nThis was missed during development before. \r\nThis is already available for Single id locking.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/api_locking.rs`", "metadata": {"pr_number": 9308, "pr_title": "fix(api_locking): add delay between api-locking retries", "merged_at": "2025-09-09T13:04:26Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/api_locking.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nRequest creation changes for injector to be used `InjectorRequest` struct creation.\r\n\r\n```rust\r\nimpl InjectorRequest {\r\n        pub fn new()\r\n}\r\n```\r\n\r\nAlso change the response type\r\n```rust\r\npub struct InjectorResponse {\r\n        /// HTTP status code from the connector response\r\n        pub status_code: u16,\r\n        /// Response headers from the connector (optional)\r\n        pub headers: Option<HashMap<String, String>>,\r\n        /// Response body from the connector\r\n        pub response: serde_json::Value,\r\n    }\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Type Definitions**\n   - `crates/injector/src/types.rs`\n\n**2. Other**\n   - `crates/injector/src/consts.rs`\n   - `crates/injector/src/injector.rs`\n   - `crates/injector/src/lib.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (34 changes)\n- Extend existing types with new fields (70 changes)\n- Add conditional logic for feature flags or filtering (22 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit fabe82d2:\nFiles to modify:\n\n\n**consts.rs**\n  Modify existing code\n\n**injector.rs**\n  Remove:\n    - function: pub::create_identity_from_certificate_and_key\n    - function: pub::create_certificate\n    - function: private::get_client_builder\n    - struct: pub::TokenReference\n    - enum: pub::HttpClientError\n  Add:\n    - function: private::create_client\n    - function: private::get_client_builder\n    - function: private::get_base_client\n    - function: private::create_certificate\n    - function: private::log_and_convert_http_error\n    - function: private::build_request_with_certificates\n    - struct: private::TokenReference\n\n**lib.rs**\n  Add:\n    - mod: pub::consts\n    - mod: pub::vault_metadata\n\n**types.rs**\n  Remove:\n    - function: private::from\n    - struct: pub::DomainTokenData\n    - struct: pub::DomainConnectorPayload\n    - struct: pub::DomainConnectionConfig\n    - struct: pub::DomainInjectorRequest\n    - enum: pub::AcceptType\n  Add:\n    - struct: pub::InjectorResponse\n\n**vault_metadata.rs**\n  Add:\n    - function: pub::url_validation_failed\n    - function: private::process_metadata\n    - function: private::vault_connector\n    - function: private::validate_proxy_url\n    - function: private::validate_certificate\n    - function: private::process_metadata\n    - function: private::vault_connector\n    - function: pub::from_base64_header\n    - function: private::extract_and_apply_vault_metadata\n    - function: private::extract_and_apply_vault_metadata_with_fallback\n    - function: private::extract_and_apply_vault_metadata_with_fallback_from_header\n    - function: private::test_vault_metadata_processing\n    - function: private::test_vault_metadata_factory\n    - struct: pub::VgsMetadata\n    - struct: pub::VaultMetadataFactory\n    - enum: pub::VaultMetadataError\n    - enum: pub::ExternalVaultProxyMetadata\n    - trait: pub::VaultMetadataProcessor\n    - trait: pub::VaultMetadataExtractor\n    - trait: pub::VaultMetadataExtractorExt\n    - impl: impl VaultMetadataError\n    - impl: impl VaultMetadataProcessor for VgsMetadata\n    - impl: impl VgsMetadata\n    - impl: impl VaultMetadataProcessor for ExternalVaultProxyMetadata\n    - impl: impl VaultMetadataFactory\n    - impl: impl VaultMetadataExtractor for ConnectionConfig\n    - impl: impl VaultMetadataExtractorExt for ConnectionConfig\n    - mod: private::tests", "metadata": {"pr_number": 9306, "pr_title": "feat(injector): injector request formation changes", "merged_at": "2025-09-11T12:12:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"types": ["crates/injector/src/types.rs"], "other": ["crates/injector/src/consts.rs", "crates/injector/src/injector.rs", "crates/injector/src/lib.rs", "crates/injector/src/vault_metadata.rs"]}, "change_types": {"structs_added": 4, "functions_added": 34, "enums_added": 2, "fields_added": 70, "imports_added": 20, "conditionals_added": 22, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Implement card 3ds flow for Paysafe", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/paysafe.rs`\n   - `crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs`\n   - `crates/hyperswitch_connectors/src/default_implementations.rs`\n   - ... and 1 more files\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Paysafe.js`\n   - `cypress-tests/cypress/support/redirectionHandler.js`\n\n**Code Patterns Applied:**\n- Define new data structures (6 changes)\n- Implement new functions (16 changes)\n- Extend existing types with new fields (110 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit a87ab733:\nFiles to modify:\n\n\n**paysafe.rs**\n  Add:\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - impl: impl api::PaymentsCompleteAuthorize for Paysafe\n\n**transformers.rs**\n  Add:\n    - struct: pub::PaysafePaymentMethodDetails\n    - struct: pub::CardAccountId\n    - enum: pub::DeviceChannel\n    - enum: pub::ThreeDsMessageCategory\n    - enum: pub::ThreeDsAuthenticationPurpose\n    - enum: pub::ThreeDsChallengePreference\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_optional_connector_transaction_id", "metadata": {"pr_number": 9305, "pr_title": "feat(connector): [Paysafe] Implement card 3ds flow", "merged_at": "2025-09-11T15:53:05Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/paysafe.rs", "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Paysafe.js", "cypress-tests/cypress/support/redirectionHandler.js"]}, "change_types": {"structs_added": 6, "functions_added": 16, "enums_added": 6, "fields_added": 110, "imports_added": 3, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "## Type of Change", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_response_types.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/customers.rs`\n   - `crates/router/src/core/payments/operations/payment_response.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - ... and 9 more files\n\n**4. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**5. Other**\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (11 changes)\n- Extend existing types with new fields (61 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e6706187:\nFiles to modify:\n\n\n**transformers.rs**\n  Modify existing code\n\n**chargebee.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_content_type\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl ConnectorCustomer for Chargebee\n    - impl: impl ConnectorIntegration<CreateConnectorCustomer, ConnectorCustomerData, PaymentsResponseData> for Chargebee\n\n**transformers.rs**\n  Modify existing code\n\n**dwolla.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**default_implementations.rs**\n  Modify existing code\n\n**router_request_types.rs**\n  Modify existing code\n\n**router_response_types.rs**\n  Add:\n    - function: pub::new_with_customer_id\n    - function: pub::new\n    - struct: pub::ConnectorCustomerResponseData\n    - impl: impl ConnectorCustomerResponseData\n\n**subscriptions.rs**\n  Remove:\n    - trait: pub::Subscriptions\n  Add:\n    - trait: pub::Subscriptions\n    - trait: pub::ConnectorCustomer\n\n**subscriptions_v2.rs**\n  Remove:\n    - trait: pub::SubscriptionsV2\n  Add:\n    - trait: pub::SubscriptionsV2\n\n**types.rs**\n  Modify existing code\n\n**customers.rs**\n  Modify existing code\n\n**payment_response.rs**\n  Modify existing code\n\n**stax.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code", "metadata": {"pr_number": 9304, "pr_title": "feat(connector): Create Customer for Chargebee", "merged_at": "2025-09-18T14:29:16Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs", "crates/hyperswitch_domain_models/src/router_response_types.rs"], "core_business": ["crates/router/src/core/payments/customers.rs", "crates/router/src/core/payments/operations/payment_response.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs", "crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/dwolla.rs", "crates/hyperswitch_connectors/src/connectors/facilitapay/transformers.rs", "crates/hyperswitch_connectors/src/connectors/gocardless/transformers.rs", "crates/hyperswitch_connectors/src/connectors/hyperswitch_vault/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stax/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripe/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/router/tests/connectors/stax.rs", "crates/router/tests/connectors/utils.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs"]}, "change_types": {"structs_added": 4, "functions_added": 11, "fields_added": 61, "imports_added": 7, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Added Chargebee subscription creation request/response structures.\r\n- Implemented conversion traits for Chargebee subscription data.\r\n- Enhanced Recurly connector to support subscription creation flows.\r\n- Introduced new router flow types and request/response types for subscriptions.\r\n- Updated default implementations to include subscription-related traits and integrations.\r\n- Added new traits for subscription management in the hyperswitch interfaces.\r\n- Implemented conversion logic for subscription data between old and new router data formats.\r\n- Updated API service to handle subscription connector integration.\r\n\r\nCommon Status for Chargebee, Recurly and Stripe Billing\r\n```\r\nCommon Status\t    Chargebee\t    Recurly\t        Stripe Billing\r\nPending\t            Future\t        -\t            incomplete, \r\nTrial\t            InTrial\t        -\t            trialing\r\nActive\t            Active\t        ACTIVE\t        active\r\nPaused\t            Paused\t        PAUSED\t        paused\r\nunpaid  \t        -\t            -\t            unpaid\r\nOnetime             NonRenewing     -               -\r\nCancelled\t        Cancelled,      CANCELLED, \t    canceled,\r\n                    Transferred     EXPIRED         \t\r\nFailed\t            -\t            FAILED\t        incomplete_expired\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs`\n   - ... and 3 more files\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 1 more files\n\n**3. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**4. Other**\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (8 changes)\n- Implement new functions (11 changes)\n- Extend existing types with new fields (68 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit d978afdc:\nFiles to modify:\n\n\n**chargebee.rs**\n  Remove:\n    - impl: impl api::subscriptions::Subscriptions for Chargebee\n  Add:\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_content_type\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::subscriptions::Subscriptions for Chargebee\n    - impl: impl api::subscriptions::SubscriptionCreate for Chargebee\n    - impl: impl ConnectorIntegration<SubscriptionCreate, SubscriptionCreateRequest, SubscriptionCreateResponse> for Chargebee\n    - impl: impl ConnectorIntegrationV2<\nSubscriptionCreate,\nSubscriptionCreateData,\nSubscriptionCreateRequest,\nSubscriptionCreateResponse,\n> for Chargebee\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::from\n    - function: private::try_from\n    - struct: pub::ChargebeeSubscriptionCreateRequest\n    - struct: pub::ChargebeeSubscriptionCreateResponse\n    - struct: pub::ChargebeeSubscriptionDetails\n    - enum: pub::ChargebeeAutoCollection\n    - enum: pub::ChargebeeSubscriptionStatus\n    - impl: impl From<SubscriptionAutoCollection> for ChargebeeAutoCollection\n    - impl: impl TryFrom<&ChargebeeRouterData<&hyperswitch_domain_models::types::SubscriptionCreateRouterData>> for ChargebeeSubscriptionCreateRequest\n    - impl: impl From<ChargebeeSubscriptionStatus> for SubscriptionStatus\n    - impl: impl TryFrom<\nResponseRouterData<\nSubscriptionCreate,\nChargebeeSubscriptionCreateResponse,\nSubscriptionCreateRequest,\nSubscriptionCreateResponse,\n>,\n> for hyperswitch_domain_models::types::SubscriptionCreateRouterData\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::SubscriptionsCreateV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nSubscriptionCreate,\nSubscriptionCreateData,\nSubscriptionCreateRequest,\nSubscriptionCreateResponse,\n> for Recurly\n\n**default_implementations.rs**\n  Add:\n    - impl: impl SubscriptionCreate for $connector\n    - impl: impl ConnectorIntegration<\nSubscriptionCreateFlow,\nSubscriptionCreateRequest,\nSubscriptionCreateResponse,\n> for $connector\n    - impl: impl SubscriptionCreate for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<\nSubscriptionCreateFlow,\nSubscriptionCreateRequest,\nSubscriptionCreateResponse,\n> for connectors::DummyConnector<T>\n\n**flow_common_types.rs**\n  Add:\n    - struct: pub::SubscriptionCreateData\n\n**router_flow_types.rs**\n  Modify existing code\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionCreate\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionCreate\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionCreate\n\n**types.rs**\n  Modify existing code\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::SubscriptionCreate\n\n**subscriptions_v2.rs**\n  Add:\n    - trait: private::SubscriptionsCreateV2\n\n**conversion_impls.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code", "metadata": {"pr_number": 9303, "pr_title": "feat: Implement subscription create for Chargebee", "merged_at": "2025-09-19T14:08:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/default_implementations.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 8, "functions_added": 11, "enums_added": 4, "fields_added": 68, "imports_added": 5}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCurrently manual retry is enabled through request.\r\nWe need to make it profile configurable such that the merchant/SDK doesn't need to send it for each request\r\n- `is_manual_retry` is enabled through profile with this pr\r\n- if it is enabled, it lets merchant do multiple confirm with the same client_secret/payment_id\r\n- This helps in manually retrying the payment with other payment method if the current one fails\r\n- the behaviour in the core is changed, the condition is not based on profile config rather than request\r\n- the response is populated as well based on profile config", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/enums.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/helpers.rs`\n   - `crates/router/src/core/payments/operations/payment_approve.rs`\n   - ... and 16 more files\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (18 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9302, "pr_title": "refactor(core): accept manual retry from profile ", "merged_at": "2025-09-11T14:32:09Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/enums.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/operations/payment_approve.rs", "crates/router/src/core/payments/operations/payment_cancel.rs", "crates/router/src/core/payments/operations/payment_cancel_post_capture.rs", "crates/router/src/core/payments/operations/payment_capture.rs", "crates/router/src/core/payments/operations/payment_complete_authorize.rs", "crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/operations/payment_post_session_tokens.rs", "crates/router/src/core/payments/operations/payment_reject.rs", "crates/router/src/core/payments/operations/payment_session.rs", "crates/router/src/core/payments/operations/payment_start.rs", "crates/router/src/core/payments/operations/payment_status.rs", "crates/router/src/core/payments/operations/payment_update.rs", "crates/router/src/core/payments/operations/payment_update_metadata.rs", "crates/router/src/core/payments/operations/payments_incremental_authorization.rs", "crates/router/src/core/payments/operations/tax_calculation.rs", "crates/router/src/core/payments/transformers.rs"]}, "change_types": {"functions_added": 2, "fields_added": 18, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR integrates the get plan prices endpoint for chargebee, required to be called in the respective API handler for the same (not yet implemented)", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs`\n   - ... and 3 more files\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 1 more files\n\n**3. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**4. Other**\n   - `crates/hyperswitch_interfaces/src/api.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (8 changes)\n- Implement new functions (9 changes)\n- Extend existing types with new fields (63 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e2f1a456:\nFiles to modify:\n\n\n**chargebee.rs**\n  Add:\n    - function: private::get_chargebee_plan_prices_query_params\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::subscriptions::GetSubscriptionPlanPricesFlow for Chargebee\n    - impl: impl ConnectorIntegration<\nGetSubscriptionPlanPrices,\nGetSubscriptionPlanPricesRequest,\nGetSubscriptionPlanPricesResponse,\n> for Chargebee\n    - impl: impl GetSubscriptionPlanPricesV2 for Chargebee\n    - impl: impl ConnectorIntegrationV2<\nGetSubscriptionPlanPrices,\nhyperswitch_domain_models::router_data_v2::flow_common_types::GetSubscriptionPlanPricesData,\nGetSubscriptionPlanPricesRequest,\nGetSubscriptionPlanPricesResponse,\n> for Chargebee\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::GetSubscriptionPlanPricesV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nGetSubscriptionPlanPrices,\nGetSubscriptionPlanPricesData,\nGetSubscriptionPlanPricesRequest,\nGetSubscriptionPlanPricesResponse,\n> for Recurly\n\n**default_implementations.rs**\n  Remove:\n    - impl: impl Subscriptions for connectors::DummyConnector<T>\n  Add:\n    - impl: impl GetSubscriptionPlanPricesFlow for $connector\n    - impl: impl ConnectorIntegration<\nGetSubscriptionPlanPrices,\nGetSubscriptionPlanPricesRequest,\nGetSubscriptionPlanPricesResponse\n> for $connector\n    - impl: impl Subscriptions for connectors::DummyConnector<T>\n    - impl: impl GetSubscriptionPlanPricesFlow for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<\nGetSubscriptionPlanPrices,\nGetSubscriptionPlanPricesRequest,\nGetSubscriptionPlanPricesResponse,\n> for connectors::DummyConnector<T>\n\n**flow_common_types.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlanPricesData\n\n**router_flow_types.rs**\n  Modify existing code\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlanPrices\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlanPrices\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlanPrices\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlanPrices\n\n**subscriptions_v2.rs**\n  Remove:\n    - trait: pub::SubscriptionsV2\n  Add:\n    - trait: pub::SubscriptionsV2\n    - trait: pub::GetSubscriptionPlanPricesV2\n\n**conversion_impls.rs**\n  Remove:\n    - function: private::from_old_router_data\n    - function: private::to_old_router_data\n    - impl: impl RouterDataConversion<T, Req, Resp> for GetSubscriptionPlansData\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code", "metadata": {"pr_number": 9300, "pr_title": "feat(connector): Add support for get plan prices for Chargebee", "merged_at": "2025-09-19T08:20:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/default_implementations.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api.rs", "crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 8, "functions_added": 9, "enums_added": 4, "fields_added": 63, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR fixes\r\n1. Setup Mandate flow - Earlier Error is thrown in customer setup mandate if the payment profile is already present at the connector. Now, if `customerPaymentProfileId` is present we will map it to mandate id, if not we will return an error response. \r\n\r\n2. For CIT, pass `customerProfileId` and for normal payments pass the customer id and enable create profiles only for CIT\r\n\r\n3. Handle the case of customer id not created from hyperswitch but used via hyperswitch\r\n\r\n> Note: Ensure the customer id in the dashboard. Incase of CIT customer id will not be mapped to the transaction instead the payment profile will be stored under the customer\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\n<details>\r\n<summary>Test Setup mandate </summary> \r\n\r\n1. Create a setup mandate payment for a customer\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1g**********' \\\r\n--data '{\r\n    \"amount\": 0,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n    \r\n    \"payment_type\": \"setup_mandate\",\r\n    \"customer_id\": \"aaa9\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n \r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000001091\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \r\n\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }    \r\n}'\r\n```\r\nResponse \r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_2ZOEDHarHH50bJ0CsShD\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 0,\r\n    \"net_amount\": 0,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_2ZOEDHarHH50bJ0CsShD_secret_PvsjaSnomlWtvyxCBu4N\",\r\n    \"created\": \"2025-09-08T06:29:33.850Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"aaa9\",\r\n    \"customer\": {\r\n        \"id\": \"aaa9\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"aaa9\",\r\n        \"created_at\": 1757312973,\r\n        \"expires\": 1757316573,\r\n        \"secret\": \"epk_348e3583ce864cea9a6d4d4c882464db\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": null,\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T06:44:33.849Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_DFYzCRBsmfEIMZ40aHuk\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T06:29:35.954Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932578546-931871295\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nNow Create another setup mandate payment for same customer\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1gg9in8dKYTNWtoWa6BkgfjvSr5r8Jg9gnZWL0wzX' \\\r\n--data '{\r\n    \"amount\": 0,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n    \r\n    \"payment_type\": \"setup_mandate\",\r\n    \"customer_id\": \"aaa9\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000001091\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_8S1upQ4fMllhyoljKbsy\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 0,\r\n    \"net_amount\": 0,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_8S1upQ4fMllhyoljKbsy_secret_nMnZtHqYqXETjQR8Y5Wl\",\r\n    \"created\": \"2025-09-08T06:35:42.276Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"aaa9\",\r\n    \"customer\": {\r\n        \"id\": \"aaa9\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"aaa9\",\r\n        \"created_at\": 1757313342,\r\n        \"expires\": 1757316942,\r\n        \"secret\": \"epk_5ff5134eb9d145698421cd65302b777f\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": null,\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": null,\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T06:50:42.276Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_dNGfqp6eJ3EQIXDKT8Ul\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T06:35:43.810Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932578546-931871295\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n3. MIT via payment method id\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1gg9in8dKYTNWtoWa6BkgfjvSr5r8Jg9gnZWL0wzX' \\\r\n--data '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"off_session\": true,\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"recurring_details\": {\r\n        \"type\": \"payment_method_id\",\r\n        \"data\": \"pm_dNGfqp6eJ3EQIXDKT8Ul\"\r\n    },\r\n    \r\n    \"customer_id\": \"aaa9\",\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ]\r\n    \r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_Sg03kzM6XooUiUlc76PE\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_Sg03kzM6XooUiUlc76PE_secret_5cjMKfkDnpJFEd1FmSS8\",\r\n    \"created\": \"2025-09-08T07:30:58.770Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"aaa9\",\r\n    \"customer\": {\r\n        \"id\": \"aaa9\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"aaa9\",\r\n        \"created_at\": 1757316658,\r\n        \"expires\": 1757320258,\r\n        \"secret\": \"epk_2fb224c3d65d4bfaaa95dc3f3a4f1829\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070561048\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070561048\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T07:45:58.770Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_dNGfqp6eJ3EQIXDKT8Ul\",\r\n    \"network_transaction_id\": \"IP5H1DF3H9BJM0ZYBF1JNZ6\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T07:31:00.837Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932578546-931871295\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n</details>\r\n<details>\r\n<summary> Test CIT via same customer and payment method </summary>\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1gg9in8dKYTNWtoWa6BkgfjvSr5r8Jg9gnZWL0wzX' \\\r\n--data '{\r\n    \"amount\": 1000,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n\r\n    \"customer_id\": \"George_12\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000001091\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_cmywKrWMEyxjxor5GjGg\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 1000,\r\n    \"net_amount\": 1000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 1000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_cmywKrWMEyxjxor5GjGg_secret_p1LI3CglxmUMeDIfz31m\",\r\n    \"created\": \"2025-09-08T07:33:47.317Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_12\",\r\n    \"customer\": {\r\n        \"id\": \"George_12\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"description\": \"The street address and postal code matched.\",\r\n                \"avs_result_code\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_12\",\r\n        \"created_at\": 1757316827,\r\n        \"expires\": 1757320427,\r\n        \"secret\": \"epk_bd1723532d05441c90f833fe535e8ae8\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070561131\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070561131\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T07:48:47.317Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_mfdEZEUD6TRHnl3xbXen\",\r\n    \"network_transaction_id\": \"KKC9N0P1V9FZ8I4224LTENH\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T07:33:48.962Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932579889-931872607\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nCreate another CIT with authorize.net\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1gg9in8dKYTNWtoWa6BkgfjvSr5r8Jg9gnZWL0wzX' \\\r\n--data '{\r\n    \"amount\": 1000,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n\r\n    \r\n    \"customer_id\": \"George_12\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n   \r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000001091\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n\r\n    \r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_CD6jJdF4ezCGlCtrpvA9\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 1000,\r\n    \"net_amount\": 1000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 1000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_CD6jJdF4ezCGlCtrpvA9_secret_3bQzVFajiF0grVvRqniB\",\r\n    \"created\": \"2025-09-08T07:58:27.079Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_12\",\r\n    \"customer\": {\r\n        \"id\": \"George_12\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"description\": \"The street address and postal code matched.\",\r\n                \"avs_result_code\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_12\",\r\n        \"created_at\": 1757318307,\r\n        \"expires\": 1757321907,\r\n        \"secret\": \"epk_acf8e718b07f4b3ba654f7e21aa06ec1\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070562091\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070562091\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T08:13:27.079Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_8irM47OgNptHSjd4Yxjy\",\r\n    \"network_transaction_id\": \"WME4UM2HEPYE12MVHMAXWRY\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T07:58:29.279Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932579889-931872607\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nCreate MIT\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_QTV7hfwJvBw7V1Cw4IxHA8h1gg9in8dKYTNWtoWa6BkgfjvSr5r8Jg9gnZWL0wzX' \\\r\n--data '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"off_session\": true,\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"recurring_details\": {\r\n        \"type\": \"payment_method_id\",\r\n        \"data\": \"pm_mfdEZEUD6TRHnl3xbXen\"\r\n    },\r\n    \r\n    \"customer_id\": \"George_12\",\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ]\r\n}'\r\n```\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_Uch1kSbBqSzglhlR9P3a\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_7ca00208-f80b-4f92-8ba9-3cbf9b0eb6ed\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_Uch1kSbBqSzglhlR9P3a_secret_iskb1cwZZxOX0pJb3QgO\",\r\n    \"created\": \"2025-09-08T07:59:30.857Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_12\",\r\n    \"customer\": {\r\n        \"id\": \"George_12\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"1091\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_12\",\r\n        \"created_at\": 1757318370,\r\n        \"expires\": 1757321970,\r\n        \"secret\": \"epk_7b91847bfd94413c816e69a49135d0d0\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070562151\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070562151\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_B1KJWgaKMyj9NJZOiGiL\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1A9mFebPqoV963nNNKk4\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T08:14:30.857Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_mfdEZEUD6TRHnl3xbXen\",\r\n    \"network_transaction_id\": \"SOYOQ73IT3NFN1CB6VYKGWG\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T07:59:31.707Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932579889-931872607\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> Create customer outside Hyperswitch and do a payment with the same customer in hyperswitch</summary>\r\n\r\n```\r\ncurl --location 'https://apitest.authorize.net/xml/v1/request.api' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"createCustomerProfileRequest\": {\r\n        \"merchantAuthentication\": {\r\n            \"name\": \"\",\r\n            \"transactionKey\": \"\"\r\n        },\r\n     \"profile\": {\r\n            \"merchantCustomerId\": \"George_34\",\r\n            \"email\": \"email16@here.com\"\r\n            // \"description\": \"Profile description here\"\r\n            // \"validationMode\": \"testMode\",\r\n        }\r\n        \r\n    }\r\n}'\r\n```\r\n\r\nResponse\r\n\r\n```\r\n{\r\n    \"customerProfileId\": \"932581492\",\r\n    \"customerPaymentProfileIdList\": [],\r\n    \"customerShippingAddressIdList\": [],\r\n    \"validationDirectResponseList\": [],\r\n    \"messages\": {\r\n        \"resultCode\": \"Ok\",\r\n        \"message\": [\r\n            {\r\n                \"code\": \"I00001\",\r\n                \"text\": \"Successful.\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nCreate a CIT payment with the same customer id and email\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_ojXWyOIKxCbs6qJ1HUxnr0bRHtyqct6AmGj0rJJ6oxsFCsdmuGklbzGerp8MhttC' \\\r\n--data-raw '{\r\n    \"amount\": 1,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n\r\n    \r\n    \"billing\": {\r\n       \r\n        \"address\": {\r\n            \r\n            \r\n            \r\n            \"city\": \"Ooty\",\r\n            \"state\": \"TN\",\r\n            \"zip\": \"02915\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\"\r\n        }\r\n    },\r\n     \"email\": \"email16@here.com\",\r\n    \r\n    \"customer_id\": \"George_34\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4548817212493017\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n    \r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"shipping\": {\r\n    \"address\": {\r\n        \"line1\": \"1467\",\r\n        \"line2\": \"Harrison Street\",\r\n        \"line3\": \"Harrison Street\",\r\n        \"city\": \"San Fransico\",\r\n        \"state\": \"North Carolina South\",\r\n        \"zip\": \"94122\",\r\n        \"country\": \"US\",\r\n        \"first_name\": \"박성준\",\r\n        \"last_name\": \"박성준\"\r\n    }},\r\n\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_7GK3Vi1p2X6nYTq0DNvi\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_f642d793-b987-4b8b-9d3d-760182ec59f5\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 1,\r\n    \"net_amount\": 1,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 1,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_7GK3Vi1p2X6nYTq0DNvi_secret_Mmie9JbCtArhQXrYdk02\",\r\n    \"created\": \"2025-09-08T10:30:25.540Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_34\",\r\n    \"customer\": {\r\n        \"id\": \"George_34\",\r\n        \"name\": null,\r\n        \"email\": \"email16@here.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"3017\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"454881\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"description\": \"The street address and postal code matched.\",\r\n                \"avs_result_code\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"North Carolina South\",\r\n            \"first_name\": \"박성준\",\r\n            \"last_name\": \"박성준\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Ooty\",\r\n            \"country\": \"US\",\r\n            \"line1\": null,\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"02915\",\r\n            \"state\": \"TN\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"email16@here.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_34\",\r\n        \"created_at\": 1757327425,\r\n        \"expires\": 1757331025,\r\n        \"secret\": \"epk_745a154b3b4648e8888cd8959b6e1e31\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070567790\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070567790\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_4c5KStks69a6pdMZU2uv\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1br5DZpuUOdTwIk619pY\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T10:45:25.540Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_kLwQZFTDZHyi7ZfsluUG\",\r\n    \"network_transaction_id\": \"VQ5N75LVGWHYRFDV6SYXSN4\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T10:30:27.640Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932581089-931874336\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nMIT transaction\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_ojXWyOIKxCbs6qJ1HUxnr0bRHtyqct6AmGj0rJJ6oxsFCsdmuGklbzGerp8MhttC' \\\r\n--data '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"off_session\": true,\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"recurring_details\": {\r\n        \"type\": \"payment_method_id\",\r\n        \"data\": \"pm_kLwQZFTDZHyi7ZfsluUG\"\r\n    },\r\n    \r\n    \"customer_id\": \"George_34\",\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ]\r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_gMzzuKqBB2SpmylOck8P\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_f642d793-b987-4b8b-9d3d-760182ec59f5\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_gMzzuKqBB2SpmylOck8P_secret_lB92QYHhKDPHvp4wNJNJ\",\r\n    \"created\": \"2025-09-08T10:32:15.961Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_34\",\r\n    \"customer\": {\r\n        \"id\": \"George_34\",\r\n        \"name\": null,\r\n        \"email\": \"email16@here.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"3017\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"454881\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": \"Mike J. Hammer\",\r\n            \"payment_checks\": null,\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": \"email16@here.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_34\",\r\n        \"created_at\": 1757327535,\r\n        \"expires\": 1757331135,\r\n        \"secret\": \"epk_9a461e1f7e0243a1b8c0c896a5928c21\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070567859\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070567859\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_4c5KStks69a6pdMZU2uv\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1br5DZpuUOdTwIk619pY\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T10:47:15.961Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_kLwQZFTDZHyi7ZfsluUG\",\r\n    \"network_transaction_id\": \"Z7KZ0F7C23FF7OMWVWMZK2B\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T10:32:18.018Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"932581089-931874336\",\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n</details>\r\n<details>\r\n<summary> Sanity checks </summary>\r\n\r\nCreate a normal payment with customer id\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_ojXWyOIKxCbs6qJ1HUxnr0bRHtyqct6AmGj0rJJ6oxsFCsdmuGklbzGerp8MhttC' \\\r\n--data-raw '{\r\n    \"amount\": 1,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \"billing\": {\r\n       \r\n        \"address\": {\r\n            \r\n            \r\n            \r\n            \"city\": \"Ooty\",\r\n            \"state\": \"TN\",\r\n            \"zip\": \"02915\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\"\r\n        }\r\n    },\r\n     \"email\": \"email16@here.com\",\r\n    \r\n    \"customer_id\": \"George_39\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4548817212493017\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n\r\n    \"shipping\": {\r\n    \"address\": {\r\n        \"line1\": \"1467\",\r\n        \"line2\": \"Harrison Street\",\r\n        \"line3\": \"Harrison Street\",\r\n        \"city\": \"San Fransico\",\r\n        \"state\": \"North Carolina South\",\r\n        \"zip\": \"94122\",\r\n        \"country\": \"US\",\r\n        \"first_name\": \"박성준\",\r\n        \"last_name\": \"박성준\"\r\n    }},\r\n    \r\n\r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n    \r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_F6FBGXBosUnkMWVCwzwC\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_f642d793-b987-4b8b-9d3d-760182ec59f5\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 1,\r\n    \"net_amount\": 1,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 1,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_F6FBGXBosUnkMWVCwzwC_secret_WL7XVnHG4iF7XUybRSw0\",\r\n    \"created\": \"2025-09-08T10:35:58.529Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"George_39\",\r\n    \"customer\": {\r\n        \"id\": \"George_39\",\r\n        \"name\": null,\r\n        \"email\": \"email16@here.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"3017\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"454881\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"description\": \"The street address and postal code matched.\",\r\n                \"avs_result_code\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"North Carolina South\",\r\n            \"first_name\": \"박성준\",\r\n            \"last_name\": \"박성준\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Ooty\",\r\n            \"country\": \"US\",\r\n            \"line1\": null,\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"02915\",\r\n            \"state\": \"TN\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"email16@here.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"George_39\",\r\n        \"created_at\": 1757327758,\r\n        \"expires\": 1757331358,\r\n        \"secret\": \"epk_eacacf5bc45041b1abcae4a96930bada\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070568055\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070568055\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_4c5KStks69a6pdMZU2uv\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1br5DZpuUOdTwIk619pY\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T10:50:58.528Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"HOADKZPWOV4VMD7463CTMDE\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-08T10:36:01.130Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n>Note: Check that the customer id is present in the authorize.net dashboard\r\n\r\nPayment without customer id \r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_ojXWyOIKxCbs6qJ1HUxnr0bRHtyqct6AmGj0rJJ6oxsFCsdmuGklbzGerp8MhttC' \\\r\n--data '{\r\n    \"amount\": 1,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n    \"capture_method\": \"automatic\",\r\n\r\n    \"billing\": {\r\n       \r\n        \"address\": {\r\n            \r\n            \r\n            \r\n            \"city\": \"Ooty\",\r\n            \"state\": \"TN\",\r\n            \"zip\": \"02915\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\"\r\n        }\r\n    },\r\n\r\n    \r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4548817212493017\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \r\n            \"card_cvc\": \"123\"\r\n            \r\n        }\r\n    },\r\n\r\n    \r\n    \"shipping\": {\r\n    \"address\": {\r\n        \"line1\": \"1467\",\r\n        \"line2\": \"Harrison Street\",\r\n        \"line3\": \"Harrison Street\",\r\n        \"city\": \"San Fransico\",\r\n        \"state\": \"North Carolina South\",\r\n        \"zip\": \"94122\",\r\n        \"country\": \"US\",\r\n        \"first_name\": \"박성준\",\r\n        \"last_name\": \"박성준\"\r\n    }},\r\n    \r\n\r\n    \r\n    \r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"nl-NL\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 723,\r\n        \"screen_width\": 1536,\r\n        \"time_zone\": 0,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"ip_address\": \"13.232.74.226\"\r\n    }\r\n\r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_Q45X5L5EevrqOMYCOCZ0\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_f642d793-b987-4b8b-9d3d-760182ec59f5\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 1,\r\n    \"net_amount\": 1,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 1,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_Q45X5L5EevrqOMYCOCZ0_secret_pLPOQD9Tsy81KfFjKB6X\",\r\n    \"created\": \"2025-09-08T10:37:40.898Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": null,\r\n    \"customer\": null,\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"3017\",\r\n            \"card_type\": null,\r\n            \"card_network\": null,\r\n            \"card_issuer\": null,\r\n            \"card_issuing_country\": null,\r\n            \"card_isin\": \"454881\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"30\",\r\n            \"card_holder_name\": null,\r\n            \"payment_checks\": {\r\n                \"description\": \"The street address and postal code matched.\",\r\n                \"avs_result_code\": \"Y\"\r\n            },\r\n            \"authentication_data\": null\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"city\": \"San Fransico\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"1467\",\r\n            \"line2\": \"Harrison Street\",\r\n            \"line3\": \"Harrison Street\",\r\n            \"zip\": \"94122\",\r\n            \"state\": \"North Carolina South\",\r\n            \"first_name\": \"박성준\",\r\n            \"last_name\": \"박성준\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Ooty\",\r\n            \"country\": \"US\",\r\n            \"line1\": null,\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"zip\": \"02915\",\r\n            \"state\": \"TN\",\r\n            \"first_name\": \"Mike\",\r\n            \"last_name\": \"J. Hammer\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"120070568151\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"120070568151\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_4c5KStks69a6pdMZU2uv\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_1br5DZpuUOdTwIk619pY\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T10:52:40.898Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"nl-NL\",\r\n        \"time_zone\": 0,\r\n        \"ip_address\": \"13.232.74.226\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1536,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 723,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"OB29UI4CXX0LM51T4RT6F6Z\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-08T10:37:43.437Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n</details> \r\n\r\n<details>\r\n<summary>Wallet test - Googlepay</summary>\r\n\r\nCreate a normal payment with customer id, customer id should be shown for the transaction\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KE9tLklSMgmO0Wh3Zy8zu5IoKEEKynF16mY53eV84Dx5TbRjpHfSJuUt7WVEgd4r' \\\r\n--data '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n\r\n    \r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"type\": \"CARD\",\r\n                \"description\": \"Test Card: Visa •••• 1111\",\r\n                \"info\": {\r\n                    \"assurance_details\": {\r\n                        \"account_verified\": true,\r\n                        \"card_holder_authenticated\": false\r\n                    },\r\n                    \"card_details\": \"1111\",\r\n                    \"card_funding_source\": \"CREDIT\",\r\n                    \"card_network\": \"VISA\"\r\n                },\r\n                \"tokenization_data\": {\r\n                    \"token\": \"{\\\"signature\\\":\\\"MEUCI**************\",\r\n                    \"type\": \"PAYMENT_GATEWAY\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ],\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"en-GB\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1117,\r\n        \"screen_width\": 1728,\r\n        \"time_zone\": -330,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"device_model\": \"Macintosh\",\r\n        \"os_type\": \"macOS\",\r\n        \"os_version\": \"10.15.7\"\r\n    },\r\n    \"customer_id\": \"cus_12345\"\r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_LDMqfa273PAHeseOz0As\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5c96aafd-4990-44b3-b44d-c66b2a76f962\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_LDMqfa273PAHeseOz0As_secret_I4SZIKuOKqNufNurB1mz\",\r\n    \"created\": \"2025-09-08T12:06:57.848Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_12345\",\r\n    \"customer\": {\r\n        \"id\": \"cus_12345\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": null,\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"last4\": \"1111\",\r\n                \"card_network\": \"VISA\",\r\n                \"type\": \"CARD\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_12345\",\r\n        \"created_at\": 1757333217,\r\n        \"expires\": 1757336817,\r\n        \"secret\": \"epk_07214c9b7ff54164bd6c26ecf9895f2a\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"80044364289\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"80044364289\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_ayYGLzXmcF3E9JgC7HZO\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_EnqpwnxfB7GppsknYX7r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T12:21:57.848Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"os_type\": \"macOS\",\r\n        \"language\": \"en-GB\",\r\n        \"time_zone\": -330,\r\n        \"os_version\": \"10.15.7\",\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"device_model\": \"Macintosh\",\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1728,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 1117,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": \"XPSPFFQOROVN42C5WFHQEM2\",\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-08T12:07:00.691Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nCreate Cit twice for same customer id and same payment method and create trigger an MIT\r\n\r\nCIT  1\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KE9tLklSMgmO0Wh3Zy8zu5IoKEEKynF16mY53eV84Dx5TbRjpHfSJuUt7WVEgd4r' \\\r\n--data '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \r\n\r\n    \r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"type\": \"CARD\",\r\n                \"description\": \"Test Card: Visa •••• 1111\",\r\n                \"info\": {\r\n                    \"assurance_details\": {\r\n                        \"account_verified\": true,\r\n                        \"card_holder_authenticated\": false\r\n                    },\r\n                    \"card_details\": \"1111\",\r\n                    \"card_funding_source\": \"CREDIT\",\r\n                    \"card_network\": \"VISA\"\r\n                },\r\n                \"tokenization_data\": {\r\n                    \"token\": \"{\\\"signature\\\":\\\"MEUCIQD8rFtn1qHNMINks9KByeBWj6IlMDTNlkXHXvfi4ucVlgIgS2ouIBMSCILZe3YsxWeUpsGK5sDF70zKWIkL3xWzqwY\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"wIbdKS71cuojES2JxwMQW54T2M//izzeBHj8hJUpi0ExBsrjc/OUe6XhHRopgmB+VQjfJhObfNH+uHlXypZREefBPlH78wY8Bg5s3t6ufWGXLTQQGsfhoufKbJnZrshrxYUti8+6CByH62uNq8oxCp+XuTCWnXab8aLgGWyY5wDxtC9K/1wzN6PkPPyFDNwL6jEygIEr4rN9N4zTzcoLVJRqavqa19d2z26Ley6p7NNfLFZMjczuBdyRWSj7B5zTNT7WUgpF0KUiRvdMYELGuD1R93MeBsazJS5WJD*****************\"}\\\"}\",\r\n                    \"type\": \"PAYMENT_GATEWAY\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ],\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"en-GB\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1117,\r\n        \"screen_width\": 1728,\r\n        \"time_zone\": -330,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"device_model\": \"Macintosh\",\r\n        \"os_type\": \"macOS\",\r\n        \"os_version\": \"10.15.7\"\r\n    },\r\n    \"customer_id\": \"cus_12345\",\r\n        \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\"\r\n    \r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_37NcwVUnk2TRXeWWSffF\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5c96aafd-4990-44b3-b44d-c66b2a76f962\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_37NcwVUnk2TRXeWWSffF_secret_nGC20xDeGX7b3rfUUBLv\",\r\n    \"created\": \"2025-09-08T12:19:11.685Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_12345\",\r\n    \"customer\": {\r\n        \"id\": \"cus_12345\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": null,\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"last4\": \"1111\",\r\n                \"card_network\": \"VISA\",\r\n                \"type\": \"CARD\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_12345\",\r\n        \"created_at\": 1757333951,\r\n        \"expires\": 1757337551,\r\n        \"secret\": \"epk_237bd58adf8d48cb9ad6d38fdcdc3b07\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"80044364497\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"80044364497\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_ayYGLzXmcF3E9JgC7HZO\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_EnqpwnxfB7GppsknYX7r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T12:34:11.685Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"os_type\": \"macOS\",\r\n        \"language\": \"en-GB\",\r\n        \"time_zone\": -330,\r\n        \"os_version\": \"10.15.7\",\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"device_model\": \"Macintosh\",\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1728,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 1117,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_49DfXLBrPJ1t90oFfmPi\",\r\n    \"network_transaction_id\": \"BHYELB7L0V5C5Q4NW72AWX0\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T12:19:13.552Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"524439809-536594893\",\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nCIT 2\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KE9tLklSMgmO0Wh3Zy8zu5IoKEEK******************************' \\\r\n--data '{\r\n    \"amount\": 100,\r\n    \"currency\": \"USD\",\r\n    \"confirm\": true,\r\n    \"description\": \"oda\",\r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"type\": \"CARD\",\r\n                \"description\": \"Test Card: Visa •••• 1111\",\r\n                \"info\": {\r\n                    \"assurance_details\": {\r\n                        \"account_verified\": true,\r\n                        \"card_holder_authenticated\": false\r\n                    },\r\n                    \"card_details\": \"1111\",\r\n                    \"card_funding_source\": \"CREDIT\",\r\n                    \"card_network\": \"VISA\"\r\n                },\r\n                \"tokenization_data\": {\r\n                    \"token\": \"{\\\"signature\\\":\\\"MEUCIQD8rFtn1qHNMINks9KByeBWj6IlMDTNlkXHXvfi4ucVlgIgS2ouIBMSCILZe3YsxWeUpsGK5sDF70zKWIkL3xWzqwY\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"wIbdKS71cuojES2JxwMQW54T2M//izzeBHj8hJUpi0ExBsrjc/OUe6XhHRopgmB+VQjfJhObfNH+uHlXypZREefBPlH78wY8Bg5s3t6u****************************\\\"}\\\"}\",\r\n                    \"type\": \"PAYMENT_GATEWAY\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ],\r\n    \"browser_info\": {\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"language\": \"en-GB\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1117,\r\n        \"screen_width\": 1728,\r\n        \"time_zone\": -330,\r\n        \"java_enabled\": true,\r\n        \"java_script_enabled\": true,\r\n        \"device_model\": \"Macintosh\",\r\n        \"os_type\": \"macOS\",\r\n        \"os_version\": \"10.15.7\"\r\n    },\r\n    \"customer_id\": \"cus_12345\",\r\n        \"customer_acceptance\": {\r\n        \"acceptance_type\": \"online\",\r\n        \"accepted_at\": \"2025-03-27T13:56:49.848Z\",\r\n        \"online\": {\r\n            \"ip_address\": null,\r\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15\"\r\n        }\r\n    },\r\n    \"setup_future_usage\": \"off_session\"\r\n    \r\n}'\r\n```\r\nResponse\r\n\r\n```\r\n{\r\n    \"payment_id\": \"pay_FhZxwJ66xE2c3iNTmcjw\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5c96aafd-4990-44b3-b44d-c66b2a76f962\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 100,\r\n    \"net_amount\": 100,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 100,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_FhZxwJ66xE2c3iNTmcjw_secret_EGOtM2GS2cXoBn7byX9K\",\r\n    \"created\": \"2025-09-08T12:20:27.430Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_12345\",\r\n    \"customer\": {\r\n        \"id\": \"cus_12345\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"oda\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"off_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": null,\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"last4\": \"1111\",\r\n                \"card_network\": \"VISA\",\r\n                \"type\": \"CARD\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://app.hyperswitch.io/dashboard/sdk\",\r\n    \"authentication_type\": \"three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_12345\",\r\n        \"created_at\": 1757334027,\r\n        \"expires\": 1757337627,\r\n        \"secret\": \"epk_d387f51d21cb4643bef5d6a22a5dc38e\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"80044364526\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"80044364526\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_ayYGLzXmcF3E9JgC7HZO\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_EnqpwnxfB7GppsknYX7r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T12:35:27.430Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"os_type\": \"macOS\",\r\n        \"language\": \"en-GB\",\r\n        \"time_zone\": -330,\r\n        \"os_version\": \"10.15.7\",\r\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"device_model\": \"Macintosh\",\r\n        \"java_enabled\": true,\r\n        \"screen_width\": 1728,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\r\n        \"screen_height\": 1117,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_49DfXLBrPJ1t90oFfmPi\",\r\n    \"network_transaction_id\": \"PUKVC400BTCOGMT807X6ANT\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T12:20:28.309Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"524439809-536594893\",\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\nMIT\r\n\r\n```\r\ncurl --location 'http://localhost:8080/payments' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_KE9tLklSMgmO0Wh3Zy8zu5IoKEEKynF16mY53eV84Dx5TbRjpHfSJuUt7WVEgd4r' \\\r\n--data '{\r\n    \"amount\": 10000,\r\n    \"currency\": \"USD\",\r\n    \"off_session\": true,\r\n    \"confirm\": true,\r\n    \"capture_method\": \"automatic\",\r\n    \"recurring_details\": {\r\n        \"type\": \"payment_method_id\",\r\n        \"data\": \"pm_49DfXLBrPJ1t90oFfmPi\"\r\n    },\r\n    \r\n    \"customer_id\": \"cus_12345\",\r\n    \"connector\": [\r\n        \"authorizedotnet\"\r\n    ]   \r\n    \r\n}'\r\n```\r\n\r\nResponse\r\n```\r\n{\r\n    \"payment_id\": \"pay_vJpAQM8GUsOHKLCikEVP\",\r\n    \"merchant_id\": \"postman_merchant_GHAction_5c96aafd-4990-44b3-b44d-c66b2a76f962\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 10000,\r\n    \"net_amount\": 10000,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 10000,\r\n    \"connector\": \"authorizedotnet\",\r\n    \"client_secret\": \"pay_vJpAQM8GUsOHKLCikEVP_secret_9P0sKSn1eekdRyBQJHu3\",\r\n    \"created\": \"2025-09-08T12:22:01.910Z\",\r\n    \"currency\": \"USD\",\r\n    \"customer_id\": \"cus_12345\",\r\n    \"customer\": {\r\n        \"id\": \"cus_12345\",\r\n        \"name\": null,\r\n        \"email\": null,\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": null,\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": null,\r\n    \"off_session\": true,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"wallet\",\r\n    \"payment_method_data\": {\r\n        \"wallet\": {\r\n            \"google_pay\": {\r\n                \"last4\": \"1111\",\r\n                \"card_network\": \"VISA\",\r\n                \"type\": \"CARD\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": null,\r\n    \"shipping\": null,\r\n    \"billing\": null,\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": null,\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"google_pay\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"cus_12345\",\r\n        \"created_at\": 1757334121,\r\n        \"expires\": 1757337721,\r\n        \"secret\": \"epk_2cd756da4d794f4dac5a22e10457aa4c\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"80044364565\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"80044364565\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_ayYGLzXmcF3E9JgC7HZO\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_EnqpwnxfB7GppsknYX7r\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-08T12:37:01.910Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": null,\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_49DfXLBrPJ1t90oFfmPi\",\r\n    \"network_transaction_id\": \"D9LHUD6TDE3XP3JSXZTUEB2\",\r\n    \"payment_method_status\": \"active\",\r\n    \"updated\": \"2025-09-08T12:22:03.468Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": \"524439809-536594893\",\r\n    \"card_discovery\": null,\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (33 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 72c0f896:\nFiles to modify:\n\n\n**transformers.rs**\n  Add:\n    - function: private::extract_customer_id", "metadata": {"pr_number": 9298, "pr_title": "fix(connectors): [authorizedotnet] send customerProfileId in the CIT flow and map customerPaymentProfileId in the Setup Mandate flow", "merged_at": "2025-09-09T11:09:10Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 33, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR enables outgoing webhook support for revenue recovery. \r\n\r\nWhen the retries get succeeded that are done using the revenue recovery system, an outgoing webhook needs to be triggered to the url in business profile. This pr adds that support.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/revenue_recovery.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/payments/transformers.rs`\n   - `crates/router/src/core/revenue_recovery.rs`\n   - `crates/router/src/core/revenue_recovery/api.rs`\n   - ... and 2 more files\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/stripebilling/transformers.rs`\n\n**5. Type Definitions**\n   - `crates/router/src/types/storage/revenue_recovery.rs`\n\n**6. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/router/src/workflows/revenue_recovery.rs`\n   - `crates/storage_impl/src/errors.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (43 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 2db61538:\nFiles to modify:\n\n\n**payments.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**api.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: pub::send_outgoing_webhook_based_on_revenue_recovery_status\n    - struct: private::RevenueRecoveryOutgoingWebhook\n    - impl: impl RevenueRecoveryOutgoingWebhook\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**errors.rs**\n  Modify existing code", "metadata": {"pr_number": 9294, "pr_title": "feat(webhooks): Provide outgoing webhook support for revenue recovery", "merged_at": "2025-09-11T17:13:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/revenue_recovery.rs"], "core_business": ["crates/router/src/core/payments/transformers.rs", "crates/router/src/core/revenue_recovery.rs", "crates/router/src/core/revenue_recovery/api.rs", "crates/router/src/core/revenue_recovery/transformers.rs", "crates/router/src/core/revenue_recovery/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/stripebilling/transformers.rs"], "types": ["crates/router/src/types/storage/revenue_recovery.rs"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/router/src/workflows/revenue_recovery.rs", "crates/storage_impl/src/errors.rs"]}, "change_types": {"structs_added": 1, "functions_added": 3, "fields_added": 43, "imports_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- previously post capture void in nuvei was resulting in `partially_captured` response in hyperswitch, Ideally it should give `cancelled_post_capture`.\r\n- Cause we were passing `Voided` payment instead of `VoidedPostCharge` . Ideally it should move to \r\n\r\npayment Request\r\n\r\n```json \r\n{\r\n    \"amount\": 4324,\r\n    \"capture_method\": \"automatic\",\r\n    \"currency\": \"EUR\",\r\n    \"confirm\": true,\r\n      \"setup_future_usage\": \"on_session\",\r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"offline\",\r\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n        \"online\": {\r\n            \"ip_address\": \"127.0.0.1\",\r\n            \"user_agent\": \"amet irure esse\"\r\n        }\r\n    },\r\n    \"connector\":[\"nuvei\"],\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"return_url\": \"https://www.google.com\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"description\": \"hellow world\",\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n    \"email\": \"hello@gmail.com\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000009995\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Response\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_BPAMSLv9apKd34AY6cUH\",\r\n    \"merchant_id\": \"merchant_1756789409\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 4324,\r\n    \"net_amount\": 4324,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 4324,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_BPAMSLv9apKd34AY6cUH_secret_RfhKfM0p2MIkaRpZ5bs3\",\r\n    \"created\": \"2025-09-07T05:22:50.859Z\",\r\n    \"currency\": \"EUR\",\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"customer\": {\r\n        \"id\": \"nidthxxinn\",\r\n        \"name\": null,\r\n        \"email\": \"hello@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"9995\",\r\n            \"card_type\": \"CREDIT\",\r\n            \"card_network\": \"Visa\",\r\n            \"card_issuer\": \"INTL HDQTRS-CENTER OWNED\",\r\n            \"card_issuing_country\": \"UNITEDSTATES\",\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": {\r\n                \"avs_description\": null,\r\n                \"avs_result_code\": \"\",\r\n                \"cvv_2_reply_code\": \"\",\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_Eap5TljtgSZHikmOYd37\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hello@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://www.google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"nidthxxinn\",\r\n        \"created_at\": 1757222570,\r\n        \"expires\": 1757226170,\r\n        \"secret\": \"epk_0a5ce9afbec14498b36893a4d66ad916\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"8110000000013734831\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8566793111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_EzO6xGQZdE5pd9I5Rdzs\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_i5QVCDvXmBLbZg7n97n2\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-07T05:37:50.859Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-07T05:22:53.495Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n## post capture request\r\n\r\n```sh\r\ncurl --location 'localhost:8080/payments/pay_BPAMSLv9apKd34AY6cUH/cancel_post_capture' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Accept: application/json' \\\r\n--header 'api-key: dev_HmswxSLAU3iCrFmcLOha4WYjM9fLTazyr39hYPPbNbRJEeVCVdQq2KwAbzrXZQ8N' \\\r\n--data '{\r\n  \"cancellation_reason\": \"requested_by_customer\"\r\n}'\r\n```\r\n\r\n## Post capture response\r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_BPAMSLv9apKd34AY6cUH\",\r\n    \"merchant_id\": \"merchant_1756789409\",\r\n    \"status\": \"cancelled_post_capture\",\r\n    \"amount\": 4324,\r\n    \"net_amount\": 4324,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 4324,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_BPAMSLv9apKd34AY6cUH_secret_RfhKfM0p2MIkaRpZ5bs3\",\r\n    \"created\": \"2025-09-07T05:22:50.859Z\",\r\n    \"currency\": \"EUR\",\r\n    \"customer_id\": null,\r\n    \"customer\": {\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"email\": \"hello@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"9995\",\r\n            \"card_type\": \"CREDIT\",\r\n            \"card_network\": \"Visa\",\r\n            \"card_issuer\": \"INTL HDQTRS-CENTER OWNED\",\r\n            \"card_issuing_country\": \"UNITEDSTATES\",\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": {\r\n                \"avs_description\": null,\r\n                \"avs_result_code\": \"\",\r\n                \"cvv_2_reply_code\": \"\",\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_Eap5TljtgSZHikmOYd37\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": null,\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://www.google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"8110000000013734833\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8566793111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_EzO6xGQZdE5pd9I5Rdzs\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_i5QVCDvXmBLbZg7n97n2\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-07T05:37:50.859Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_Aw1IrDbk9NErXLkw6Bvc\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-07T05:22:57.510Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n## make a manual request and call void for sanity \r\n\r\n```json\r\n{\r\n    \"payment_id\": \"pay_o40YH0Mu3Dyv1uHM9qQ1\",\r\n    \"merchant_id\": \"merchant_1756789409\",\r\n    \"status\": \"cancelled\",\r\n    \"amount\": 4324,\r\n    \"net_amount\": 4324,\r\n    \"shipping_cost\": null,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": null,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_o40YH0Mu3Dyv1uHM9qQ1_secret_bkgxvGpkIZGQT8asrsLq\",\r\n    \"created\": \"2025-09-07T05:31:32.909Z\",\r\n    \"currency\": \"EUR\",\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"customer\": {\r\n        \"id\": \"nidthxxinn\",\r\n        \"name\": null,\r\n        \"email\": \"hello@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"manual\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"9995\",\r\n            \"card_type\": \"CREDIT\",\r\n            \"card_network\": \"Visa\",\r\n            \"card_issuer\": \"INTL HDQTRS-CENTER OWNED\",\r\n            \"card_issuing_country\": \"UNITEDSTATES\",\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": {\r\n                \"avs_description\": null,\r\n                \"avs_result_code\": \"\",\r\n                \"cvv_2_reply_code\": \"\",\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_pZf0tkyWL08kGOlyPTeL\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": null,\r\n    \"email\": \"hello@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://www.google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": \"requested_by_customer\",\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": null,\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"8110000000013735128\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8566843111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_EzO6xGQZdE5pd9I5Rdzs\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_i5QVCDvXmBLbZg7n97n2\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-07T05:46:32.908Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": \"pm_lJ8QqYSKpiCmkefL59n1\",\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-07T05:31:40.915Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": null,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (2 changes)\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9292, "pr_title": "fix(Nuvei): post capture void , proper mapping for nuvei", "merged_at": "2025-09-08T16:15:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"functions_added": 2, "fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nInclude support for L2L3Data for nuvei connector\r\n\r\n- L2L3 data is primarily used for B2B, government, and corporate card transactions where detailed purchase information is required for lower interchange rates and compliance purposes. \r\n- `NOTE` : In Nuvei shipping details can be passed for each item but we are not supporting it as of now as it will be included if required practically. Other connectors doesn't support this\r\n\r\n<details>\r\n<summary> Payment test </summary>\r\n\r\n# Request\r\n\r\n```json\r\n{\r\n    \"amount\": 4324,\r\n    \"currency\": \"EUR\",\r\n    \"confirm\": true,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"customer_acceptance\": {\r\n        \"acceptance_type\": \"offline\",\r\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\r\n        \"online\": {\r\n            \"ip_address\": \"127.0.0.1\",\r\n            \"user_agent\": \"amet irure esse\"\r\n        }\r\n    },\r\n    \"connector\": [\r\n        \"nuvei\"\r\n    ],\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"return_url\": \"https://www.google.com\",\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_type\": \"credit\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"description\": \"hellow world\",\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"zip\": \"560095\",\r\n            \"country\": \"US\",\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"city\": \"Fasdf\"\r\n        }\r\n    },\r\n    \"browser_info\": {\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"java_enabled\": false,\r\n        \"java_script_enabled\": true,\r\n        \"language\": \"en-US\",\r\n        \"color_depth\": 24,\r\n        \"screen_height\": 1080,\r\n        \"screen_width\": 1920,\r\n        \"time_zone\": 330,\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\r\n    },\r\n    \"email\": \"hello@gmail.com\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"card_number\": \"4000000000009995\",\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"card_cvc\": \"100\"\r\n        }\r\n    },\r\n// l2 l3 data 's \r\n    \"order_tax_amount\": 8900,\r\n    \"shipping_cost\": 8299,\r\n    \"discount_amount\": 3000,\r\n    \"duty_amount\": 2409,\r\n    \"order_details\": [ //l2 l3data\r\n        {\r\n            \"product_name\": \"Laptop\",\r\n            \"quantity\": 1,\r\n            \"amount\": 8000,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 8000,\r\n            \"unit_discount_amount\": 200,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 640\r\n        },\r\n        {\r\n            \"product_name\": \"Mouse\",\r\n            \"quantity\": 2,\r\n            \"amount\": 2000,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"unit_price\": 1000,\r\n            \"unit_discount_amount\": 50,\r\n            \"tax_rate\": 0.08,\r\n            \"total_tax_amount\": 160\r\n        }\r\n    ]\r\n}\r\n```\r\n# Response\r\n\r\n```json \r\n{\r\n    \"payment_id\": \"pay_t0Izz9tAgCQtylk9Mcbf\",\r\n    \"merchant_id\": \"merchant_1756789409\",\r\n    \"status\": \"succeeded\",\r\n    \"amount\": 4324,\r\n    \"net_amount\": 12623,\r\n    \"shipping_cost\": 8299,\r\n    \"amount_capturable\": 0,\r\n    \"amount_received\": 12623,\r\n    \"connector\": \"nuvei\",\r\n    \"client_secret\": \"pay_t0Izz9tAgCQtylk9Mcbf_secret_cjXmBdaE9S6gTQorZcq8\",\r\n    \"created\": \"2025-09-07T03:38:00.787Z\",\r\n    \"currency\": \"EUR\",\r\n    \"customer_id\": \"nidthxxinn\",\r\n    \"customer\": {\r\n        \"id\": \"nidthxxinn\",\r\n        \"name\": null,\r\n        \"email\": \"hello@gmail.com\",\r\n        \"phone\": null,\r\n        \"phone_country_code\": null\r\n    },\r\n    \"description\": \"hellow world\",\r\n    \"refunds\": null,\r\n    \"disputes\": null,\r\n    \"mandate_id\": null,\r\n    \"mandate_data\": null,\r\n    \"setup_future_usage\": \"on_session\",\r\n    \"off_session\": null,\r\n    \"capture_on\": null,\r\n    \"capture_method\": \"automatic\",\r\n    \"payment_method\": \"card\",\r\n    \"payment_method_data\": {\r\n        \"card\": {\r\n            \"last4\": \"9995\",\r\n            \"card_type\": \"CREDIT\",\r\n            \"card_network\": \"Visa\",\r\n            \"card_issuer\": \"INTL HDQTRS-CENTER OWNED\",\r\n            \"card_issuing_country\": \"UNITEDSTATES\",\r\n            \"card_isin\": \"400000\",\r\n            \"card_extended_bin\": null,\r\n            \"card_exp_month\": \"01\",\r\n            \"card_exp_year\": \"2026\",\r\n            \"card_holder_name\": \"John Smith\",\r\n            \"payment_checks\": {\r\n                \"avs_result\": \"\",\r\n                \"cvv_2_reply\": \"\",\r\n                \"avs_description\": null,\r\n                \"cvv_2_description\": null,\r\n                \"merchant_advice_code\": \"\",\r\n                \"merchant_advice_code_description\": null\r\n            },\r\n            \"authentication_data\": {\r\n                \"challengePreferenceReason\": \"12\"\r\n            }\r\n        },\r\n        \"billing\": null\r\n    },\r\n    \"payment_token\": \"token_pKckYLN5M2Qcs4MJuGDz\",\r\n    \"shipping\": null,\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"city\": \"Fasdf\",\r\n            \"country\": \"US\",\r\n            \"line1\": \"Fasdf\",\r\n            \"line2\": \"Fasdf\",\r\n            \"line3\": null,\r\n            \"zip\": \"560095\",\r\n            \"state\": null,\r\n            \"first_name\": \"Sakil\",\r\n            \"last_name\": \"Mostak\",\r\n            \"origin_zip\": null\r\n        },\r\n        \"phone\": null,\r\n        \"email\": null\r\n    },\r\n    \"order_details\": [\r\n        {\r\n            \"sku\": \"LAP-001\",\r\n            \"upc\": \"123456789012\",\r\n            \"brand\": null,\r\n            \"amount\": 8000,\r\n            \"category\": null,\r\n            \"quantity\": 1,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Business laptop 23214324\",\r\n            \"product_name\": \"Laptop\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 640,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 200\r\n        },\r\n        {\r\n            \"sku\": \"MOU-001\",\r\n            \"upc\": \"123456789013\",\r\n            \"brand\": null,\r\n            \"amount\": 2000,\r\n            \"category\": null,\r\n            \"quantity\": 2,\r\n            \"tax_rate\": 0.08,\r\n            \"product_id\": null,\r\n            \"description\": \"Wireless office mouse\",\r\n            \"product_name\": \"Mouse\",\r\n            \"product_type\": null,\r\n            \"sub_category\": null,\r\n            \"total_amount\": null,\r\n            \"commodity_code\": \"8471\",\r\n            \"unit_of_measure\": \"EA\",\r\n            \"product_img_link\": null,\r\n            \"product_tax_code\": null,\r\n            \"total_tax_amount\": 160,\r\n            \"requires_shipping\": null,\r\n            \"unit_discount_amount\": 50\r\n        }\r\n    ],\r\n    \"email\": \"hello@gmail.com\",\r\n    \"name\": null,\r\n    \"phone\": null,\r\n    \"return_url\": \"https://www.google.com/\",\r\n    \"authentication_type\": \"no_three_ds\",\r\n    \"statement_descriptor_name\": null,\r\n    \"statement_descriptor_suffix\": null,\r\n    \"next_action\": null,\r\n    \"cancellation_reason\": null,\r\n    \"error_code\": null,\r\n    \"error_message\": null,\r\n    \"unified_code\": null,\r\n    \"unified_message\": null,\r\n    \"payment_experience\": null,\r\n    \"payment_method_type\": \"credit\",\r\n    \"connector_label\": null,\r\n    \"business_country\": null,\r\n    \"business_label\": \"default\",\r\n    \"business_sub_label\": null,\r\n    \"allowed_payment_method_types\": null,\r\n    \"ephemeral_key\": {\r\n        \"customer_id\": \"nidthxxinn\",\r\n        \"created_at\": 1757216280,\r\n        \"expires\": 1757219880,\r\n        \"secret\": \"epk_e4ed9423c18546afac8b4c6540f4b193\"\r\n    },\r\n    \"manual_retry_allowed\": false,\r\n    \"connector_transaction_id\": \"8110000000013731386\",\r\n    \"frm_message\": null,\r\n    \"metadata\": null,\r\n    \"connector_metadata\": null,\r\n    \"feature_metadata\": {\r\n        \"redirect_response\": null,\r\n        \"search_tags\": null,\r\n        \"apple_pay_recurring_details\": null,\r\n        \"gateway_system\": \"direct\"\r\n    },\r\n    \"reference_id\": \"8566044111\",\r\n    \"payment_link\": null,\r\n    \"profile_id\": \"pro_EzO6xGQZdE5pd9I5Rdzs\",\r\n    \"surcharge_details\": null,\r\n    \"attempt_count\": 1,\r\n    \"merchant_decision\": null,\r\n    \"merchant_connector_id\": \"mca_i5QVCDvXmBLbZg7n97n2\",\r\n    \"incremental_authorization_allowed\": false,\r\n    \"authorization_count\": null,\r\n    \"incremental_authorizations\": null,\r\n    \"external_authentication_details\": null,\r\n    \"external_3ds_authentication_attempted\": false,\r\n    \"expires_on\": \"2025-09-07T03:53:00.787Z\",\r\n    \"fingerprint\": null,\r\n    \"browser_info\": {\r\n        \"language\": \"en-US\",\r\n        \"time_zone\": 330,\r\n        \"ip_address\": \"192.168.1.1\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\r\n        \"color_depth\": 24,\r\n        \"java_enabled\": false,\r\n        \"screen_width\": 1920,\r\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\r\n        \"screen_height\": 1080,\r\n        \"java_script_enabled\": true\r\n    },\r\n    \"payment_channel\": null,\r\n    \"payment_method_id\": null,\r\n    \"network_transaction_id\": null,\r\n    \"payment_method_status\": null,\r\n    \"updated\": \"2025-09-07T03:38:04.582Z\",\r\n    \"split_payments\": null,\r\n    \"frm_metadata\": null,\r\n    \"extended_authorization_applied\": null,\r\n    \"capture_before\": null,\r\n    \"merchant_order_reference_id\": null,\r\n    \"order_tax_amount\": 8900,\r\n    \"connector_mandate_id\": null,\r\n    \"card_discovery\": \"manual\",\r\n    \"force_3ds_challenge\": false,\r\n    \"force_3ds_challenge_trigger\": false,\r\n    \"issuer_error_code\": null,\r\n    \"issuer_error_message\": null,\r\n    \"is_iframe_redirection_enabled\": null,\r\n    \"whole_connector_response\": null,\r\n    \"enable_partial_authorization\": null\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [ ] I formatted the code `cargo +nightly fmt --all`\r\n- [ ] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (37 changes)", "metadata": {"pr_number": 9290, "pr_title": "feat(nuvei): L2L3 Data", "merged_at": "2025-09-09T14:10:52Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"structs_added": 2, "functions_added": 3, "enums_added": 1, "fields_added": 37}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdding Superposition as an independent module in External Services to abstract the complexity of integrating it with the core application.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core.rs`\n   - `crates/router/src/core/configs.rs`\n   - `crates/router/src/core/payment_methods/cards.rs`\n\n**2. Type Definitions**\n   - `crates/external_services/src/superposition/types.rs`\n\n**3. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/development.toml`\n   - ... and 6 more files\n\n**4. Other**\n   - `Cargo.lock`\n   - `crates/external_services/src/lib.rs`\n   - `crates/external_services/src/superposition.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (19 changes)\n- Extend existing types with new fields (76 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit acc1568b:\nFiles to modify:\n\n\n**lib.rs**\n  Remove:\n    - mod: pub::email\n    - mod: pub::hashicorp_vault\n    - mod: pub::no_encryption\n    - mod: pub::crm\n  Add:\n    - mod: pub::crm\n    - mod: pub::email\n    - mod: pub::hashicorp_vault\n    - mod: pub::no_encryption\n    - mod: pub::superposition\n\n**superposition.rs**\n  Add:\n    - function: private::convert_open_feature_value\n    - function: pub::new\n    - function: private::build_evaluation_context\n    - function: pub::get_bool_value\n    - function: pub::get_string_value\n    - function: pub::get_int_value\n    - function: pub::get_float_value\n    - function: pub::get_object_value\n    - struct: pub::SuperpositionClient\n    - impl: impl SuperpositionClient\n    - mod: pub::types\n\n**types.rs**\n  Add:\n    - function: pub::into_inner\n    - function: private::try_from\n    - function: private::default\n    - function: pub::validate\n    - function: pub::new\n    - function: pub::with\n    - function: private::convert_to_raw_secret\n    - struct: pub::JsonValue\n    - struct: pub::SuperpositionClientConfig\n    - struct: pub::ConfigContext\n    - enum: pub::SuperpositionError\n    - impl: impl JsonValue\n    - impl: impl TryFrom<open_feature::StructValue> for JsonValue\n    - impl: impl Default for SuperpositionClientConfig\n    - impl: impl SuperpositionClientConfig\n    - impl: impl ConfigContext\n    - impl: impl hyperswitch_interfaces::secrets_interface::secret_handler::SecretsHandler for SuperpositionClientConfig\n\n**secrets_transformers.rs**\n  Modify existing code\n\n**settings.rs**\n  Modify existing code\n\n**consts.rs**\n  Add:\n    - mod: pub::superposition\n\n**core.rs**\n  Remove:\n    - mod: pub::debit_routing\n    - mod: pub::profile_acquirer\n    - mod: pub::unified_authentication_service\n    - mod: pub::unified_connector_service\n    - mod: pub::proxy\n    - mod: pub::relay\n    - mod: pub::revenue_recovery\n    - mod: pub::chat\n    - mod: pub::revenue_recovery_data_backfill\n    - mod: pub::tokenization\n  Add:\n    - mod: pub::chat\n    - mod: pub::debit_routing\n    - mod: pub::profile_acquirer\n    - mod: pub::proxy\n    - mod: pub::relay\n    - mod: pub::revenue_recovery\n    - mod: pub::revenue_recovery_data_backfill\n    - mod: pub::tokenization\n    - mod: pub::unified_authentication_service\n    - mod: pub::unified_connector_service\n\n**configs.rs**\n  Add:\n    - function: pub::get_config_bool\n    - function: pub::get_config_string\n    - function: pub::get_config_int\n    - function: pub::get_config_float\n    - function: pub::get_config_object\n\n**cards.rs**\n  Modify existing code\n\n**app.rs**\n  Modify existing code", "metadata": {"pr_number": 9289, "pr_title": "feat: introduce a framework to fetch configs from superposition", "merged_at": "2025-10-09T11:05:38Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "card"]}, "hierarchy": {"core_business": ["crates/router/src/core.rs", "crates/router/src/core/configs.rs", "crates/router/src/core/payment_methods/cards.rs"], "types": ["crates/external_services/src/superposition/types.rs"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/development.toml", "config/docker_compose.toml", "crates/external_services/Cargo.toml", "crates/router/Cargo.toml", "crates/router/src/configs/secrets_transformers.rs", "crates/router/src/configs/settings.rs", "docker-compose-development.yml"], "other": ["Cargo.lock", "crates/external_services/src/lib.rs", "crates/external_services/src/superposition.rs", "crates/router/src/consts.rs", "crates/router/src/routes/app.rs"]}, "change_types": {"structs_added": 4, "functions_added": 19, "enums_added": 1, "fields_added": 76, "imports_added": 9, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nUpdated openapi spec added labels to wallet data", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Detailed Identifier Changes:**\n\n\nCommit c3ea9412:\nFiles to modify:\n\n\n**payments.rs**\n  Modify existing code", "metadata": {"pr_number": 9287, "pr_title": "chore: Updated openapi spec added labels to wallet data", "merged_at": "2025-09-08T07:33:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR fixes the state update for `payout_attempt` where latest status resides. This fixes the bug mentioned in https://github.com/juspay/hyperswitch/issues/9278", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/webhooks/incoming.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9283, "pr_title": "fix(payout): send latest status in outgoing webhook notifications during IncomingWebhook flow", "merged_at": "2025-09-07T14:38:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "merchant", "order"]}, "hierarchy": {"core_business": ["crates/router/src/core/webhooks/incoming.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR implements an update mechanism for Redis Time-to-Live (TTL) for connector customer locks within the revenue recovery workflow.\r\n\r\nWhen the decider service provides token with scheduled time, the system now updates the TTL for the corresponding customer lock in Redis. The new TTL is calculated as the difference between the schedule_time_selected_token and the current time.\r\n\r\nThe default TTL for these locks is set to 3888000 seconds (approximately 45 days). This update ensures that the lock's expiration aligns with the newly scheduled event, preventing premature lock release.\r\n\r\nA log entry is generated to track this change, with the message: Connector customer lock TTL update with new expiry time.\r\n\r\nAdded revenue_recovery_retry_algorithm_type in business profile response.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery.rs`\n   - `crates/router/src/core/revenue_recovery/types.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/admin.rs`\n   - `crates/router/src/types/storage/revenue_recovery.rs`\n   - `crates/router/src/types/storage/revenue_recovery_redis_operation.rs`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/development.toml`\n\n**5. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/openapi/src/openapi_v2.rs`\n   - `crates/router/src/workflows/payment_sync.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Implement new functions (6 changes)\n- Extend existing types with new fields (18 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit df47c019:\nFiles to modify:\n\n\n**admin.rs**\n  Modify existing code\n\n**openapi_v2.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**admin.rs**\n  Modify existing code\n\n**revenue_recovery.rs**\n  Modify existing code\n\n**revenue_recovery_redis_operation.rs**\n  Add:\n    - function: pub::get_connector_customer_lock_key\n    - function: private::get_connector_customer_tokens_key\n    - function: pub::update_connector_customer_lock_ttl\n\n**payment_sync.rs**\n  Add:\n    - function: pub::recovery_retry_sync_task\n\n**revenue_recovery.rs**\n  Modify existing code", "metadata": {"pr_number": 9282, "pr_title": "fix(revenue-recovery): Update Redis TTL for customer locks after token selection", "merged_at": "2025-09-11T11:14:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs"], "core_business": ["crates/router/src/core/revenue_recovery.rs", "crates/router/src/core/revenue_recovery/types.rs"], "types": ["crates/router/src/types/api/admin.rs", "crates/router/src/types/storage/revenue_recovery.rs", "crates/router/src/types/storage/revenue_recovery_redis_operation.rs"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/development.toml"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/openapi/src/openapi_v2.rs", "crates/router/src/workflows/payment_sync.rs", "crates/router/src/workflows/revenue_recovery.rs"]}, "change_types": {"functions_added": 6, "fields_added": 18, "imports_added": 2, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR adds support for the get plans endpoint for Chargebee", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs`\n   - ... and 5 more files\n\n**2. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n   - `crates/hyperswitch_connectors/src/connectors/recurly.rs`\n   - ... and 3 more files\n\n**4. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**5. Other**\n   - `crates/hyperswitch_interfaces/src/api.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions.rs`\n   - `crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (8 changes)\n- Implement new functions (10 changes)\n- Extend existing types with new fields (47 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit f3ab3d63:\nFiles to modify:\n\n\n**chargebee.rs**\n  Add:\n    - function: private::get_chargebee_plans_query_params\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_content_type\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl api::subscriptions::Subscriptions for Chargebee\n    - impl: impl api::subscriptions::GetSubscriptionPlansFlow for Chargebee\n    - impl: impl ConnectorIntegration<\nGetSubscriptionPlans,\nGetSubscriptionPlansRequest,\nGetSubscriptionPlansResponse,\n> for Chargebee\n    - impl: impl GetSubscriptionPlansV2 for Chargebee\n    - impl: impl ConnectorIntegrationV2<\nGetSubscriptionPlans,\nhyperswitch_domain_models::router_data_v2::flow_common_types::GetSubscriptionPlansData,\nGetSubscriptionPlansRequest,\nGetSubscriptionPlansResponse,\n> for Chargebee\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - struct: pub::ChargebeeListPlansResponse\n    - struct: pub::ChargebeeItemList\n    - struct: pub::ChargebeeItem\n    - impl: impl TryFrom<ResponseRouterData<F, ChargebeeListPlansResponse, T, GetSubscriptionPlansResponse>> for RouterData<F, T, GetSubscriptionPlansResponse>\n\n**recurly.rs**\n  Add:\n    - impl: impl api::subscriptions_v2::SubscriptionsV2 for Recurly\n    - impl: impl api::subscriptions_v2::GetSubscriptionPlansV2 for Recurly\n    - impl: impl ConnectorIntegrationV2<\nGetSubscriptionPlans,\nGetSubscriptionPlansData,\nGetSubscriptionPlansRequest,\nGetSubscriptionPlansResponse,\n> for Recurly\n\n**constants.rs**\n  Modify existing code\n\n**default_implementations.rs**\n  Add:\n    - impl: impl GetSubscriptionPlansFlow for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<\nGetSubscriptionPlans,\nGetSubscriptionPlansRequest,\nGetSubscriptionPlansResponse,\n> for connectors::DummyConnector<T>\n    - impl: impl Subscriptions for connectors::DummyConnector<T>\n\n**flow_common_types.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlansData\n\n**router_flow_types.rs**\n  Add:\n    - mod: pub::subscriptions\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlans\n\n**router_request_types.rs**\n  Add:\n    - mod: pub::subscriptions\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlans\n\n**router_response_types.rs**\n  Add:\n    - mod: pub::subscriptions\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlans\n\n**types.rs**\n  Modify existing code\n\n**api.rs**\n  Add:\n    - mod: pub::subscriptions\n    - mod: pub::subscriptions_v2\n\n**subscriptions.rs**\n  Add:\n    - struct: pub::GetSubscriptionPlans\n\n**subscriptions_v2.rs**\n  Add:\n    - trait: pub::SubscriptionsV2\n    - trait: pub::GetSubscriptionPlansV2\n\n**connector_integration_v2.rs**\n  Modify existing code\n\n**conversion_impls.rs**\n  Add:\n    - function: private::from_old_router_data\n    - function: private::to_old_router_data\n    - impl: impl RouterDataConversion<T, Req, Resp> for GetSubscriptionPlansData\n\n**types.rs**\n  Modify existing code\n\n**connector_validation.rs**\n  Modify existing code\n\n**api.rs**\n  Add:\n    - mod: pub::subscriptions\n    - mod: pub::subscriptions_v2", "metadata": {"pr_number": 9281, "pr_title": "feat(connector): Add support for get plans for Chargebee", "merged_at": "2025-09-16T12:57:45Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs", "crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/types.rs"], "core_business": ["crates/router/src/core/connector_validation.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs", "crates/hyperswitch_connectors/src/connectors/recurly.rs", "crates/hyperswitch_connectors/src/constants.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_interfaces/src/connector_integration_v2.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api.rs", "crates/hyperswitch_interfaces/src/api/subscriptions.rs", "crates/hyperswitch_interfaces/src/api/subscriptions_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 8, "functions_added": 10, "fields_added": 47, "imports_added": 5, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- 3ds transaction were not actually 3ds transactions in Nuvei system. This occurred because we were not passing previous transaction data while making 3ds complete-authorize call.\r\n- Prevoiusly psync was implemeted with session token. If we make 3ds payment but not confirm and make psycn the nuvei would return error as session transaction not found. Now we have implemented psync with transaction_id .\r\n\r\n## TEST", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei.rs`\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Nuvei.js`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (16 changes)\n- Extend existing types with new fields (141 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit ebba12ec:\nFiles to modify:\n\n\n**nuvei.rs**\n  Remove:\n    - impl: impl ConnectorIntegration<CompleteAuthorize, CompleteAuthorizeData, PaymentsResponseData> for Nuvei\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Nuvei\n  Add:\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Nuvei\n    - impl: impl ConnectorIntegration<CompleteAuthorize, CompleteAuthorizeData, PaymentsResponseData> for Nuvei\n\n**transformers.rs**\n  Remove:\n    - function: private::get_complete_authorize_url\n    - function: private::get_complete_authorize_url\n  Add:\n    - function: private::get_complete_authorize_url\n    - function: private::get_complete_authorize_url", "metadata": {"pr_number": 9279, "pr_title": "fix(nuvei): nuvei 3ds fix + psync fix", "merged_at": "2025-09-11T14:31:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Nuvei.js"]}, "change_types": {"structs_added": 5, "functions_added": 16, "fields_added": 141, "conditionals_added": 1, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR adds capability for payouts to use billing address in payment_methods.\r\n\r\n1. During first payout (with recurring: true) - payment_method entry created will store the billing address\r\n2. During recurring payouts - stored billing address will be fetched and used", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/routing.rs`\n   - `crates/router/src/core/payouts.rs`\n   - `crates/router/src/core/payouts/helpers.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (9 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 831100c0:\nFiles to modify:\n\n\n**routing.rs**\n  Modify existing code\n\n**payouts.rs**\n  Modify existing code\n\n**helpers.rs**\n  Add:\n    - function: pub::resolve_billing_address_for_payout\n\n**utils.rs**\n  Modify existing code", "metadata": {"pr_number": 9277, "pr_title": "fix(payout): use billing address in payment_methods", "merged_at": "2025-09-08T11:39:06Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/routing.rs", "crates/router/src/core/payouts.rs", "crates/router/src/core/payouts/helpers.rs", "crates/router/src/core/utils.rs"]}, "change_types": {"functions_added": 1, "fields_added": 9, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "ORIGINAL PR:https://github.com/juspay/hyperswitch/pull/9253", "response": "To implement this **unknown** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (12 changes)", "metadata": {"pr_number": 9276, "pr_title": "fix(connector): Revert [AUTHORIZEDOTNET] customer id population fixed in authorize flow", "merged_at": "2025-09-04T11:07:11Z", "intent": {"feature_type": "unknown", "action": "unknown", "entities": []}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"fields_added": 12}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR refactors the gRPC header handling for the Unified Connector Service (UCS) by introducing a dedicated header type, `GrpcHeadersUcs`. This change enhances the specificity and robustness of header management for UCS interactions.\r\n\r\nKey changes include:\r\n-   **New `GrpcHeadersUcs` Struct**: A new struct, `GrpcHeadersUcs`, has been introduced in `crates/external_services/src/grpc_client.rs`. It specifically caters to UCS needs and includes `tenant_id`, `lineage_ids`, and `external_vault_proxy_metadata` fields, utilizing the `TypedBuilder` pattern for instantiation.\r\n-   **Enhanced UCS Header Construction**: The `build_unified_connector_service_grpc_headers` function in `crates/external_services/src/grpc_client/unified_connector_service.rs` now accepts `GrpcHeadersUcs`. It includes new logic to properly URL-encode and inject `lineage_ids` into the gRPC metadata, using a newly added constant `UCS_LINEAGE_IDS`.\r\n-   **Updated UCS Client Methods**: All relevant methods in `UnifiedConnectorServiceClient` have been updated to accept `GrpcHeadersUcs` instead of the generic `GrpcHeaders`.\r\n-   **Router Flow Updates**: Calls within various payment flows (`authorize_flow.rs`, `external_proxy_flow.rs`, `psync_flow.rs`, `setup_mandate_flow.rs`) and the core UCS module (`unified_connector_service.rs`) have been updated to use the new `state.get_grpc_headers_ucs()` method and adapt to the `GrpcHeadersUcs` builder pattern.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - `crates/router/src/core/payments/flows/external_proxy_flow.rs`\n   - `crates/router/src/core/payments/flows/psync_flow.rs`\n   - ... and 2 more files\n\n**2. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n\n**3. Configuration Files**\n   - `crates/external_services/Cargo.toml`\n\n**4. Other**\n   - `Cargo.lock`\n   - `crates/external_services/src/grpc_client.rs`\n   - `crates/external_services/src/lib.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (12 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 876ea3f6:\nFiles to modify:\n\n\n**grpc_client.rs**\n  Add:\n    - function: pub::new\n    - function: pub::get_url_encoded_string\n    - struct: pub::GrpcHeadersUcs\n    - struct: pub::LineageIds\n    - impl: impl LineageIds\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**lib.rs**\n  Modify existing code\n\n**authorize_flow.rs**\n  Modify existing code\n\n**external_proxy_flow.rs**\n  Modify existing code\n\n**psync_flow.rs**\n  Modify existing code\n\n**setup_mandate_flow.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Modify existing code\n\n**app.rs**\n  Add:\n    - function: pub::get_grpc_headers_ucs", "metadata": {"pr_number": 9275, "pr_title": "refactor(ucs): introduce dedicated gRPC header type and enhance lineage ID handling", "merged_at": "2025-09-09T10:05:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/payments/flows/psync_flow.rs", "crates/router/src/core/payments/flows/setup_mandate_flow.rs", "crates/router/src/core/unified_connector_service.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs"], "config": ["crates/external_services/Cargo.toml"], "other": ["Cargo.lock", "crates/external_services/src/grpc_client.rs", "crates/external_services/src/lib.rs", "crates/router/src/routes/app.rs"]}, "change_types": {"structs_added": 2, "functions_added": 3, "fields_added": 12, "imports_added": 4, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd external vault support in v1 payments flow.\r\nCurrently we only save card in hs-card-vault\r\nAdded new support to save card in external vault based merchant-profile configuration.\r\n\r\nChanges in code - \r\nDuring First CIT (fresh card for a customer c1 - setup future usage - on_session with customer acceptance)\r\n- based on profile level config, vault is decided, vault creds are fetched from MCA. payment method data is stored in respective vault.\r\nDuring Repeat CIT (Saved card for a customer c1 - payment token for c1)\r\n- based on pm entry - vault type, and vault mca id, if external, mca creds are fetched, if internal, default flow.\r\n\r\n\r\nDB changes - \r\nIn business profile in api level & db level- \r\n```\r\nis_external_vault_enabled: Option<bool>, //Indicates if external vault is enabled or not.\r\nexternal_vault_connector_details: Option<ExternalVaultConnectorDetails>,// holds the active External Vault Connector Details\r\n```\r\nIn Payment method table in db level (diesel model) - \r\n```\r\npub external_vault_source: Option<common_utils::id_type::MerchantConnectorAccountId>, //holds the mca of external vault with which payment method data has been stored\r\npub vault_type: Option<storage_enums::VaultType>, //enum variant whether it is ext vault or internal vault\r\n```", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/business_profile.rs`\n   - `crates/diesel_models/src/payment_method.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - ... and 1 more files\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n   - `crates/hyperswitch_domain_models/src/merchant_connector_account.rs`\n   - `crates/hyperswitch_domain_models/src/payment_method_data.rs`\n   - ... and 1 more files\n\n**4. Core Business Logic**\n   - `crates/payment_methods/src/core/migration/payment_methods.rs`\n   - `crates/router/src/core/admin.rs`\n   - `crates/router/src/core/errors/utils.rs`\n   - ... and 10 more files\n\n**5. External Connector Integration**\n   - `crates/router/src/types/api/connector_mapping.rs`\n\n**6. Type Definitions**\n   - `crates/router/src/types/api/admin.rs`\n   - `crates/router/src/types/domain.rs`\n   - `crates/router/src/types/payment_methods.rs`\n\n**7. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/common_enums/src/enums.rs`\n   - `crates/openapi/src/openapi.rs`\n   - ... and 4 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (22 changes)\n- Extend existing types with new fields (259 changes)\n- Add conditional logic for feature flags or filtering (4 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit e410af26:\nFiles to modify:\n\n\n**admin.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<CardDetail> for CardDetailFromLocker\n\n**enums.rs**\n  Add:\n    - enum: pub::VaultType\n    - enum: pub::ExternalVaultEnabled\n\n**business_profile.rs**\n  Modify existing code\n\n**payment_method.rs**\n  Modify existing code\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**business_profile.rs**\n  Modify existing code\n\n**merchant_connector_account.rs**\n  Add:\n    - function: pub::get_connector_name_as_string\n    - function: pub::get_connector_name\n\n**payment_method_data.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<(\npayment_methods::CardDetail,\nOption<&CardToken>,\nOption<payment_methods::CoBadgedCardData>,\n)> for Card\n\n**payment_methods.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<CardDetail> for CardDetailFromLocker\n\n**openapi.rs**\n  Modify existing code\n\n**controller.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<CardDetail> for CardDetailFromLocker\n\n**admin.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code\n\n**payment_methods.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<CardDetail> for CardDetailFromLocker\n\n**cards.rs**\n  Modify existing code\n\n**card_executor.rs**\n  Modify existing code\n\n**vault.rs**\n  Add:\n    - function: pub::retrieve_payment_method_from_vault_external_v1\n    - function: pub::get_vault_response_for_retrieve_payment_method_data_v1\n\n**helpers.rs**\n  Add:\n    - function: pub::fetch_card_details_from_internal_locker\n\n**tokenization.rs**\n  Add:\n    - function: private::save_in_locker\n    - function: pub::save_in_locker_internal\n\n**vault_session.rs**\n  Modify existing code\n\n**helpers.rs**\n  Add:\n    - function: pub::fetch_card_details_from_internal_locker\n\n**pm_auth.rs**\n  Modify existing code\n\n**utils.rs**\n  Modify existing code\n\n**events.rs**\n  Modify existing code\n\n**admin.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**domain.rs**\n  Add:\n    - mod: private::business_profile\n\n**payment_methods.rs**\n  Add:\n    - function: private::from\n    - impl: impl From<CardDetail> for CardDetailFromLocker", "metadata": {"pr_number": 9274, "pr_title": "feat(router): Add external vault support in v1 payments flow", "merged_at": "2025-09-23T07:20:31Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs", "crates/api_models/src/payment_methods.rs"], "database": ["crates/diesel_models/src/business_profile.rs", "crates/diesel_models/src/payment_method.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs", "crates/hyperswitch_domain_models/src/merchant_connector_account.rs", "crates/hyperswitch_domain_models/src/payment_method_data.rs", "crates/hyperswitch_domain_models/src/payment_methods.rs"], "core_business": ["crates/payment_methods/src/core/migration/payment_methods.rs", "crates/router/src/core/admin.rs", "crates/router/src/core/errors/utils.rs", "crates/router/src/core/payment_methods.rs", "crates/router/src/core/payment_methods/cards.rs", "crates/router/src/core/payment_methods/tokenize/card_executor.rs", "crates/router/src/core/payment_methods/vault.rs", "crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/tokenization.rs", "crates/router/src/core/payments/vault_session.rs", "crates/router/src/core/payouts/helpers.rs", "crates/router/src/core/pm_auth.rs", "crates/router/src/core/utils.rs"], "connectors": ["crates/router/src/types/api/connector_mapping.rs"], "types": ["crates/router/src/types/api/admin.rs", "crates/router/src/types/domain.rs", "crates/router/src/types/payment_methods.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/common_enums/src/enums.rs", "crates/openapi/src/openapi.rs", "crates/payment_methods/src/controller.rs", "crates/router/src/db/events.rs", "migrations/2025-09-20-190742_add_external_vault_source_in_payment_method_and_is_external_vault_enabled_in_profile/down.sql", "migrations/2025-09-20-190742_add_external_vault_source_in_payment_method_and_is_external_vault_enabled_in_profile/up.sql"]}, "change_types": {"structs_added": 1, "functions_added": 22, "enums_added": 4, "fields_added": 259, "imports_added": 10, "conditionals_added": 4}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nThis PR adds a new NetworkDetails struct containing network_advice_code to capture network-level response information from payment processors.\r\nKey Changes:\r\n\r\n1)Added network_details JSONB column to payment_attempt table\r\n2)Extended PaymentsResponse API to include optional network_details field\r\n3)Updated payment attempt models and error handling to populate network advice codes\r\n4)Added database migration and comprehensive model updates across the codebase", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - ... and 1 more files\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payments/helpers.rs`\n   - `crates/router/src/core/payments/operations/payment_create.rs`\n   - `crates/router/src/core/payments/operations/payment_response.rs`\n   - ... and 2 more files\n\n**5. Type Definitions**\n   - `crates/router/src/types/storage/payment_attempt.rs`\n\n**6. Utils**\n   - `crates/router/src/utils/user/sample_data.rs`\n\n**7. Tests**\n   - `crates/router/tests/payments.rs`\n   - `crates/router/tests/payments2.rs`\n\n**8. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/openapi/src/openapi.rs`\n   - `crates/router/src/db/events.rs`\n   - ... and 5 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (3 changes)\n- Extend existing types with new fields (72 changes)", "metadata": {"pr_number": 9273, "pr_title": "feat(core): Add Network Details in Payments Response", "merged_at": "2025-09-09T14:10:52Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_attempt.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/user/sample_data.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments/payment_attempt.rs"], "core_business": ["crates/router/src/core/payments/helpers.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/operations/payment_response.rs", "crates/router/src/core/payments/retry.rs", "crates/router/src/core/payments/transformers.rs"], "types": ["crates/router/src/types/storage/payment_attempt.rs"], "utils": ["crates/router/src/utils/user/sample_data.rs"], "tests": ["crates/router/tests/payments.rs", "crates/router/tests/payments2.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/openapi/src/openapi.rs", "crates/router/src/db/events.rs", "crates/router/src/workflows/payment_sync.rs", "crates/storage_impl/src/mock_db/payment_attempt.rs", "crates/storage_impl/src/payments/payment_attempt.rs", "migrations/2025-09-09-171443_add_network_details_in_attempt_table/down.sql", "migrations/2025-09-09-171443_add_network_details_in_attempt_table/up.sql"]}, "change_types": {"structs_added": 2, "functions_added": 3, "fields_added": 72}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR refactors the **`subscription` table schema** to improve key management and alignment with business requirements.  \r\nKey updates include:\r\n- Changed the **primary key** from `id` to a **composite key**: `(subscription_id, merchant_id)`.\r\n- Removed the old `id` field as a primary identifier.\r\n- Added a new field: `profile_id` (`VARCHAR(128) NOT NULL`) to support profile-specific subscription handling.\r\n- Renamed `mca_id` → `merchant_connector_id` for better clarity and consistency across schema and model definitions.\r\n- Updated associated Diesel models (`Subscription`, `SubscriptionNew`, `SubscriptionUpdate`) to reflect the schema changes.\r\n\r\n## Outcomes\r\n- Ensures **subscriptions are uniquely identified** by merchant and subscription ID, preventing conflicts across merchants.\r\n- Introduces **profile-level granularity** for subscriptions, enabling better multi-profile support.\r\n- Aligns field naming (`merchant_connector_id`) with domain terminology for consistency across codebase.\r\n- Strengthens schema constraints to reduce risk of duplicate or inconsistent subscription entries.\r\n\r\n## Diff Hunk Explanation\r\n- **`crates/diesel_models/src/schema.rs` & `schema_v2.rs`**\r\n  - Modified `subscription` table definition to use `(subscription_id, merchant_id)` as composite primary key.\r\n  - Added new column `profile_id`.\r\n  - Renamed column `mca_id` → `merchant_connector_id`.\r\n\r\n- **`crates/diesel_models/src/subscription.rs`**\r\n  - Updated structs (`Subscription`, `SubscriptionNew`) to drop old `id` field and include `profile_id`.\r\n  - Renamed field `mca_id` → `merchant_connector_id`.\r\n  - Updated Diesel annotations to reflect composite primary key.\r\n\r\n- **Migrations**\r\n  - `up.sql`: drops old PK, removes `id`, adds `profile_id`, sets composite PK, renames column.\r\n  - `down.sql`: restores old structure with `id` as PK, removes `profile_id`, renames column back to `mca_id`.\r\n\r\nThis refactor lays the foundation for **robust subscription handling with merchant-profile level uniqueness**.\r\n\r\n\r\n\r\n## How did you test it?\r\nIts just migration PR won't require testing\r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [ ] I formatted the code `cargo +nightly fmt --all`\r\n- [ ] I addressed lints thrown by `cargo clippy`\r\n- [ ] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **connector_integration** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - `crates/diesel_models/src/subscription.rs`\n\n**2. Other**\n   - `migrations/2025-09-04-063109_update_subscription_table_with_profile_id/down.sql`\n   - `migrations/2025-09-04-063109_update_subscription_table_with_profile_id/up.sql`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (6 changes)", "metadata": {"pr_number": 9272, "pr_title": "refactor: alter subscription table to update primary key", "merged_at": "2025-09-04T09:48:09Z", "intent": {"feature_type": "connector_integration", "action": "add_feature", "entities": ["merchant", "connector"]}, "hierarchy": {"database": ["crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/subscription.rs"], "other": ["migrations/2025-09-04-063109_update_subscription_table_with_profile_id/down.sql", "migrations/2025-09-04-063109_update_subscription_table_with_profile_id/up.sql"]}, "change_types": {"fields_added": 6}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "## Summary", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/unified_connector_service/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (2 changes)", "metadata": {"pr_number": 9269, "pr_title": "fix: change precedence order in address that we send to ucs", "merged_at": "2025-09-03T17:28:26Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/unified_connector_service/transformers.rs"]}, "change_types": {"fields_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- `is_manual_retry_enabled` is added to business profile\r\n- it is a nullable value \r\n- this provide control over the manual retry of payment for merchant\r\n- [note] respective dashboard changes need to be picked", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/business_profile.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n\n**5. Type Definitions**\n   - `crates/router/src/types/api/admin.rs`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `crates/router/src/db/events.rs`\n   - `migrations/2025-09-03-115802_add-is_manual_retry_enabled-to-business_profile/down.sql`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (29 changes)", "metadata": {"pr_number": 9266, "pr_title": "feat(business_profile): add field in profile for manual retry", "merged_at": "2025-09-08T10:44:41Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs"], "database": ["crates/diesel_models/src/business_profile.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs"], "core_business": ["crates/router/src/core/admin.rs"], "types": ["crates/router/src/types/api/admin.rs"], "other": ["api-reference/v1/openapi_spec_v1.json", "crates/router/src/db/events.rs", "migrations/2025-09-03-115802_add-is_manual_retry_enabled-to-business_profile/down.sql", "migrations/2025-09-03-115802_add-is_manual_retry_enabled-to-business_profile/up.sql"]}, "change_types": {"fields_added": 29}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "For acquirer CMCIC, Cybersource MIT payments needs the following field\r\n`paymentInformation.card.typeSelectionIndicator`\r\nThis PR addresses the same", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Extend existing types with new fields (4 changes)", "metadata": {"pr_number": 9265, "pr_title": "fix(connector): [CYBERSOURCE] Add extra field for Cybersource MIT payment for acquirer CMCIC", "merged_at": "2025-09-07T14:39:12Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs"]}, "change_types": {"structs_added": 1, "fields_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdding `connector_customer_id` for proxy flow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (4 changes)", "metadata": {"pr_number": 9263, "pr_title": "fix(router): adding connector_customer_id for external vault proxy", "merged_at": "2025-09-11T12:38:28Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs"]}, "change_types": {"fields_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nPreviously unified error codes and messages were Optional. Hence if nothing is being returned by the connector, it displays as null. Mapped it with the default ones now.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payouts.rs`", "metadata": {"pr_number": 9262, "pr_title": "feat(payouts): Mapped Default Values to  Unified Error Code and Message", "merged_at": "2025-09-03T15:49:59Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payouts.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n Return Network transaction if from connector Response\r\n\r\n- NOTE: we need to ask nuvei to return `external_scheme_transaction_id` during integration.\r\n\r\n<details>\r\n<summary> See returned NTID in the connector payment response</summary>", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9261, "pr_title": "feat(nuvei): Map NTID for nuvei payment responses", "merged_at": "2025-09-07T14:40:37Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"]}, "change_types": {"fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This PR fixes the bug where the encoded payment link details were being read without decoding them first.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payment_link/payment_link_initiate/secure_payment_link_initiator.js`", "metadata": {"pr_number": 9260, "pr_title": "fix(payment-link): decode details before using them in secure links", "merged_at": "2025-09-03T13:37:05Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payment_link/payment_link_initiate/secure_payment_link_initiator.js"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- reference of payment_method_id was taken payment attempt but now it will be taken from payment_data\r\n- payment attempt doesn't contain the context of payment_method_id before update tracker\r\n- thus, this check was invalid", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs`\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9259, "pr_title": "fix(core): change condition for updating payment method status", "merged_at": "2025-09-03T14:00:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/external_vault_proxy_payment_intent.rs"]}, "change_types": {"conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd apple_pay and google_pay mandate support for nuvei in integ,sbx and prod ( updation of config files)\r\n\r\nParent pr : https://github.com/juspay/hyperswitch/pull/9081\r\nRefer test cases with above pr", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Tests**\n   - `config/deployments/integration_test.toml`\n\n**2. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/docker_compose.toml`", "metadata": {"pr_number": 9256, "pr_title": "feat(nuvei): add mandate support for integ,prod,and sbx for googlepay applepay", "merged_at": "2025-09-03T12:35:52Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"tests": ["config/deployments/integration_test.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/docker_compose.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nPass metadata to connector Shift4.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/shift4/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (3 changes)\n- Extend existing types with new fields (1 changes)", "metadata": {"pr_number": 9254, "pr_title": "feat(connector): [SHIFT4] Pass metadata to connector", "merged_at": "2025-09-04T07:16:48Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/shift4/transformers.rs"]}, "change_types": {"functions_added": 3, "fields_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Reverts juspay/hyperswitch#9079", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (12 changes)", "metadata": {"pr_number": 9253, "pr_title": "fix(connector): Revert [AUTHORIZEDOTNET] customer id population fixed in authorize flow", "merged_at": "2025-09-04T07:19:18Z", "intent": {"feature_type": "payment", "action": "fix_bug", "entities": ["customer", "payment", "connector"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/authorizedotnet/transformers.rs"]}, "change_types": {"fields_added": 12}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "This pull request introduces a new API endpoint for retrieving subscription plans and the supporting plumbing required for it. The changes include new request/response types, authentication and expiry logic, and routing updates to expose the endpoint. The main themes are new subscription plan retrieval functionality and related codebase integration.", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/subscription.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/lib.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs`\n   - `crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs`\n   - ... and 1 more files\n\n**3. Core Business Logic**\n   - `crates/router/src/core/subscription.rs`\n   - `crates/router/src/core/subscription/billing_processor_handler.rs`\n   - `crates/router/src/core/subscription/subscription_handler.rs`\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/chargebee.rs`\n   - `crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs`\n\n**5. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/subscription.rs`\n   - `crates/router/src/workflows/invoice_sync.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (5 changes)\n- Implement new functions (19 changes)\n- Extend existing types with new fields (65 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit b3beda7d:\nFiles to modify:\n\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - function: pub::as_str\n    - struct: pub::GetPlansResponse\n    - struct: pub::SubscriptionPlanPrices\n    - struct: pub::ClientSecret\n    - struct: pub::GetPlansQuery\n    - enum: pub::PeriodUnit\n    - impl: impl ClientSecret\n    - impl: impl ApiEventMetric for GetPlansQuery\n    - impl: impl ApiEventMetric for GetPlansResponse\n\n**chargebee.rs**\n  Modify existing code\n\n**transformers.rs**\n  Modify existing code\n\n**lib.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscriptions.rs**\n  Add:\n    - function: pub::new\n    - function: private::default\n    - impl: impl GetSubscriptionPlansRequest\n    - impl: impl Default for GetSubscriptionPlansRequest\n\n**subscriptions.rs**\n  Add:\n    - function: pub::new\n    - function: private::default\n    - impl: impl GetSubscriptionPlansRequest\n    - impl: impl Default for GetSubscriptionPlansRequest\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - function: pub::as_str\n    - struct: pub::GetPlansResponse\n    - struct: pub::SubscriptionPlanPrices\n    - struct: pub::ClientSecret\n    - struct: pub::GetPlansQuery\n    - enum: pub::PeriodUnit\n    - impl: impl ClientSecret\n    - impl: impl ApiEventMetric for GetPlansQuery\n    - impl: impl ApiEventMetric for GetPlansResponse\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - function: pub::as_str\n    - struct: pub::GetPlansResponse\n    - struct: pub::SubscriptionPlanPrices\n    - struct: pub::ClientSecret\n    - struct: pub::GetPlansQuery\n    - enum: pub::PeriodUnit\n    - impl: impl ClientSecret\n    - impl: impl ApiEventMetric for GetPlansQuery\n    - impl: impl ApiEventMetric for GetPlansResponse\n\n**billing_processor_handler.rs**\n  Add:\n    - function: pub::get_subscription_plans\n    - function: pub::get_subscription_plan_prices\n\n**subscription_handler.rs**\n  Add:\n    - function: pub::find_and_validate_subscription\n    - function: pub::validate_client_secret\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - function: pub::as_str\n    - struct: pub::GetPlansResponse\n    - struct: pub::SubscriptionPlanPrices\n    - struct: pub::ClientSecret\n    - struct: pub::GetPlansQuery\n    - enum: pub::PeriodUnit\n    - impl: impl ClientSecret\n    - impl: impl ApiEventMetric for GetPlansQuery\n    - impl: impl ApiEventMetric for GetPlansResponse\n\n**invoice_sync.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9251, "pr_title": "feat(subscription): get plans for subscription", "merged_at": "2025-10-07T09:07:33Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/subscription.rs"], "domain": ["crates/hyperswitch_domain_models/src/lib.rs", "crates/hyperswitch_domain_models/src/router_request_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs", "crates/hyperswitch_domain_models/src/subscription.rs"], "core_business": ["crates/router/src/core/subscription.rs", "crates/router/src/core/subscription/billing_processor_handler.rs", "crates/router/src/core/subscription/subscription_handler.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/chargebee.rs", "crates/hyperswitch_connectors/src/connectors/chargebee/transformers.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/router/src/routes/app.rs", "crates/router/src/routes/subscription.rs", "crates/router/src/workflows/invoice_sync.rs"]}, "change_types": {"structs_added": 5, "functions_added": 19, "enums_added": 1, "fields_added": 65, "imports_added": 5, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n## Overview of the Three Crates", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/smithy-core/Cargo.toml`\n   - `crates/smithy-core/src/generator.rs`\n   - `crates/smithy-core/src/lib.rs`\n   - ... and 1 more files\n\n**2. Configuration Files**\n   - `crates/smithy-generator/Cargo.toml`\n   - `crates/smithy/Cargo.toml`\n\n**3. Other**\n   - `Cargo.lock`\n   - `crates/smithy-generator/build.rs`\n   - `crates/smithy-generator/src/main.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (10 changes)\n- Implement new functions (42 changes)\n- Extend existing types with new fields (126 changes)\n- Add conditional logic for feature flags or filtering (94 changes)\n- Modify database queries (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 0baae338:\nFiles to modify:\n\n\n**generator.rs**\n  Add:\n    - function: pub::new\n    - function: pub::add_model\n    - function: pub::generate_idl\n    - function: private::generate_shape_definition\n    - function: private::resolve_type\n    - function: private::trait_to_string\n    - function: private::default\n    - struct: pub::SmithyGenerator\n    - impl: impl SmithyGenerator\n    - impl: impl Default for SmithyGenerator\n\n**lib.rs**\n  Add:\n    - mod: pub::generator\n    - mod: pub::types\n\n**types.rs**\n  Add:\n    - function: pub::resolve_type_and_generate_shapes\n    - function: private::extract_generic_inner_type\n    - function: private::parse_map_types\n    - struct: pub::SmithyModel\n    - struct: pub::SmithyMember\n    - struct: pub::SmithyEnumValue\n    - struct: pub::SmithyField\n    - struct: pub::SmithyEnumVariant\n    - enum: pub::SmithyShape\n    - enum: pub::SmithyTrait\n    - enum: pub::SmithyConstraint\n    - trait: pub::SmithyModelGenerator\n\n**build.rs**\n  Add:\n    - function: private::main\n    - function: private::run_build\n    - function: private::get_workspace_root\n    - function: private::scan_crate_for_smithy_models\n    - function: private::scan_directory\n    - function: private::scan_rust_file\n    - function: private::is_valid_rust_identifier\n    - function: private::create_module_path\n    - function: private::generate_model_registry\n    - struct: private::SmithyModelInfo\n\n**main.rs**\n  Add:\n    - function: private::main\n\n**lib.rs**\n  Add:\n    - mod: pub::generator\n    - mod: pub::types", "metadata": {"pr_number": 9249, "pr_title": "feat(framework): Added smithy, smithy-core and smithy-generator crates", "merged_at": "2025-09-26T08:06:07Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment"]}, "hierarchy": {"core_business": ["crates/smithy-core/Cargo.toml", "crates/smithy-core/src/generator.rs", "crates/smithy-core/src/lib.rs", "crates/smithy-core/src/types.rs"], "config": ["crates/smithy-generator/Cargo.toml", "crates/smithy/Cargo.toml"], "other": ["Cargo.lock", "crates/smithy-generator/build.rs", "crates/smithy-generator/src/main.rs", "crates/smithy/src/lib.rs"]}, "change_types": {"structs_added": 10, "functions_added": 42, "enums_added": 3, "fields_added": 126, "imports_added": 14, "conditionals_added": 94, "database_queries": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nIntegrated CIT/MIT and setup mandate flow.\r\n\r\nAdded `setup_future_usage` to `PaymentsSyncData` to support mandate payments.\r\nFor mandate flows, the source_id (connector mandate ID) must be stored in the MandateReference. To identify whether a payment is mandate-based, we need the setup_future_usage field.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments/transformers.rs`\n\n**3. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout.rs`\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n   - `crates/hyperswitch_connectors/src/utils.rs`\n\n**4. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**5. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (10 changes)\n- Extend existing types with new fields (83 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 7355a83e:\nFiles to modify:\n\n\n**checkout.rs**\n  Add:\n    - function: private::validate_mandate_payment\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_request_body\n\n**transformers.rs**\n  Add:\n    - struct: pub::MandateSource\n    - enum: pub::CheckoutPaymentType\n\n**utils.rs**\n  Add:\n    - function: private::is_mandate_payment\n\n**router_request_types.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - struct: pub::MandateSource\n    - enum: pub::CheckoutPaymentType", "metadata": {"pr_number": 9248, "pr_title": "feat(connector): [checkout] Add mandate flow", "merged_at": "2025-09-10T08:51:15Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs"], "core_business": ["crates/router/src/core/payments/transformers.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/checkout.rs", "crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs", "crates/hyperswitch_connectors/src/utils.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml"]}, "change_types": {"structs_added": 2, "functions_added": 10, "enums_added": 2, "fields_added": 83, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "Added a BadRequest response for SSO login when an invalid authorization code is provided.\r\n<!-- Describe your changes in detail -->", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Other**\n   - `crates/router/src/services/openidconnect.rs`\n\n**Code Patterns Applied:**\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9244, "pr_title": "fix(users): add bad request for openidconnect", "merged_at": "2025-09-10T08:51:15Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user"]}, "hierarchy": {"other": ["crates/router/src/services/openidconnect.rs"]}, "change_types": {"conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nhttps://github.com/user-attachments/assets/89bb0a3f-b160-4b60-91fe-6306a806c554\r\n\r\nFE PR : https://github.com/juspay/hyperswitch-control-center/pull/3505\r\nThis pull request makes significant updates to the dashboard configuration and theming system. The main changes include a major refactor of the `dashboard.toml` file to reorganize endpoints and feature flags, and the introduction of a new `dashboard_theme.json` file to centralize and modernize theme settings. These changes improve maintainability, flexibility, and clarity in how the dashboard's appearance and features are configured.\r\n\r\n**Configuration and Feature Management:**\r\n\r\n- Refactored `config/dashboard.toml`:\r\n  - Removed the `[default.theme]` section and moved theme-related settings to a new JSON file.\r\n  - Updated and reorganized `[default.endpoints]` with new URLs and additional keys for certificates, analytics, and third-party integrations.\r\n  - Expanded `[default.features]` with new feature flags (e.g., `branding`, `mixpanel`, `feedback`, `global_search`, `transaction_view`, `custom_webhook_headers`, etc.) and restructured existing flags for better clarity and future scalability.\r\n  - Added `[default.merchant_config.whitelist]` and `[default.merchant_config.blacklist]` sections to support granular merchant-specific feature access control.\r\n\r\n**Theming and UI Customization:**\r\n\r\n- Added `config/dashboard_theme.json`:\r\n  - Introduced a new JSON-based theme configuration with structured settings for colors, sidebar, typography, buttons, borders, and spacing.\r\n  - Centralized all UI theming options to make it easier to update the dashboard's look and feel without modifying TOML files.\r\n  - Provided placeholders for `faviconUrl` and `logoUrl` to further support branding customization.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Configuration Files**\n   - `config/dashboard.toml`\n   - `config/dashboard_theme.json`\n   - `docker-compose.yml`", "metadata": {"pr_number": 9243, "pr_title": "feat: customise default theme", "merged_at": "2025-09-09T09:37:32Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "user", "order"]}, "hierarchy": {"config": ["config/dashboard.toml", "config/dashboard_theme.json", "docker-compose.yml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nHotfix for https://github.com/juspay/hyperswitch/pull/9075\r\n\r\nWe need to make update payment methods API which can update the fields of the records in payment methods table. It will consume a CSV file which will have batch update entries. Currently it should only update connector_mandate_id, network_transaction_id and mandate_status.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payment_methods.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_method.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payment_methods.rs`\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payment_methods.rs`\n   - `crates/router/src/core/payment_methods/migration.rs`\n\n**5. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `crates/router/src/routes/app.rs`\n   - `crates/router/src/routes/payment_methods.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (80 changes)\n- Add conditional logic for feature flags or filtering (4 changes)", "metadata": {"pr_number": 9242, "pr_title": "feat(core): Update payment methods api", "merged_at": "2025-09-02T13:22:22Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "merchant", "user"]}, "hierarchy": {"api_models": ["crates/api_models/src/payment_methods.rs"], "database": ["crates/diesel_models/src/payment_method.rs"], "domain": ["crates/hyperswitch_domain_models/src/payment_methods.rs"], "core_business": ["crates/router/src/core/payment_methods.rs", "crates/router/src/core/payment_methods/migration.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["crates/router/src/routes/app.rs", "crates/router/src/routes/payment_methods.rs"]}, "change_types": {"structs_added": 4, "functions_added": 6, "enums_added": 1, "fields_added": 80, "imports_added": 14, "conditionals_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThis PR updates the BIN lookup override logic in payment transformers.rs to ensure payment_method_type is overridden only for Card payment methods.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/operations/payment_confirm.rs`\n   - `crates/router/src/core/payments/operations/payment_create.rs`\n   - `crates/router/src/core/payments/transformers.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (1 changes)\n- Extend existing types with new fields (1 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9241, "pr_title": "fix(payments): override payment_method_type only for cards", "merged_at": "2025-09-03T13:10:45Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/operations/payment_confirm.rs", "crates/router/src/core/payments/operations/payment_create.rs", "crates/router/src/core/payments/transformers.rs"]}, "change_types": {"functions_added": 1, "fields_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nEnable configuration of extended authorization through the profile update call, and include supported payment methods and payment method types for extended authorization.", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/admin.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/business_profile.rs`\n\n**3. Core Business Logic**\n   - `crates/router/src/core/admin.rs`\n\n**4. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (3 changes)", "metadata": {"pr_number": 9237, "pr_title": "fix(core): add extended authorization to profile update and add supported payment method types ", "merged_at": "2025-09-03T08:31:41Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/admin.rs"], "domain": ["crates/hyperswitch_domain_models/src/business_profile.rs"], "core_business": ["crates/router/src/core/admin.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs"]}, "change_types": {"fields_added": 3}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nThe format of csv:-\r\n<img width=\"1720\" height=\"33\" alt=\"Screenshot 2025-09-02 at 13 57 36\" src=\"https://github.com/user-attachments/assets/d8e57dc8-1707-49b2-a27f-79888ee5a8b9\" />\r\n<img width=\"1711\" height=\"32\" alt=\"Screenshot 2025-09-02 at 13 57 54\" src=\"https://github.com/user-attachments/assets/222bbb5a-0c0a-4920-ad8e-d6d931be86ad\" />\r\n<img width=\"1644\" height=\"28\" alt=\"Screenshot 2025-09-02 at 13 58 07\" src=\"https://github.com/user-attachments/assets/5e86aa7b-e34e-40fb-bbff-742d7316d8d5\" />\r\n\r\nhere `CustomerReq_ID` is the customer token and `Token` is the payment token which is used as an identifier in Redis for tokens, (\"customer:{}:tokens\", customer_id) is used to get token and `Token` is used to find the field which we need to update.\r\nSo, we are parsing the csv and getting the valid records and building a request per record `RevenueRecoveryBackfillRequest`, from this request we are fetching the data like expiry month, year, card type, card issuer, card network, any of these fields are `null`, we are updating them from the request.\r\n\r\nComplexity:-\r\nfor each valid record we are doing two Redis call, one for get and another for set.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/Cargo.toml`\n   - `crates/api_models/src/lib.rs`\n   - `crates/api_models/src/revenue_recovery_data_backfill.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core.rs`\n   - `crates/router/src/core/revenue_recovery/types.rs`\n   - `crates/router/src/core/revenue_recovery_data_backfill.rs`\n\n**3. Type Definitions**\n   - `crates/router/src/types/storage/revenue_recovery_redis_operation.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**4. Utils**\n   - `crates/router/src/routes/lock_utils.rs`\n\n**5. Other**\n   - `Cargo.lock`\n   - `crates/router/src/lib.rs`\n   - `crates/router/src/routes.rs`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Define new data structures (8 changes)\n- Implement new functions (15 changes)\n- Extend existing types with new fields (50 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n- Modify database queries (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit d98ffdfb:\nFiles to modify:\n\n\n**lib.rs**\n  Add:\n    - mod: pub::revenue_recovery_data_backfill\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::fmt\n    - function: private::error_response\n    - function: pub::validate_and_get_records_with_errors\n    - struct: pub::RevenueRecoveryBackfillRequest\n    - struct: pub::RevenueRecoveryDataBackfillResponse\n    - struct: pub::CsvParsingResult\n    - struct: pub::CsvParsingError\n    - struct: pub::ComprehensiveCardData\n    - struct: pub::BackfillQuery\n    - struct: pub::RevenueRecoveryDataBackfillForm\n    - enum: pub::BackfillError\n    - impl: impl ApiEventMetric for RevenueRecoveryDataBackfillResponse\n    - impl: impl ApiEventMetric for CsvParsingResult\n    - impl: impl ApiEventMetric for CsvParsingError\n    - impl: impl std::fmt::Display for BackfillError\n    - impl: impl std::error::Error for BackfillError\n    - impl: impl ResponseError for BackfillError\n    - impl: impl RevenueRecoveryDataBackfillForm\n\n**core.rs**\n  Add:\n    - mod: pub::revenue_recovery_data_backfill\n\n**types.rs**\n  Remove:\n    - function: private::create_calculate_workflow_tracking_data\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::fmt\n    - function: private::error_response\n    - function: pub::validate_and_get_records_with_errors\n    - struct: pub::RevenueRecoveryBackfillRequest\n    - struct: pub::RevenueRecoveryDataBackfillResponse\n    - struct: pub::CsvParsingResult\n    - struct: pub::CsvParsingError\n    - struct: pub::ComprehensiveCardData\n    - struct: pub::BackfillQuery\n    - struct: pub::RevenueRecoveryDataBackfillForm\n    - enum: pub::BackfillError\n    - impl: impl ApiEventMetric for RevenueRecoveryDataBackfillResponse\n    - impl: impl ApiEventMetric for CsvParsingResult\n    - impl: impl ApiEventMetric for CsvParsingError\n    - impl: impl std::fmt::Display for BackfillError\n    - impl: impl std::error::Error for BackfillError\n    - impl: impl ResponseError for BackfillError\n    - impl: impl RevenueRecoveryDataBackfillForm\n\n**lib.rs**\n  Add:\n    - mod: pub::revenue_recovery_data_backfill\n\n**routes.rs**\n  Add:\n    - mod: pub::revenue_recovery_data_backfill\n\n**app.rs**\n  Add:\n    - function: pub::server\n    - struct: pub::RecoveryDataBackfill\n    - impl: impl RecoveryDataBackfill\n\n**lock_utils.rs**\n  Modify existing code\n\n**revenue_recovery_data_backfill.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - function: private::fmt\n    - function: private::error_response\n    - function: pub::validate_and_get_records_with_errors\n    - struct: pub::RevenueRecoveryBackfillRequest\n    - struct: pub::RevenueRecoveryDataBackfillResponse\n    - struct: pub::CsvParsingResult\n    - struct: pub::CsvParsingError\n    - struct: pub::ComprehensiveCardData\n    - struct: pub::BackfillQuery\n    - struct: pub::RevenueRecoveryDataBackfillForm\n    - enum: pub::BackfillError\n    - impl: impl ApiEventMetric for RevenueRecoveryDataBackfillResponse\n    - impl: impl ApiEventMetric for CsvParsingResult\n    - impl: impl ApiEventMetric for CsvParsingError\n    - impl: impl std::fmt::Display for BackfillError\n    - impl: impl std::error::Error for BackfillError\n    - impl: impl ResponseError for BackfillError\n    - impl: impl RevenueRecoveryDataBackfillForm\n\n**revenue_recovery_redis_operation.rs**\n  Add:\n    - function: pub::update_redis_token_with_comprehensive_card_data\n\n**types.rs**\n  Remove:\n    - function: private::create_calculate_workflow_tracking_data", "metadata": {"pr_number": 9233, "pr_title": "feat(revenue_recovery): add support for updating additional card info data from csv to redis", "merged_at": "2025-09-18T11:31:08Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/Cargo.toml", "crates/api_models/src/lib.rs", "crates/api_models/src/revenue_recovery_data_backfill.rs"], "core_business": ["crates/router/src/core.rs", "crates/router/src/core/revenue_recovery/types.rs", "crates/router/src/core/revenue_recovery_data_backfill.rs"], "types": ["crates/router/src/types/storage/revenue_recovery_redis_operation.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/router/src/routes/lock_utils.rs"], "other": ["Cargo.lock", "crates/router/src/lib.rs", "crates/router/src/routes.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/revenue_recovery_data_backfill.rs"]}, "change_types": {"structs_added": 8, "functions_added": 15, "enums_added": 1, "fields_added": 50, "imports_added": 24, "conditionals_added": 2, "database_queries": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nadd proxy card as a valid payment method subtype for cards", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/payment_methods.rs`", "metadata": {"pr_number": 9136, "pr_title": "fix(payment_method): add validation for proxy card details", "merged_at": "2025-09-01T15:28:44Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "card"]}, "hierarchy": {"api_models": ["crates/api_models/src/payment_methods.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nPassing shopperReference as \"Moto\" if paymentChannel is being sent as Moto", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`", "metadata": {"pr_number": 9134, "pr_title": "feat(connector): [ADYEN] Add Support for MOTO Payments", "merged_at": "2025-09-03T13:23:03Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Introduce **Subscriptions** as a first-class entity in the router.  \r\nThis PR adds a `subscription` table, Diesel models, storage interfaces, and query helpers to **create**, **fetch**, and **update** subscription entries keyed by `(merchant_id, customer_id, subscription_id)`.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/lib.rs`\n   - `crates/diesel_models/src/query.rs`\n   - `crates/diesel_models/src/query/subscription.rs`\n   - ... and 3 more files\n\n**2. Type Definitions**\n   - `crates/router/src/types/storage.rs`\n   - `crates/router/src/types/storage/subscription.rs`\n\n**3. Other**\n   - `crates/router/src/db.rs`\n   - `crates/router/src/db/subscription.rs`\n   - `migrations/2025-08-21-110802_add_subcription_table/down.sql`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (3 changes)\n- Implement new functions (17 changes)\n- Extend existing types with new fields (72 changes)\n- Modify database queries (4 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 144f3852:\nFiles to modify:\n\n\n**lib.rs**\n  Add:\n    - mod: pub::subscription\n\n**query.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_merchant_id_subscription_id\n    - function: pub::update_subscription_entry\n    - impl: impl SubscriptionNew\n    - impl: impl Subscription\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_merchant_id_subscription_id\n    - function: pub::update_subscription_entry\n    - impl: impl SubscriptionNew\n    - impl: impl Subscription\n\n**db.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_merchant_id_subscription_id\n    - function: pub::update_subscription_entry\n    - impl: impl SubscriptionNew\n    - impl: impl Subscription\n\n**storage.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::insert\n    - function: pub::find_by_merchant_id_subscription_id\n    - function: pub::update_subscription_entry\n    - impl: impl SubscriptionNew\n    - impl: impl Subscription", "metadata": {"pr_number": 9133, "pr_title": "feat(core): add subscription table", "merged_at": "2025-09-03T13:38:39Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"database": ["crates/diesel_models/src/lib.rs", "crates/diesel_models/src/query.rs", "crates/diesel_models/src/query/subscription.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/subscription.rs"], "types": ["crates/router/src/types/storage.rs", "crates/router/src/types/storage/subscription.rs"], "other": ["crates/router/src/db.rs", "crates/router/src/db/subscription.rs", "migrations/2025-08-21-110802_add_subcription_table/down.sql", "migrations/2025-08-21-110802_add_subcription_table/up.sql"]}, "change_types": {"structs_added": 3, "functions_added": 17, "fields_added": 72, "imports_added": 17, "database_queries": 4}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "This PR updates the migration flow around card validation to skip card expiry validation for `PayPal` and `SamsungPay` - these payment methods do not have the linked card's expiry details.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/payment_methods/src/core/migration/payment_methods.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9131, "pr_title": "feat(migration): perform card validation only for allowed payment methods", "merged_at": "2025-09-03T13:04:56Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/payment_methods/src/core/migration/payment_methods.rs"]}, "change_types": {"fields_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nAdded Google Pay Predecrypt Flow", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs`\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n   - `loadtest/config/development.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - ... and 3 more files\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (2 changes)\n- Extend existing types with new fields (17 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9130, "pr_title": "feat(connector): [Checkout] Add Google Pay Predecrypt Flow", "merged_at": "2025-09-26T08:09:57Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/checkout/transformers.rs"], "tests": ["config/deployments/integration_test.toml", "loadtest/config/development.toml"], "config": ["config/config.example.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml", "config/docker_compose.toml", "crates/router/src/configs/settings.rs"]}, "change_types": {"structs_added": 1, "functions_added": 2, "enums_added": 1, "fields_added": 17, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Integrate Paysafe connector - No 3ds Cards\r\nFlows \r\n- Payment\r\n- Psync\r\n- Capture\r\n- Void\r\n- Refund\r\n- Refund Sync", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/connector_validation.rs`\n   - `crates/router/src/core/payments.rs`\n\n**2. External Connector Integration**\n   - `crates/common_enums/src/connector_enums.rs`\n   - `crates/connector_configs/src/common_config.rs`\n   - `crates/connector_configs/src/connector.rs`\n   - ... and 10 more files\n\n**3. Type Definitions**\n   - `crates/router/src/types/api/feature_matrix.rs`\n\n**4. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Paysafe.js`\n   - `cypress-tests/cypress/e2e/configs/Payment/Utils.js`\n\n**5. Configuration Files**\n   - `config/deployments/production.toml`\n\n**6. Other**\n   - `api-reference/v1/openapi_spec_v1.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n\n**Code Patterns Applied:**\n- Define new data structures (13 changes)\n- Implement new functions (28 changes)\n- Extend existing types with new fields (571 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 439936da:\nFiles to modify:\n\n\n**connector_enums.rs**\n  Modify existing code\n\n**common_config.rs**\n  Modify existing code\n\n**connector.rs**\n  Modify existing code\n\n**paysafe.rs**\n  Remove:\n    - function: private::validate_mandate_payment\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Paysafe\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Paysafe\n  Add:\n    - function: private::build_request\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - impl: impl ConnectorIntegration<SetupMandate, SetupMandateRequestData, PaymentsResponseData> for Paysafe\n    - impl: impl api::PaymentsPreProcessing for Paysafe\n    - impl: impl ConnectorIntegration<PreProcessing, PaymentsPreProcessingData, PaymentsResponseData> for Paysafe\n    - impl: impl ConnectorIntegration<Void, PaymentsCancelData, PaymentsResponseData> for Paysafe\n\n**transformers.rs**\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::from\n    - struct: pub::PaysafeConnectorMetadataObject\n    - struct: pub::PaysafePaymentHandleRequest\n    - struct: pub::ReturnLink\n    - struct: pub::PaysafePaymentHandleResponse\n    - struct: pub::PaysafeMeta\n    - struct: pub::PaysafeCardExpiry\n    - struct: pub::PaysafeCaptureRequest\n    - struct: pub::VoidResponse\n    - struct: pub::Error\n    - struct: pub::FieldError\n    - enum: pub::LinkType\n    - enum: pub::PaysafePaymentType\n    - enum: pub::TransactionType\n    - enum: pub::PaysafePaymentHandleStatus\n    - enum: pub::PaysafeSettlementStatus\n    - enum: pub::PaysafeVoidStatus\n    - impl: impl From<(MinorUnit, T)> for PaysafeRouterData<T>\n    - impl: impl TryFrom<&Option<SecretSerdeValue>> for PaysafeConnectorMetadataObject\n    - impl: impl TryFrom<&PaysafeRouterData<&PaymentsPreProcessingRouterData>> for PaysafePaymentHandleRequest\n    - impl: impl TryFrom<\nResponseRouterData<\nF,\nPaysafePaymentHandleResponse,\nPaymentsPreProcessingData,\nPaymentsResponseData,\n>,\n> for RouterData<F, PaymentsPreProcessingData, PaymentsResponseData>\n    - impl: impl TryFrom<\nResponseRouterData<F, PaysafePaymentsResponse, PaymentsAuthorizeData, PaymentsResponseData>,\n> for RouterData<F, PaymentsAuthorizeData, PaymentsResponseData>\n    - impl: impl TryFrom<&PaysafeRouterData<&PaymentsCaptureRouterData>> for PaysafeCaptureRequest\n    - impl: impl TryFrom<ResponseRouterData<F, PaysafeSettlementResponse, T, PaymentsResponseData>> for RouterData<F, T, PaymentsResponseData>\n    - impl: impl TryFrom<&PaysafeRouterData<&PaymentsCancelRouterData>> for PaysafeCaptureRequest\n    - impl: impl From<PaysafeVoidStatus> for common_enums::AttemptStatus\n    - impl: impl amount\n\n**default_implementations.rs**\n  Modify existing code\n\n**utils.rs**\n  Add:\n    - function: private::get_payment_method_data\n\n**connector_validation.rs**\n  Modify existing code\n\n**payments.rs**\n  Modify existing code\n\n**connector_mapping.rs**\n  Modify existing code\n\n**feature_matrix.rs**\n  Modify existing code\n\n**connector_transformers.rs**\n  Modify existing code\n\n**connector_auth.rs**\n  Modify existing code", "metadata": {"pr_number": 9127, "pr_title": "feat(connector): [Paysafe] Integrate no 3ds card", "merged_at": "2025-09-08T16:13:30Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/connector_validation.rs", "crates/router/src/core/payments.rs"], "connectors": ["crates/common_enums/src/connector_enums.rs", "crates/connector_configs/src/common_config.rs", "crates/connector_configs/src/connector.rs", "crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml", "crates/hyperswitch_connectors/src/connectors/paysafe.rs", "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/utils.rs", "crates/router/src/types/api/connector_mapping.rs", "crates/router/src/types/connector_transformers.rs", "crates/test_utils/src/connector_auth.rs"], "types": ["crates/router/src/types/api/feature_matrix.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Paysafe.js", "cypress-tests/cypress/e2e/configs/Payment/Utils.js"], "config": ["config/deployments/production.toml"], "other": ["api-reference/v1/openapi_spec_v1.json", "api-reference/v2/openapi_spec_v2.json"]}, "change_types": {"structs_added": 13, "functions_added": 28, "enums_added": 6, "fields_added": 571, "imports_added": 8, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nfixes connector metadata, again.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/connector_configs/toml/development.toml`\n   - `crates/connector_configs/toml/production.toml`\n   - `crates/connector_configs/toml/sandbox.toml`", "metadata": {"pr_number": 9126, "pr_title": "fix(metadata): fix nordea metadata again", "merged_at": "2025-09-02T11:21:47Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["user", "connector"]}, "hierarchy": {"connectors": ["crates/connector_configs/toml/development.toml", "crates/connector_configs/toml/production.toml", "crates/connector_configs/toml/sandbox.toml"]}, "change_types": {}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nWhen adding the injector as a crate in connector-service, getting following \r\n```bash\r\n   Compiling injector v0.1.0 (/Users/shivansh.mathur/Desktop/VS_Code/hyperswitch/crates/injector)\r\nerror[E0433]: failed to resolve: could not find `tracing` in the list of imported crates\r\n  --> /Users/shivansh.mathur/Desktop/VS_Code/hyperswitch/crates/injector/src/injector.rs:60:5\r\n   |\r\n60 |     #[instrument(skip_all)]\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ could not find `tracing` in the list of imported crates\r\n   |\r\n   = note: this error originates in the attribute macro `instrument` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror[E0433]: failed to resolve: could not find `tracing` in the list of imported crates\r\n   --> /Users/shivansh.mathur/Desktop/VS_Code/hyperswitch/crates/injector/src/injector.rs:152:5\r\n    |\r\n152 |     #[instrument(skip_all)]\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ could not find `tracing` in the list of imported crates\r\n    |\r\n    = note: this error originates in the attribute macro `instrument` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\nerror[E0433]: failed to resolve: could not find `tracing` in the list of imported crates\r\n   --> /Users/shivansh.mathur/Desktop/VS_Code/hyperswitch/crates/injector/src/injector.rs:257:9\r\n    |\r\n257 |         #[instrument(skip_all)]\r\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ could not find `tracing` in the list of imported crates\r\n    |\r\n    = note: this error originates in the attribute macro `instrument` (in Nightly builds, run with -Z macro-backtrace for more info)\r\n\r\n```\r\n\r\n\r\nAlso some requried changes for passing on certificate and proxy url to injector from connector-service", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Type Definitions**\n   - `crates/injector/src/types.rs`\n\n**2. Configuration Files**\n   - `crates/injector/Cargo.toml`\n\n**3. Other**\n   - `Cargo.lock`\n   - `crates/injector/src/injector.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (4 changes)\n- Extend existing types with new fields (20 changes)\n- Add conditional logic for feature flags or filtering (6 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit aae1994e:\nFiles to modify:\n\n\n**injector.rs**\n  Add:\n    - function: pub::create_identity_from_certificate_and_key\n    - function: pub::create_certificate\n    - function: private::get_client_builder\n    - function: pub::create_client\n    - enum: pub::HttpClientError\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9124, "pr_title": "feat(injector): adding tracing to injector for dependency issues", "merged_at": "2025-09-01T09:29:32Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "order"]}, "hierarchy": {"types": ["crates/injector/src/types.rs"], "config": ["crates/injector/Cargo.toml"], "other": ["Cargo.lock", "crates/injector/src/injector.rs"]}, "change_types": {"functions_added": 4, "enums_added": 1, "fields_added": 20, "imports_added": 1, "conditionals_added": 6}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "## Summary", "response": "To implement this **payment** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/lib.rs`\n   - `crates/api_models/src/subscription.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/query/subscription.rs`\n   - `crates/diesel_models/src/schema.rs`\n   - `crates/diesel_models/src/schema_v2.rs`\n   - ... and 1 more files\n\n**3. Core Business Logic**\n   - `crates/router/src/core.rs`\n   - `crates/router/src/core/subscription.rs`\n\n**4. Type Definitions**\n   - `crates/router_env/src/logger/types.rs`\n\n**5. Utils**\n   - `crates/common_utils/src/events.rs`\n   - `crates/common_utils/src/id_type.rs`\n   - `crates/common_utils/src/id_type/subscription.rs`\n   - ... and 1 more files\n\n**6. Other**\n   - `crates/common_enums/src/enums.rs`\n   - `crates/router/src/lib.rs`\n   - `crates/router/src/routes.rs`\n   - ... and 5 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (6 changes)\n- Extend existing types with new fields (45 changes)\n- Modify database queries (6 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit d32b4619:\nFiles to modify:\n\n\n**lib.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**enums.rs**\n  Modify existing code\n\n**events.rs**\n  Modify existing code\n\n**id_type.rs**\n  Add:\n    - mod: private::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**schema.rs**\n  Modify existing code\n\n**schema_v2.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**core.rs**\n  Add:\n    - mod: pub::subscription\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**lib.rs**\n  Add:\n    - mod: pub::subscription\n\n**routes.rs**\n  Add:\n    - mod: pub::subscription\n\n**app.rs**\n  Add:\n    - function: pub::server\n    - struct: pub::Subscription\n    - impl: impl Subscription\n\n**lock_utils.rs**\n  Modify existing code\n\n**subscription.rs**\n  Add:\n    - function: pub::new\n    - struct: pub::CreateSubscriptionRequest\n    - struct: pub::CreateSubscriptionResponse\n    - enum: pub::SubscriptionStatus\n    - impl: impl CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionResponse\n    - impl: impl ApiEventMetric for CreateSubscriptionRequest\n\n**permissions.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9123, "pr_title": "feat(subscriptions): add route for creating subscription intent", "merged_at": "2025-09-18T12:36:03Z", "intent": {"feature_type": "payment", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/lib.rs", "crates/api_models/src/subscription.rs"], "database": ["crates/diesel_models/src/query/subscription.rs", "crates/diesel_models/src/schema.rs", "crates/diesel_models/src/schema_v2.rs", "crates/diesel_models/src/subscription.rs"], "core_business": ["crates/router/src/core.rs", "crates/router/src/core/subscription.rs"], "types": ["crates/router_env/src/logger/types.rs"], "utils": ["crates/common_utils/src/events.rs", "crates/common_utils/src/id_type.rs", "crates/common_utils/src/id_type/subscription.rs", "crates/router/src/routes/lock_utils.rs"], "other": ["crates/common_enums/src/enums.rs", "crates/router/src/lib.rs", "crates/router/src/routes.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/subscription.rs", "crates/router/src/services/authorization/permissions.rs", "migrations/2025-09-17-165505_update_subscription_table_with_merchant_ref_id/down.sql", "migrations/2025-09-17-165505_update_subscription_table_with_merchant_ref_id/up.sql"]}, "change_types": {"structs_added": 4, "functions_added": 6, "enums_added": 1, "fields_added": 45, "imports_added": 20, "database_queries": 6}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\n- Add `PreAuthenticate`, `Authenticate` and `PostAuthenticate` connector integration and implement them for cybersource", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n   - `crates/hyperswitch_domain_models/src/types.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/cybersource.rs`\n   - `crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs`\n   - `crates/hyperswitch_connectors/src/default_implementations.rs`\n\n**3. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n\n**4. Other**\n   - `crates/hyperswitch_interfaces/src/api/payments.rs`\n   - `crates/hyperswitch_interfaces/src/api/payments_v2.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (7 changes)\n- Implement new functions (40 changes)\n- Extend existing types with new fields (275 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 6b880e45:\nFiles to modify:\n\n\n**cybersource.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_5xx_error_response\n    - impl: impl api::PaymentsPreAuthenticate for Cybersource\n    - impl: impl api::PaymentsPostAuthenticate for Cybersource\n    - impl: impl api::PaymentsAuthenticate for Cybersource\n    - impl: impl ConnectorIntegration<PreAuthenticate, PaymentsPreAuthenticateData, PaymentsResponseData> for Cybersource\n    - impl: impl ConnectorIntegration<Authenticate, PaymentsAuthenticateData, PaymentsResponseData> for Cybersource\n    - impl: impl ConnectorIntegration<PostAuthenticate, PaymentsPostAuthenticateData, PaymentsResponseData> for Cybersource\n    - impl: impl ConnectorIntegration<Authorize, PaymentsAuthorizeData, PaymentsResponseData> for Cybersource\n\n**transformers.rs**\n  Remove:\n    - struct: pub::CybersourceConsumerAuthValidateResponse\n    - struct: pub::CybersourceThreeDSMetadata\n    - struct: pub::CybersourceConsumerAuthInformationEnrollmentResponse\n    - struct: pub::ClientAuthCheckInfoResponse\n    - enum: pub::CybersourceAuthEnrollmentStatus\n    - enum: pub::CybersourcePreProcessingResponse\n    - impl: impl TryFrom<&CybersourceRouterData<&PaymentsCompleteAuthorizeRouterData>> for [serde(rename_all = \"SCREAMING_SNAKE_CASE\")]\n  Add:\n    - function: private::from\n    - function: private::try_from\n    - impl: impl From<&CybersourceRouterData<&PaymentsPreAuthenticateRouterData>> for ClientReferenceInformation\n    - impl: impl TryFrom<&CybersourceRouterData<&PaymentsPreAuthenticateRouterData>> for CybersourceAuthSetupRequest\n    - impl: impl TryFrom<&CybersourceRouterData<&PaymentsAuthenticateRouterData>> for (item.router_data.connector_request_reference_id.clone())\n    - impl: impl TryFrom<&CybersourceRouterData<&PaymentsPostAuthenticateRouterData>> for (item.router_data.connector_request_reference_id.clone())\n\n**default_implementations.rs**\n  Modify existing code\n\n**router_request_types.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - function: private::try_from\n    - struct: pub::PaymentsPreAuthenticateData\n    - struct: pub::PaymentsAuthenticateData\n    - struct: pub::PaymentsPostAuthenticateData\n    - impl: impl TryFrom<PaymentsAuthorizeData> for PaymentsPreAuthenticateData\n    - impl: impl TryFrom<PaymentsAuthorizeData> for PaymentsAuthenticateData\n    - impl: impl TryFrom<PaymentsAuthorizeData> for PaymentsPostAuthenticateData\n\n**types.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - trait: pub::PaymentsPreAuthenticate\n    - trait: pub::PaymentsAuthenticate\n    - trait: pub::PaymentsPostAuthenticate\n\n**payments_v2.rs**\n  Add:\n    - trait: pub::PaymentsPreAuthenticateV2\n    - trait: pub::PaymentsAuthenticateV2\n    - trait: pub::PaymentsPostAuthenticateV2\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9117, "pr_title": "feat(router): Add Connector changes for 3ds (v2)", "merged_at": "2025-09-11T14:33:57Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["connector"]}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_request_types.rs", "crates/hyperswitch_domain_models/src/types.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/cybersource.rs", "crates/hyperswitch_connectors/src/connectors/cybersource/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs"], "other": ["crates/hyperswitch_interfaces/src/api/payments.rs", "crates/hyperswitch_interfaces/src/api/payments_v2.rs"]}, "change_types": {"structs_added": 7, "functions_added": 40, "enums_added": 3, "fields_added": 275, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n\r\nthis pr introduces 0 dollar mandate (setup mandate) for payload connector.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/payload.rs`\n   - `crates/hyperswitch_connectors/src/connectors/payload/transformers.rs`\n\n**2. Tests**\n   - `cypress-tests/cypress/e2e/configs/Payment/Payload.js`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (9 changes)\n- Extend existing types with new fields (59 changes)\n- Add conditional logic for feature flags or filtering (1 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 4e33e974:\nFiles to modify:\n\n\n**payload.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_content_type\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n\n**transformers.rs**\n  Remove:\n    - impl: impl &item.data.request\n  Add:\n    - function: private::build_payload_cards_request_data\n    - function: private::try_from\n    - impl: impl TryFrom<&SetupMandateRouterData> for requests::PayloadCardsRequestData\n    - impl: impl &item", "metadata": {"pr_number": 9110, "pr_title": "feat(connector): introduce setup mandate flow for payload", "merged_at": "2025-09-01T11:39:16Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/payload.rs", "crates/hyperswitch_connectors/src/connectors/payload/transformers.rs"], "tests": ["cypress-tests/cypress/e2e/configs/Payment/Payload.js"]}, "change_types": {"structs_added": 1, "functions_added": 9, "fields_added": 59, "conditionals_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- pass external vault proxy metadata to uce for injector consumption\r\n- it is passed in header as x-external-vault-metadata\r\n- base64 encoded for parsing compatibility", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/merchant_connector_account.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/flows.rs`\n   - `crates/router/src/core/payments/flows/authorize_flow.rs`\n   - ... and 2 more files\n\n**3. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n\n**4. Other**\n   - `crates/external_services/src/lib.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (2 changes)\n- Implement new functions (5 changes)\n- Extend existing types with new fields (36 changes)\n- Add conditional logic for feature flags or filtering (2 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit c02d8b9b:\nFiles to modify:\n\n\n**unified_connector_service.rs**\n  Add:\n    - struct: pub::VgsMetadata\n    - enum: pub::ExternalVaultProxyMetadata\n\n**lib.rs**\n  Modify existing code\n\n**merchant_connector_account.rs**\n  Add:\n    - struct: pub::ExternalVaultConnectorMetadata\n\n**payments.rs**\n  Modify existing code\n\n**flows.rs**\n  Add:\n    - function: private::call_unified_connector_service_with_external_vault_proxy\n\n**authorize_flow.rs**\n  Modify existing code\n\n**external_proxy_flow.rs**\n  Modify existing code\n\n**unified_connector_service.rs**\n  Add:\n    - struct: pub::VgsMetadata\n    - enum: pub::ExternalVaultProxyMetadata", "metadata": {"pr_number": 9108, "pr_title": "feat(core): [proxy payments] send external vault proxy metadata to UCS", "merged_at": "2025-09-01T11:21:32Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/merchant_connector_account.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/flows.rs", "crates/router/src/core/payments/flows/authorize_flow.rs", "crates/router/src/core/payments/flows/external_proxy_flow.rs", "crates/router/src/core/unified_connector_service.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs"], "other": ["crates/external_services/src/lib.rs"]}, "change_types": {"structs_added": 2, "functions_added": 5, "enums_added": 1, "fields_added": 36, "imports_added": 4, "conditionals_added": 2}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\nAdd configs for calculate job", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/revenue_recovery.rs`\n   - `crates/router/src/core/revenue_recovery/types.rs`\n\n**2. Type Definitions**\n   - `crates/router/src/types/storage/revenue_recovery.rs`\n\n**3. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/development.toml`\n   - ... and 1 more files\n\n**4. Other**\n   - `crates/router/src/workflows/revenue_recovery.rs`\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (9 changes)", "metadata": {"pr_number": 9106, "pr_title": "refactor(revenue_recovery): Add configs for calculate job", "merged_at": "2025-08-29T15:31:36Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"core_business": ["crates/router/src/core/revenue_recovery.rs", "crates/router/src/core/revenue_recovery/types.rs"], "types": ["crates/router/src/types/storage/revenue_recovery.rs"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/development.toml", "config/docker_compose.toml"], "other": ["crates/router/src/workflows/revenue_recovery.rs"]}, "change_types": {"fields_added": 9}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "Added comprehensive XSS (Cross-Site Scripting) and SQLi protection to dashboard metadata fields. Implemented a new `SafeString` type wrapper that validates input against XSS attacks during JSON deserialization.\r\n\r\n**Dependencies Added**\r\n- `ammonia = \"3.3\"` - HTML sanitization library\r\n- `urlencoding = \"2.1.3\"` - URL decoding for encoded payloads", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/user/dashboard_metadata.rs`\n\n**2. Core Business Logic**\n   - `crates/router/src/core/user/dashboard_metadata.rs`\n\n**3. Type Definitions**\n   - `crates/common_types/src/primitive_wrappers.rs`\n   - `crates/router/src/services/email/types.rs`\n\n**4. Utils**\n   - `crates/common_utils/Cargo.toml`\n   - `crates/common_utils/src/validation.rs`\n   - `crates/router/src/utils/user/dashboard_metadata.rs`\n\n**5. Other**\n   - `Cargo.lock`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (28 changes)\n- Extend existing types with new fields (45 changes)\n- Add conditional logic for feature flags or filtering (6 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit cba489ff:\nFiles to modify:\n\n\n**dashboard_metadata.rs**\n  Modify existing code\n\n**primitive_wrappers.rs**\n  Add:\n    - function: pub::new\n    - function: pub::from_string_slice\n    - function: pub::as_str\n    - function: pub::into_inner\n    - function: pub::is_empty\n    - function: pub::len\n    - function: private::deref\n    - function: private::serialize\n    - function: private::deserialize\n    - function: private::to_sql\n    - function: private::from_sql\n    - struct: pub::SafeString\n    - impl: impl SafeString\n    - impl: impl Deref for SafeString\n    - impl: impl Serialize for SafeString\n    - impl: impl Deserialize<'de> for SafeString\n    - impl: impl SerializableSecret for SafeString\n    - impl: impl diesel::serialize::ToSql<diesel::sql_types::Text, DB> for SafeString\n    - impl: impl diesel::deserialize::FromSql<diesel::sql_types::Text, DB> for SafeString\n    - mod: private::safe_string\n\n**validation.rs**\n  Add:\n    - function: pub::contains_potential_xss_or_sqli\n    - function: private::detects_basic_script_tags\n    - function: private::detects_event_handlers\n    - function: private::detects_data_url_payload\n    - function: private::detects_iframe_javascript_src\n    - function: private::detects_svg_with_script\n    - function: private::detects_object_with_js\n    - function: private::detects_mixed_case_tags\n    - function: private::detects_embedded_script_in_text\n    - function: private::detects_math_with_script\n    - function: private::detects_basic_sql_tautology\n    - function: private::detects_time_based_sqli\n    - function: private::detects_percent_encoded_sqli\n    - function: private::detects_benign_html_as_suspicious\n    - function: private::allows_legitimate_plain_text\n    - function: private::allows_normal_url\n    - function: private::allows_percent_char_without_encoding\n\n**dashboard_metadata.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code\n\n**dashboard_metadata.rs**\n  Modify existing code", "metadata": {"pr_number": 9104, "pr_title": "feat(security): add XSS and sqli validation for dashboard metadata fields", "merged_at": "2025-10-01T08:31:43Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": []}, "hierarchy": {"api_models": ["crates/api_models/src/user/dashboard_metadata.rs"], "core_business": ["crates/router/src/core/user/dashboard_metadata.rs"], "types": ["crates/common_types/src/primitive_wrappers.rs", "crates/router/src/services/email/types.rs"], "utils": ["crates/common_utils/Cargo.toml", "crates/common_utils/src/validation.rs", "crates/router/src/utils/user/dashboard_metadata.rs"], "other": ["Cargo.lock"]}, "change_types": {"structs_added": 1, "functions_added": 28, "fields_added": 45, "imports_added": 8, "conditionals_added": 6}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n- Added `check-gift-card-balance` API\r\n- Added `GiftCardBalanceCheck` flow for connectors and implemented it for Adyen\r\n- Updated PML flow to store gift card enabled MCA in redis\r\n\r\n<img width=\"2314\" height=\"1286\" alt=\"image\" src=\"https://github.com/user-attachments/assets/50087048-1ac5-459f-84ee-d6af7cdbfcae\" />", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/events/payment.rs`\n   - `crates/api_models/src/payments.rs`\n\n**2. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs`\n   - `crates/hyperswitch_domain_models/src/router_flow_types/payments.rs`\n   - `crates/hyperswitch_domain_models/src/router_request_types.rs`\n   - ... and 2 more files\n\n**3. Core Business Logic**\n   - `crates/router/src/core.rs`\n   - `crates/router/src/core/gift_card.rs`\n   - `crates/router/src/core/payments/payment_methods.rs`\n\n**4. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/adyen.rs`\n   - `crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs`\n   - `crates/hyperswitch_connectors/src/default_implementations.rs`\n   - ... and 1 more files\n\n**5. Type Definitions**\n   - `crates/hyperswitch_interfaces/src/types.rs`\n   - `crates/router_env/src/logger/types.rs`\n\n**6. Utils**\n   - `crates/common_utils/src/id_type/global_id/payment.rs`\n   - `crates/router/src/routes/lock_utils.rs`\n\n**7. Other**\n   - `api-reference/docs.json`\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `api-reference/v2/payments/payments--gift-card-balance-check.mdx`\n   - ... and 8 more files\n\n**Code Patterns Applied:**\n- Define new data structures (6 changes)\n- Implement new functions (18 changes)\n- Extend existing types with new fields (77 changes)\n- Add conditional logic for feature flags or filtering (3 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 21316596:\nFiles to modify:\n\n\n**payment.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for payments::GiftCardBalanceCheckResponse\n\n**payments.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponse\n    - struct: pub::PaymentsGiftCardBalanceCheckRequest\n\n**payment.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for payments::GiftCardBalanceCheckResponse\n\n**adyen.rs**\n  Add:\n    - function: private::get_headers\n    - function: private::get_url\n    - function: private::get_request_body\n    - function: private::build_request\n    - function: private::handle_response\n    - function: private::get_error_response\n    - function: private::get_5xx_error_response\n    - impl: impl api::PaymentsGiftCardBalanceCheck for Adyen\n    - impl: impl ConnectorIntegration<\nGiftCardBalanceCheck,\nGiftCardBalanceCheckRequestData,\nGiftCardBalanceCheckResponseData,\n> for Adyen\n\n**transformers.rs**\n  Add:\n    - function: private::try_from\n    - function: private::try_from\n    - impl: impl TryFrom<&PaymentsGiftCardBalanceCheckRouterData> for AdyenBalanceRequest<'_>\n    - impl: impl TryFrom<\nResponseRouterData<\nGiftCardBalanceCheck,\nAdyenBalanceResponse,\nGiftCardBalanceCheckRequestData,\nGiftCardBalanceCheckResponseData,\n>,\n> for RouterData<\nGiftCardBalanceCheck,\nGiftCardBalanceCheckRequestData,\nGiftCardBalanceCheckResponseData,\n>\n\n**default_implementations.rs**\n  Add:\n    - impl: impl PaymentsGiftCardBalanceCheck for connectors::DummyConnector<T>\n    - impl: impl ConnectorIntegration<\nGiftCardBalanceCheck,\nGiftCardBalanceCheckRequestData,\nGiftCardBalanceCheckResponseData,\n> for connectors::DummyConnector<T>\n\n**default_implementations_v2.rs**\n  Add:\n    - impl: impl PaymentsGiftCardBalanceCheckV2 for $connector\n    - impl: impl ConnectorIntegrationV2<\nGiftCardBalanceCheck,\nGiftCardBalanceCheckFlowData,\nGiftCardBalanceCheckRequestData,\nGiftCardBalanceCheckResponseData,\n> for $connector\n\n**flow_common_types.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckFlowData\n\n**payments.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponse\n    - struct: pub::PaymentsGiftCardBalanceCheckRequest\n\n**router_request_types.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckRequestData\n\n**router_response_types.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponseData\n\n**types.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponse\n    - struct: pub::PaymentsGiftCardBalanceCheckRequest\n\n**payments_v2.rs**\n  Add:\n    - trait: pub::PaymentsGiftCardBalanceCheckV2\n\n**conversion_impls.rs**\n  Add:\n    - function: private::from_old_router_data\n    - function: private::to_old_router_data\n    - impl: impl RouterDataConversion<T, Req, Resp> for GiftCardBalanceCheckFlowData\n\n**types.rs**\n  Modify existing code\n\n**openapi_v2.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponse\n    - struct: pub::PaymentsGiftCardBalanceCheckRequest\n\n**core.rs**\n  Add:\n    - mod: pub::gift_card\n\n**gift_card.rs**\n  Add:\n    - function: pub::payments_check_gift_card_balance_core\n\n**payment_methods.rs**\n  Add:\n    - function: private::store_gift_card_mca_in_redis\n\n**app.rs**\n  Modify existing code\n\n**lock_utils.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::GiftCardBalanceCheckResponse\n    - struct: pub::PaymentsGiftCardBalanceCheckRequest\n\n**api.rs**\n  Modify existing code\n\n**types.rs**\n  Modify existing code", "metadata": {"pr_number": 9102, "pr_title": "feat(router): Add gift card balance check endpoint (v2)", "merged_at": "2025-09-17T07:50:47Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["payment", "user", "connector"]}, "hierarchy": {"api_models": ["crates/api_models/src/events/payment.rs", "crates/api_models/src/payments.rs"], "domain": ["crates/hyperswitch_domain_models/src/router_data_v2/flow_common_types.rs", "crates/hyperswitch_domain_models/src/router_flow_types/payments.rs", "crates/hyperswitch_domain_models/src/router_request_types.rs", "crates/hyperswitch_domain_models/src/router_response_types.rs", "crates/hyperswitch_domain_models/src/types.rs"], "core_business": ["crates/router/src/core.rs", "crates/router/src/core/gift_card.rs", "crates/router/src/core/payments/payment_methods.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/adyen.rs", "crates/hyperswitch_connectors/src/connectors/adyen/transformers.rs", "crates/hyperswitch_connectors/src/default_implementations.rs", "crates/hyperswitch_connectors/src/default_implementations_v2.rs"], "types": ["crates/hyperswitch_interfaces/src/types.rs", "crates/router_env/src/logger/types.rs"], "utils": ["crates/common_utils/src/id_type/global_id/payment.rs", "crates/router/src/routes/lock_utils.rs"], "other": ["api-reference/docs.json", "api-reference/v2/openapi_spec_v2.json", "api-reference/v2/payments/payments--gift-card-balance-check.mdx", "crates/hyperswitch_interfaces/src/api/payments.rs", "crates/hyperswitch_interfaces/src/api/payments_v2.rs", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/openapi/src/openapi_v2.rs", "crates/openapi/src/routes/payments.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs", "crates/router/src/services/api.rs"]}, "change_types": {"structs_added": 6, "functions_added": 18, "fields_added": 77, "imports_added": 12, "conditionals_added": 3}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd RSA SHA 256 source verification for webhook in Wise", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/wise.rs`\n\n**Code Patterns Applied:**\n- Implement new functions (4 changes)\n- Extend existing types with new fields (4 changes)", "metadata": {"pr_number": 9100, "pr_title": "feat(connector): [Wise] Add webhook source verification", "merged_at": "2025-08-29T13:57:04Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["merchant", "user", "webhook"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/wise.rs"]}, "change_types": {"functions_added": 4, "fields_added": 4}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nCashtocode does not support PSync.\r\n\r\nWhen a PSync call is processed via Hyperswitch, the RouterData remains unchanged (payment status is not modified).\r\n\r\nHowever, when the same PSync call goes via UCS, UCS returns an error response.\r\n\r\nThis causes inconsistent behavior between Hyperswitch and UCS flows.\r\n\r\nTo replicate Hyperswitch behavior when authorize was done through UCS:\r\n\r\n- Introduced configuration \"ucs_psync_disabled_connectors\" under grpc_client.unified_connector_service.\r\n- During call_unified_connector_service, we check if the connector is listed in \"ucs_psync_disabled_connectors\". If the connector is present, UCS PSync call is skipped, and unmodified RouterData is returned (same as Hyperswitch behavior).", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. Core Business Logic**\n   - `crates/router/src/core/payments/flows/psync_flow.rs`\n\n**2. External Connector Integration**\n   - `crates/external_services/src/grpc_client/unified_connector_service.rs`\n\n**3. Tests**\n   - `config/deployments/integration_test.toml`\n\n**4. Configuration Files**\n   - `config/config.example.toml`\n   - `config/deployments/env_specific.toml`\n   - `config/deployments/production.toml`\n   - ... and 2 more files\n\n**Code Patterns Applied:**\n- Extend existing types with new fields (1 changes)\n- Add conditional logic for feature flags or filtering (1 changes)", "metadata": {"pr_number": 9093, "pr_title": "fix: Disable UCS PSync call for Cashtocode", "merged_at": "2025-09-02T14:46:21Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"core_business": ["crates/router/src/core/payments/flows/psync_flow.rs"], "connectors": ["crates/external_services/src/grpc_client/unified_connector_service.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/config.example.toml", "config/deployments/env_specific.toml", "config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"]}, "change_types": {"fields_added": 1, "imports_added": 1, "conditionals_added": 1}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nExtend stripe integration to support extended authorization\r\n\r\n\r\n## How did you test it?\r\n<!--\r\nDid you write an integration/unit/API test to verify the code changes?\r\nOr did you test this change manually (provide relevant screenshots)?\r\n-->\r\nWe cannot test this feature  until it is enabled by stripe\r\n\r\n\r\nSanity Test - cypress ran on the PR \r\n\r\n\r\n## Checklist\r\n<!-- Put an `x` in the boxes that apply -->\r\n\r\n- [x] I formatted the code `cargo +nightly fmt --all`\r\n- [x] I addressed lints thrown by `cargo clippy`\r\n- [x] I reviewed the submitted code\r\n- [ ] I added unit tests for my changes where possible", "response": "To implement this **authentication** feature, you'll need to modify these architectural layers:\n\n\n**1. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/router_data.rs`\n\n**2. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/stripe/transformers.rs`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (4 changes)\n- Extend existing types with new fields (17 changes)\n- Add conditional logic for feature flags or filtering (2 changes)", "metadata": {"pr_number": 9084, "pr_title": "feat(connectors): [Stripe] add extended authorization for cards", "merged_at": "2025-08-29T11:12:57Z", "intent": {"feature_type": "authentication", "action": "add_feature", "entities": []}, "hierarchy": {"domain": ["crates/hyperswitch_domain_models/src/router_data.rs"], "connectors": ["crates/hyperswitch_connectors/src/connectors/stripe/transformers.rs"]}, "change_types": {"structs_added": 1, "functions_added": 4, "enums_added": 2, "fields_added": 17, "imports_added": 1, "conditionals_added": 2}, "has_identifier_data": false, "commits_matched": 0, "match_method": "none"}}
{"prompt": "<!-- Describe your changes in detail -->\r\nAdd V2 payments_cancel flow by endpoint `{{baseUrl}}/v2/payments/:payment_id/cancel`.A payment can be cancelled when the status is RequiresCapture, PartiallyAuthorizedAndRequiresCapture, or PartiallyCapturedAndCapturable.", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. API Request/Response Models**\n   - `crates/api_models/src/events/payment.rs`\n   - `crates/api_models/src/payments.rs`\n\n**2. Database Layer (Queries & Schema)**\n   - `crates/diesel_models/src/payment_attempt.rs`\n\n**3. Domain Models (Business Logic Types)**\n   - `crates/hyperswitch_domain_models/src/payments.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_attempt.rs`\n   - `crates/hyperswitch_domain_models/src/payments/payment_intent.rs`\n   - ... and 1 more files\n\n**4. Core Business Logic**\n   - `crates/router/src/core/payments.rs`\n   - `crates/router/src/core/payments/flows/cancel_flow.rs`\n   - `crates/router/src/core/payments/operations.rs`\n   - ... and 3 more files\n\n**5. Other**\n   - `api-reference/v2/openapi_spec_v2.json`\n   - `crates/hyperswitch_interfaces/src/conversion_impls.rs`\n   - `crates/router/src/routes/app.rs`\n   - ... and 1 more files\n\n**Code Patterns Applied:**\n- Define new data structures (4 changes)\n- Implement new functions (101 changes)\n- Extend existing types with new fields (266 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit 617b3faa:\nFiles to modify:\n\n\n**payment.rs**\n  Add:\n    - function: private::get_api_event_type\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for payments::PaymentsCancelRequest\n    - impl: impl ApiEventMetric for payments::PaymentsCancelResponse\n\n**payments.rs**\n  Add:\n    - struct: pub::PaymentsCancelRequest\n    - struct: pub::PaymentsCancelResponse\n\n**payment_attempt.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::PaymentsCancelRequest\n    - struct: pub::PaymentsCancelResponse\n\n**payment_attempt.rs**\n  Modify existing code\n\n**payment_intent.rs**\n  Modify existing code\n\n**router_data.rs**\n  Add:\n    - function: private::get_payment_intent_update\n    - function: private::get_payment_attempt_update\n    - function: private::get_amount_capturable\n    - function: private::get_captured_amount\n    - function: private::get_attempt_status_for_db_update\n    - impl: impl TrackerPostUpdateObjects<\nrouter_flow_types::Void,\nrouter_request_types::PaymentsCancelData,\npayments::PaymentCancelData<router_flow_types::Void>,\n> for RouterData<\nrouter_flow_types::Void,\nrouter_request_types::PaymentsCancelData,\nrouter_response_types::PaymentsResponseData,\n>\n\n**conversion_impls.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::PaymentsCancelRequest\n    - struct: pub::PaymentsCancelResponse\n\n**cancel_flow.rs**\n  Remove:\n    - function: private::construct_router_data\n  Add:\n    - function: private::construct_router_data\n    - impl: impl ConstructFlowSpecificData<api::Void, types::PaymentsCancelData, types::PaymentsResponseData> for hyperswitch_domain_models::payments::PaymentCancelData<api::Void>\n\n**operations.rs**\n  Add:\n    - mod: pub::payment_cancel_v2\n\n**payment_cancel_v2.rs**\n  Add:\n    - function: private::to_validate_request\n    - function: private::to_get_tracker\n    - function: private::to_domain\n    - function: private::to_update_tracker\n    - function: private::to_validate_request\n    - function: private::to_get_tracker\n    - function: private::to_domain\n    - function: private::to_update_tracker\n    - function: private::validate_request\n    - function: private::get_trackers\n    - function: private::update_trackers\n    - function: private::get_customer_details\n    - function: private::make_pm_data\n    - function: private::perform_routing\n    - function: private::validate_status_for_operation\n    - struct: pub::PaymentsCancel\n    - impl: impl Operation<F, api::PaymentsCancelRequest> for &PaymentsCancel\n    - impl: impl Operation<F, api::PaymentsCancelRequest> for PaymentsCancel\n    - impl: impl ValidateRequest<\nF,\napi::PaymentsCancelRequest,\nhyperswitch_domain_models::payments::PaymentCancelData<F>,\n> for PaymentsCancel\n    - impl: impl GetTracker<\nF,\nhyperswitch_domain_models::payments::PaymentCancelData<F>,\napi::PaymentsCancelRequest,\n> for PaymentsCancel\n    - impl: impl UpdateTracker<\nF,\nhyperswitch_domain_models::payments::PaymentCancelData<F>,\napi::PaymentsCancelRequest,\n> for PaymentsCancel\n    - impl: impl Domain<F, api::PaymentsCancelRequest, hyperswitch_domain_models::payments::PaymentCancelData<F>> for PaymentsCancel\n    - impl: impl ValidateStatusForOperation for PaymentsCancel\n\n**payment_response.rs**\n  Add:\n    - function: private::to_post_update_tracker\n    - function: private::update_tracker\n    - impl: impl Operation<F, types::PaymentsCancelData> for PaymentResponse\n    - impl: impl PostUpdateTracker<\nF,\nhyperswitch_domain_models::payments::PaymentCancelData<F>,\ntypes::PaymentsCancelData,\n> for PaymentResponse\n\n**transformers.rs**\n  Add:\n    - function: pub::construct_cancel_router_data_v2\n    - function: pub::construct_router_data_for_cancel\n    - function: private::generate_response\n    - impl: impl GenerateResponse<api_models::payments::PaymentsCancelResponse> for hyperswitch_domain_models::payments::PaymentCancelData<F>\n\n**app.rs**\n  Modify existing code\n\n**payments.rs**\n  Add:\n    - struct: pub::PaymentsCancelRequest\n    - struct: pub::PaymentsCancelResponse", "metadata": {"pr_number": 9083, "pr_title": "feat(router): Add v2 payment cancellation flow", "merged_at": "2025-09-22T18:39:33Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"api_models": ["crates/api_models/src/events/payment.rs", "crates/api_models/src/payments.rs"], "database": ["crates/diesel_models/src/payment_attempt.rs"], "domain": ["crates/hyperswitch_domain_models/src/payments.rs", "crates/hyperswitch_domain_models/src/payments/payment_attempt.rs", "crates/hyperswitch_domain_models/src/payments/payment_intent.rs", "crates/hyperswitch_domain_models/src/router_data.rs"], "core_business": ["crates/router/src/core/payments.rs", "crates/router/src/core/payments/flows/cancel_flow.rs", "crates/router/src/core/payments/operations.rs", "crates/router/src/core/payments/operations/payment_cancel_v2.rs", "crates/router/src/core/payments/operations/payment_response.rs", "crates/router/src/core/payments/transformers.rs"], "other": ["api-reference/v2/openapi_spec_v2.json", "crates/hyperswitch_interfaces/src/conversion_impls.rs", "crates/router/src/routes/app.rs", "crates/router/src/routes/payments.rs"]}, "change_types": {"structs_added": 4, "functions_added": 101, "fields_added": 266, "imports_added": 14}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
{"prompt": "<!-- Describe your changes in detail -->\r\n1. Add NTID proxy support for nuvei. ( NOTE: Nuvei is not responding with NTID as of now hence we cant make ntid originated flow via nuvei to other connector. We are verifying NTID originated from other connector through nuvei. )\r\n2. Extend mandate support for googlepay and applepay. ( decrypt flow only) \r\n\r\n## test", "response": "To implement this **search_filter** feature, you'll need to modify these architectural layers:\n\n\n**1. External Connector Integration**\n   - `crates/hyperswitch_connectors/src/connectors/nuvei.rs`\n   - `crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs`\n\n**2. Tests**\n   - `config/deployments/integration_test.toml`\n\n**3. Configuration Files**\n   - `config/deployments/production.toml`\n   - `config/deployments/sandbox.toml`\n   - `config/development.toml`\n\n**Code Patterns Applied:**\n- Define new data structures (1 changes)\n- Implement new functions (7 changes)\n- Extend existing types with new fields (81 changes)\n\n**Detailed Identifier Changes:**\n\n\nCommit a589e224:\nFiles to modify:\n\n\n**nuvei.rs**\n  Modify existing code\n\n**transformers.rs**\n  Add:\n    - function: private::get_ntid\n    - function: private::get_ntid\n    - function: private::get_ntid\n    - struct: pub::ExternalSchemeDetails", "metadata": {"pr_number": 9081, "pr_title": "feat(nuvei): NTID Support + googlepay & applepay mandate support", "merged_at": "2025-08-29T13:21:26Z", "intent": {"feature_type": "search_filter", "action": "add_feature", "entities": ["customer", "payment", "merchant"]}, "hierarchy": {"connectors": ["crates/hyperswitch_connectors/src/connectors/nuvei.rs", "crates/hyperswitch_connectors/src/connectors/nuvei/transformers.rs"], "tests": ["config/deployments/integration_test.toml"], "config": ["config/deployments/production.toml", "config/deployments/sandbox.toml", "config/development.toml"]}, "change_types": {"structs_added": 1, "functions_added": 7, "fields_added": 81, "imports_added": 1}, "has_identifier_data": true, "commits_matched": 1, "match_method": "pr_number"}}
