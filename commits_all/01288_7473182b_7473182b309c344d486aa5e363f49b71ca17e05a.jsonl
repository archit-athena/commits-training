{"prompt": "feat(analytics): add new filters, dimensions and metrics for authentication analytics (#7451)\n\nCo-authored-by: Sandeep Kumar <sandeep.kumar@Sandeep-Kumar-LVF93XQXPC.local>", "response": "Files to modify:\n\n\n**auth_events.rs**\n  Add:\n    - mod: pub::filters\n    - mod: pub::types\n\n**accumulator.rs**\n  Add:\n    - function: private::add_metrics_bucket\n    - function: private::collect\n    - struct: pub::AuthenticationErrorMessageAccumulator\n    - impl: impl AuthEventMetricAccumulator for AuthenticationErrorMessageAccumulator\n\n**core.rs**\n  Modify existing code\n\n**filters.rs**\n  Add:\n    - function: pub::get_auth_events_filter_for_dimension\n    - struct: pub::AuthEventFilterRow\n    - trait: pub::AuthEventFilterAnalytics\n\n**metrics.rs**\n  Add:\n    - mod: private::authentication_error_message\n    - mod: private::authentication_funnel\n\n**authentication_attempt_count.rs**\n  Modify existing code\n\n**authentication_count.rs**\n  Modify existing code\n\n**authentication_error_message.rs**\n  Add:\n    - function: private::load_metrics\n    - struct: pub::AuthenticationErrorMessage\n    - impl: impl super::AuthEventMetric<T> for AuthenticationErrorMessage\n\n**authentication_funnel.rs**\n  Add:\n    - function: private::load_metrics\n    - struct: pub::AuthenticationFunnel\n    - impl: impl super::AuthEventMetric<T> for AuthenticationFunnel\n\n**authentication_success_count.rs**\n  Modify existing code\n\n**challenge_attempt_count.rs**\n  Modify existing code\n\n**challenge_flow_count.rs**\n  Modify existing code\n\n**challenge_success_count.rs**\n  Modify existing code\n\n**frictionless_flow_count.rs**\n  Modify existing code\n\n**frictionless_success_count.rs**\n  Modify existing code\n\n**types.rs**\n  Add:\n    - function: private::set_filter_clause\n    - impl: impl QueryFilter<T> for AuthEventFilters\n\n**clickhouse.rs**\n  Add:\n    - function: private::try_into\n    - impl: impl super::auth_events::filters::AuthEventFilterAnalytics for ClickhouseClient\n    - impl: impl TryInto<AuthEventFilterRow> for serde_json::Value\n\n**core.rs**\n  Modify existing code\n\n**lib.rs**\n  Modify existing code\n\n**query.rs**\n  Modify existing code\n\n**sqlx.rs**\n  Add:\n    - function: private::from_row\n    - function: private::from_row\n    - impl: impl super::auth_events::metrics::AuthEventMetricAnalytics for SqlxClient\n    - impl: impl super::auth_events::filters::AuthEventFilterAnalytics for SqlxClient\n    - impl: impl FromRow<'a, PgRow> for super::auth_events::metrics::AuthEventMetricRow\n    - impl: impl FromRow<'a, PgRow> for super::auth_events::filters::AuthEventFilterRow\n\n**utils.rs**\n  Add:\n    - function: pub::get_auth_event_dimensions\n\n**analytics.rs**\n  Add:\n    - struct: pub::GetAuthEventFilterRequest\n    - struct: pub::AuthEventFiltersResponse\n    - struct: pub::AuthEventFilterValue\n    - struct: pub::AuthEventMetricsResponse\n    - struct: pub::AuthEventsAnalyticsMetadata\n\n**auth_events.rs**\n  Add:\n    - mod: pub::filters\n    - mod: pub::types\n\n**events.rs**\n  Add:\n    - function: private::get_api_event_type\n    - impl: impl ApiEventMetric for AuthEventMetricsResponse<T>\n\n**enums.rs**\n  Modify existing code\n\n**analytics.rs**\n  Add:\n    - struct: pub::GetAuthEventFilterRequest\n    - struct: pub::AuthEventFiltersResponse\n    - struct: pub::AuthEventFilterValue\n    - struct: pub::AuthEventMetricsResponse\n    - struct: pub::AuthEventsAnalyticsMetadata"}
